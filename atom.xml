<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chrimera_tu</title>
  
  <subtitle>Chrimera_tu</subtitle>
  <link href="https://chrimeta-tu.top/atom.xml" rel="self"/>
  
  <link href="https://chrimeta-tu.top/"/>
  <updated>2022-08-17T14:55:05.225Z</updated>
  <id>https://chrimeta-tu.top/</id>
  
  <author>
    <name>Chrimera_tu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://chrimeta-tu.top/archives/0.html"/>
    <id>https://chrimeta-tu.top/archives/0.html</id>
    <published>2022-06-28T16:49:10.592Z</published>
    <updated>2022-08-17T14:55:05.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="switch的一些细节"><a href="#switch的一些细节" class="headerlink" title="switch的一些细节"></a>switch的一些细节</h2><h3 id="细节一"><a href="#细节一" class="headerlink" title="细节一"></a>细节一</h3><ol><li>表达式数据类型应和case后的常量类型一致</li><li>或者是可以自动转换成可以相互比较的类型，比如输入的是字符，而常量是int</li></ol><pre><code>        char c = 'b';        char c2 = 'c';        switch(c) {            case 'a' :                System.out.println("ok1");                break;            case "hello"  :                System.out.println("ok2");                break;            default :                System.out.println("ok3");        }</code></pre><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><ol><li>switch(表达式)中表达式的返回值必须是：(byte,short,int,char,enum[枚举]，String)</li></ol><pre class=" language-java"><code class="language-java">        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1.1</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2.1</span>  <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="细节三"><a href="#细节三" class="headerlink" title="细节三"></a>细节三</h3><ol><li>case子句中的值必须是常量(1,’a’)或者是常量表达式，而不能是变量</li></ol><pre class=" language-java"><code class="language-java">        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> c  <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="细节4"><a href="#细节4" class="headerlink" title="细节4"></a>细节4</h3><ol><li>default子句是可选的，当没有case时，执行default，如果没有default子句，当没有匹配任何变量时，则没有输出</li></ol><h3 id="细节5"><a href="#细节5" class="headerlink" title="细节5"></a>细节5</h3><ol><li>break语句用来在执行完一个case分支后使程序跳出switch语句块，如果没有写break，程序会顺序执行到switch结尾,除非执行到break</li></ol><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><blockquote><ol><li>化繁为简</li><li>先死后活</li></ol><p>实现：</p><p>0 + 5 = 5</p><p>1  +4 = 5</p><p>2 + 3 = 5</p><p>3 + 2 = 5</p><p>4 + 1 = 5</p><p>5 + 0 = 5</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForExercise02</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//编写一个main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//化繁为简</span>        <span class="token comment" spellcheck="true">//先死后活 </span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="break的一些细节"><a href="#break的一些细节" class="headerlink" title="break的一些细节"></a>break的一些细节</h2><ol><li>break语句出现在多层嵌套语句块中时，可以通过标签指明要终止的是那一层语句块</li><li>标签的基本使用</li></ol><pre class=" language-java"><code class="language-java">label1<span class="token operator">:</span><span class="token punctuation">{</span>    label2<span class="token operator">:</span><span class="token punctuation">{</span>        label3<span class="token punctuation">{</span>            <span class="token keyword">break</span> lable2        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span> 语句可以指明退出那一层<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>label1 是标签，由程序员指定<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">break</span> 后指定到哪个label就退出到哪里<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>在实际开发中尽量不要使用标签<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>如果没有指定<span class="token keyword">break</span>，默认退出最近的循环体</code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h2><blockquote><p>数组在默认情况下是引用传递，赋的值是地址</p><p>例如下面的代码，改arr2的值arr1也会被改变 </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码 ArrayAssign.java</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1</code></pre><h2 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将 int[] arr1 = {10,20,30}; 拷贝到 arr2 数组, //要求数据空间是独立的. int[] arr1 = {10,20,30};</span><span class="token comment" spellcheck="true">//创建一个新的数组 arr2,开辟新的数据空间</span><span class="token comment" spellcheck="true">//大小 arr1.length;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 arr1 ，把每个元素拷贝到 arr2 对应的元素位置</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//老师修改 arr2， 不会对 arr1 有影响. arr2[0] = 100;</span><span class="token comment" spellcheck="true">//输出 arr1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====arr1 的元素===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10,20,30</span></code></pre><h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>下面数组定义正确的有 BD Homework01 javaA<span class="token punctuation">.</span> String strs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'a'</span> <span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">''</span>c'<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//error, char -> String</span>B<span class="token punctuation">.</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ok</span>C<span class="token punctuation">.</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">{</span><span class="token string">"a"</span> <span class="token string">"b"</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//error</span>D<span class="token punctuation">.</span> String strs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span>”c"<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>E<span class="token punctuation">.</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>error编译不通过</code></pre><p><u>布尔值数组默认是false</u></p><p><u>普通数组默认值是0</u></p><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><ol><li>属性的定义语法同变量，示例：访问修饰符 属性类型 属性名; 这里老师简单的介绍访问修饰符： 控制属性的访问范围 有四种访问修饰符 public, proctected, 默认, private ,后面我会详细介绍 。</li><li>属性的定义类型可以为任意类型，包含基本类型或引用类型</li><li>属性如果不赋值，有默认值，规则和数组一致。具体说: int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \u0000， boolean false，String null</li></ol><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ol><li>栈： 一般存放基本数据类型(局部变量)</li><li>堆： 存放对象(Cat cat , 数组等) </li><li>方法区：常量池(常量，比如字符串)， 类加载信息</li><li>示意图 [Cat (name, age, price)</li></ol><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220721090240010.png" alt="image-20220721090240010"></p><p><strong> Java 创建对象的流程简单分析</strong></p><pre class=" language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> “jack”<span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span></code></pre><ol><li>先加载 Person 类信息(属性和方法信息, 只会加载一次)</li><li>在堆中分配空间, 进行默认初始化(看规则)</li><li>把地址赋给 p</li><li>进行指定初始化， 比如 p.name =”jack</li></ol><h3 id="方法调用小结"><a href="#方法调用小结" class="headerlink" title="方法调用小结"></a>方法调用小结</h3><ol><li>当程序执行到方法时，就会开辟一个独立的空间(栈空间)</li><li>当方法执行完毕，或者执行到return语句时，就会返回，</li><li>返回到调用方法的地方</li><li>返回后，继续执行方法后面的代码</li><li>当main方法(栈)执行完毕，整个程序退出</li></ol><h3 id="返回数据类型"><a href="#返回数据类型" class="headerlink" title="返回数据类型"></a>返回数据类型</h3><ol><li><p>一个方法最多有一个返回值 [思考，如何返回多个结果 返回数组 ] </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    resArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    resArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span>    <span class="token keyword">return</span> resArr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>返回类型可以为任意类型，包含基本类型或引用类型(数组，对象)</p></li><li><p>如果方法要求有返回数据类型，则方法体中最后的执行语句必须为 return 值; 而且要求返回类型必须和 return 的 值类型一致或兼容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int ->double</span>    <span class="token comment" spellcheck="true">//return d1; //ok? double -> int</span><span class="token punctuation">}</span></code></pre></li><li><p>如果方法是 void，则方法体中可以没有 return 语句，或者 只写 return ;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//return ;</span><span class="token punctuation">}</span></code></pre><p>形参列表</p><ol><li>一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开</li><li>参数类型可以为任意类型，包含基本类型或引用类型</li><li>调用带参数的方法时，一定对应着参数列表传入相同类型或兼容类型的参数!</li><li>方法定义时的参数称为形式参数，简称形参:方法调用时的传入参数称为实际参数，简称实参，实参和形参的类型要一致或兼容、个数、顺序必须致!                       </li><li>方法体<br> 里面写完成功能的具体的语句，可以为输入、输出、变量、运算、分支、循环、方法调用，但里面不能再定义方法!即:方法不能嵌套定义。</li></ol></li></ol><h3 id="成员方法传参机制"><a href="#成员方法传参机制" class="headerlink" title="成员方法传参机制"></a>成员方法传参机制</h3><p>当以对象为参数传递到形参时，是将地址复制给形参。</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220722081436698.png" alt="image-20220722081436698"></p><h3 id="递归的重要规则"><a href="#递归的重要规则" class="headerlink" title="递归的重要规则"></a>递归的重要规则</h3><ol><li><p>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</p></li><li><p>方法的局部变量是独立的，不会相互影响，比如n变量</p></li><li><p>.如果方法中使用的是引用类型变量(比如数组，对象)，就会共享该引用类型的数据.</p></li><li><p>递归必须向退出递归的条件逼近，否则就是无限递归，出现StackOverflowError,死龟了:)</p></li><li><p>当一个方法执行完毕，或者遇到return, 就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</p></li></ol><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol><li>方法名:必须相同</li><li>形参列表:必须不同(形参类型或个数或顺序，至少有一样不同，参数名无要求)</li><li>返回类型:无要求</li></ol><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。 就可以通过可变参数实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. int... 表示接受的是可变参数，类型是 int ,即可以接收多个 int(0-多)</span><span class="token comment" spellcheck="true">//2. 使用可变参数时，可以当做数组来使用 即 nums 可以当做数组</span><span class="token comment" spellcheck="true">//3. 遍历 nums 求和即可</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//System.out.println("接收的参数个数=" + nums.length);</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h4><ol><li>可变参数的实参可以为0个或任意多个。</li><li>可变参数的实参可以为数组。</li><li>可变参数的本质就是数组.</li><li>可变参数可以和普通类型的参数- 起放在形参列表，但必须保证可变参数在最后</li><li>一个形参列表中只能出现-个可变参数</li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li>在java编程中，主要的变量就是属性(成员变量)和局部变量。我们说的局部变量一般是指在成员方法中定义的变量。</li><li>java中作用域的分类全局变量:也就是属性，作用域为整个类体Cat类: cry eat等方法使用属性</li><li>局部变量:也就是除了属性之外的其他变量，作用域为定义它的代码块中!</li><li>全局变量(属性)可以不赋值，直接使用，因为有默认值，局部变量必须赋值后，才能使用，因为没有默认值。</li></ol><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol><li><p>属性和局部变量可以重名，访问时遵循就近原则。</p></li><li><p>在同一个作用域中，比如在同个成员方法中，两个局部变量，不能重名。</p></li><li><p>属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。局部变量，生命周期较短，伴随着它的代码块的执行而创建，伴随着代码块的结束而销毁。即在一次方法调用过程中。</p></li><li><p>作用域范围不同<br>全局变量/属性:可以被本类使用，或其他类使用(通过对象调用)<br>局部变量:只能在本类中对应的方法中使用</p></li><li><p>修饰符不同<br>全局变量/属性可以加修饰符<br>局部变量不可以加修饰符</p></li></ol><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ol><li>构造器的修饰符可以默认，也可 以是public protected private</li><li>构造 器没有返回值</li><li>方法名 和类名字必须一样</li><li>参数列表和成员方法一样的规则</li><li>构造器的调用， 由系统完成</li></ol><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>方法名和类名相同</li><li>没有返回值</li><li>在创建对象时，系统会自动的调用该类的构造器完成对象的初始化</li></ol><h3 id="细节-3"><a href="#细节-3" class="headerlink" title="细节"></a>细节</h3><ol><li>一个类可以定义多个不同的构造器，即构造器重载比如:我们可以再给Person类定义个构造器用来创建对象的时候，只指定人名，不需要指定年龄</li><li>构造器名和类名要相同</li><li>构造器没有返回值</li><li>构造器是完成对象的初始化，并不是创建对象</li><li>在创建对象时，系统自动的调用该类的构造方法</li><li>如果程序员没有定义构造器，系统会自动给类生成个默认无参构造器(也叫默认构造器)，比如Dog (){},使用javap指令反编译看看</li><li>一旦定义了自己的构造器,默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下,即: Dog({} 写(这点很重要)</li></ol><h2 id="对象创建流程分析"><a href="#对象创建流程分析" class="headerlink" title="对象创建流程分析"></a>对象创建流程分析</h2><ol><li>加载Person类信息(Person.class) ,只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象初始化[3.1默认初始化age=0 name= null 3.2显式初始化age=90,name=null, 3.3构造器的初始化age = 20, name=小倩]</li><li>在对象在堆中的地址,返回给p(p是对象名,也可以理解成是对象的引用)</li></ol><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220723113447738.png" alt="image-20220723113447738"></p><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">This01</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//编写一个 main 方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>Dog dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"大壮"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog1 的 hashcode="</span> <span class="token operator">+</span> dog1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//dog1 调用了 info()方法</span>dog1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Dog dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"大黄"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dog2 的 hashcode="</span> <span class="token operator">+</span> dog2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//类</span>String name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// public Dog(String dName, int dAge){//构造器</span><span class="token comment" spellcheck="true">// name = dName;</span><span class="token comment" spellcheck="true">// age = dAge;</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//如果我们构造器的形参，能够直接写成属性名，就更好了</span><span class="token comment" spellcheck="true">//但是出现了一个问题，根据变量的作用域原则</span><span class="token comment" spellcheck="true">//构造器的 name 是局部变量，而不是属性</span><span class="token comment" spellcheck="true">//构造器的 age 是局部变量，而不是属性</span><span class="token comment" spellcheck="true">//==> 引出 this 关键字来解决</span><span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span><span class="token comment" spellcheck="true">//this.name 就是当前对象的属性 name</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this.age 就是当前对象的属性 age</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this.hashCode="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//成员方法,输出属性 x 信息</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this.hashCode="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong><u>那个对象调用，this就代表那个对象。</u></strong></p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220723141103313.png" alt="image-20220723141103313"></p><h3 id="细节-4"><a href="#细节-4" class="headerlink" title="细节"></a>细节</h3><ol><li>this 关键字可以用来访问本类的属性、方法、构造器</li><li>this 用于区分当前类的属性和局部变量</li><li>访问成员方法的语法：this.方法名(参数列表);</li><li>访问构造器语法：this(参数列表); 注意只能在构造器中使用(即只能在构造器中访问另外一个构造器, 必须放在第一 条语句)</li><li>this 不能在类定义的外部使用，只能在类定义的方法中使用</li></ol><p>用this访问属性和直接的用变量名访问的区别是，变量名会考虑就近一致原则，而this不用考虑如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"smith"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" num="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//smith 100</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" num="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span> jack <span class="token number">100</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h2><ol><li>删除当前行, 默认是 ctrl + Y 自己配置 ctrl + d</li><li>复制当前行, 自己配置 ctrl + alt + 向下光标</li><li>补全代码 alt + /</li><li>添加注释和取消注释 ctrl + / 【第一次是添加注释，第二次是取消注释】</li><li>导入该行需要的类 先配置 auto import , 然后使用 alt+enter 即可 </li><li>快速格式化代码 ctrl + alt + L </li><li>快速运行程序 自己定义 alt + R </li><li>生成构造器等 alt + insert [提高开发效率]</li><li>查看一个类的层级关系 ctrl + H [学习继承后，非常有用]</li><li>将光标放在一个方法上，输入 ctrl + B , 可以定位到方法 [学继承后，非常有用]</li><li>自动的分配变量名 , 通过 在后面假 .var [老师最喜欢的]</li><li>还有很多其它的快捷键…</li></ol><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>file -&gt; settings -&gt; editor-&gt; Live templates -&gt;<br>查看有哪些模板快捷键/可以自己增加模板模板可以高效的完成开发，提高速度</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>现在有两个程序员共同开发一个java项目,程序员xiaoming希望定义一 个类取名Dog ,程序员xiaoqiang也想定义个类也叫Dog。两个程序员为此还吵了起来，怎么办? -》包</p><h3 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h3><ol><li>区分相同名字的类</li><li>当类很多时,可以很好的管理类[看Java API文档]</li><li>控制访问范围</li></ol><h3 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h3><blockquote><p>V命名规则:<br>只能包含数字、字母、下划线、 小圆点,但不能用数字开头，不能是关键字或保留字<br>demo.class.exec1 //错误 class是关键字<br>demo.12a //错误12a 是数字开头<br>demo.ab12.oa //对<br>1min思考.<br>命名规范<br>般是小写字母+小圆点一 般是<br>com.公司名.项目名.业务模块名<br>比如: com.hspedu.oa.model; com.hspedu.oa.controller;<br>举例:<br>com.sina.crm.user //用户模块<br>com.sina.crm.order //订单模块<br>com.sina.crm.utils //工具类</p></blockquote><h3 id="常用的包"><a href="#常用的包" class="headerlink" title="常用的包"></a>常用的包</h3><p>一个包下,包含很多的类,java 中常用的包有:</p><ol><li>java.lang.* //lang 包是基本包，默认引入，不需要再引入. </li><li>java.util.* //util 包，系统提供的工具包, 工具类，使用 Scanner</li><li>java.net.* //网络包，网络开发 </li><li>java.awt.* //是做 java 的界面</li></ol><h3 id="细节-5"><a href="#细节-5" class="headerlink" title="细节"></a>细节</h3><p>如何导入包？</p><p>语法: import包;<br>我们引入一个包的主要目的是要使用该包下的类<br>比如import java.util.Scanner;就只是引入一个类Scanner.<br>import java.util.*; ”表示将java.util包所有都引入 </p><ol><li>package的作用是声明当前类所在的包，需要放在类的最上面，-个类中最多只有一句package</li><li>import指令位置放在package的下面，在类定义前面可以有多句且没有顺序要求。</li></ol><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><table><thead><tr><th>访问控制修饰符</th><th>访问控制修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包，</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>没有修饰符</td><td>protected</td><td>√</td><td>√</td><td>√</td><td>X</td></tr><tr><td>默认</td><td>没有修饰符</td><td>√</td><td>√</td><td>X</td><td>X</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><ol><li>公开级别:用 public 修饰,对外公开</li><li>受保护级别:用 protected 修饰,对子类和同一个包中的类公开</li><li>默认级别:没有修饰符号,向同一个包的类公开</li><li>私有级别:用 private 修饰,只有类本身可以访问,不对外公开</li></ol><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装(encapsulation)就是把抽象出的数据[属性]和对数据的操作[方法]封装在一 起,数据被保护在内部,程序的其它部分只有通过被授权的操作[方法],才能对数据进行操作。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>将属性进行私有化private [不能直接修改属性]</p></li><li><p>提供一个公共的(public)set方法，用于对属性判断并赋值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>类型参数名<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Xxx表示某个属性</span><span class="token comment" spellcheck="true">//加入数据验证的业务</span>逻辑属性<span class="token operator">=</span>参数名<span class="token operator">:</span><span class="token punctuation">}</span></code></pre></li><li><p>提供个公共的(public)get方法，用于获取属性的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>数据类型<span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//权限判断,Xxx某个属性return xx; </span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>  继承可以解决代码复用,让我们的编程更加靠近人类思维.当多个类存在相同的属性(变量)和方法时,可以从这些类中 抽象出父类,在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过 extends 来 声明继承父类即可。画出继承的示意</p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220725094419723.png" alt="image-20220725094419723"></p><p>class子类extends父类{}<br>1)子类就会自动拥有父类定义的属性和方法<br>2)父类又叫超类，基类。<br>3)子类又叫派生类。</p><h3 id="细节-6"><a href="#细节-6" class="headerlink" title="细节"></a>细节</h3><ol><li>子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访 问，要通过父类提供公共的方法去访问 </li><li>子类必须调用父类的构造器， 完成父类的初始化</li><li>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无 参构造器，则必须在子类的构造器中用 super 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译 </li><li>如果希望指定去调用父类的某个构造器，则显式的调用一下 : super(参数列表)</li><li>super 在使用时，必须放在构造器第一行(super 只能在构造器中使用) </li><li>super() 和 this() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器 </li><li>java 所有类都是 Object 类的子类, Object 是所有类的基类.</li><li>父类构造器的调用不限于直接父类！将一直往上追溯直到 Object 类(顶级父类) </li><li>子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制。</li><li>不能滥用继承，子类和父类之间必须满足 is-a 的逻辑关系</li></ol><p><strong><u>访问内存图</u></strong></p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220725143720891.png" alt="image-20220725143720891"></p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>super 代表父类的引用，用于访问父类的属性、方法、构造器</p><ol><li>访问父类的属性，但不能访问父类的private属性[案例]super.属性名;</li><li>访问父类的方法，不能访问父类的private方法super.方法名(参数列表);</li><li>访问父类的构造器(这点前面用过):super(参数列表);只能放在构造器的第一句，只能出现一句!</li></ol><h3 id="细节-7"><a href="#细节-7" class="headerlink" title="细节"></a>细节</h3><ol><li>调用父类的构造器的好处(分工明确， 父类属性由父类初始化，子类的属性由子类初始化)</li><li>当子类中有和父类中的成员(属性和方法)重名时，为了访问父类的成员，必须通过super。如果没有重名，使用super、this、 直接访问是一样的效果!</li><li>super的访问不限于直接父类，如果爷爷类和本类中有同名的成员，也可以使用super去访向爷爷类的成员;如果多个基类(上级类)中都有同名的成员，使用super访问遵循就近原则。A-&gt;B-&gt;C, 当然也需要遵守访问权限的相关规则</li></ol><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>简单的说:方法覆盖(重写)就是子类有一一个方法和父类的某个方法的名称、返回类型、参数- 样,那么我们就说子类的这个方法覆盖了父类的方法。</p><h3 id="细节-8"><a href="#细节-8" class="headerlink" title="细节"></a>细节</h3><ol><li>子类的方法的形参列表，方法名称，要和父类方法的形参列表,方法名称完全一 样。</li><li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类比如父类返回类型是Object ,子类方法返回类型是String<br>public object getInfo(){}    public String getInfo(){}</li><li>子类方法不能缩小父类方法的访问权限[演示] public &gt; protected &gt;默认&gt; private<br>void say0k(){}<br>public Void say0k(){}</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的</p><p>(1)一个对象的编译类型和运行类型可以不致<br>(2)编译类型在定义对象时，就确定了，不能改变<br>(3)运行类型是可以变化的.<br>(4)编译类型看定义时=号的左边，运行类型看=号的右边</p><h3 id="细节-9"><a href="#细节-9" class="headerlink" title="细节"></a>细节</h3><p>多态的前提是：两个对象(类)存在继承关系</p><p>多态的向上转型:</p><ol><li>本质:父类的引用指向了子类的对象</li><li>语法:父类类型 引用名= new子类类型();</li><li>特点:编译类型看左边，运行类型看右边。可以调用父类中的所有成员(需遵守访问权限)，不能调用子类中特有成员;最终运行效果看子类的具体实现!</li></ol><blockquote><p>//向上转型调用方法的规则如下: </p><p> //(1)可以调用父类中的所有成员(需遵守访问权限) </p><p>//(2)但是不能调用子类的特有的成员</p><p> //(#)因为在编译阶段，能调用哪些成员,是由编译类型来决定的 </p><p>//animal.catchMouse();错误 </p><p>//(4)<strong><u>最终运行效果看子类(运行类型)的具体实现</u></strong>, 即调用方法时，按照从子类(运行类型)开始查找方法 //，然后调用，规则我前面我们讲的方法调用规则一致</p></blockquote><p>多态向下转型:</p><ol><li><p>语法:子类类型  引用名= (子类类型) 父类引用:</p><pre class=" language-java"><code class="language-java">Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//(1)语法：子类类型 引用名 =（子类类型）父类引用;</span><span class="token comment" spellcheck="true">//问一个问题? cat 的编译类型 Cat,运行类型是 Cat</span>Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span> animal<span class="token punctuation">;</span>cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//猫抓老鼠</span><span class="token comment" spellcheck="true">//(2)要求父类的引用必须指向的是当前目标类型的对象</span>Dog dog <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span> animal<span class="token punctuation">;</span></code></pre></li><li><p>只能强转父类的引用，不能强转父类的对象</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象</p></li><li><p>当向下转型后，可以调用子类类型中所有的成员</p></li></ol><p>属性没有重写之说！**<u>属性的值看编译类型</u>**</p><p> instanceOf 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类</p><h2 id="java-的动态绑定"><a href="#java-的动态绑定" class="headerlink" title="java 的动态绑定"></a>java 的动态绑定</h2><p>java的动态绑定机制</p><ol><li>当调用对象方法的时候，该 方法会和该对象的内存地址/运行类型绑定</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，那里使用</li></ol><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p> ==和 equals 的对比:</p><p>==是一个比较运算行</p><ol><li><p>==:既可以判断基本类型，又可以判断引用类型</p></li><li><p>== :如果判断基本类型，判断的是值是否相等。示例: int i= 10; double d=10.0;</p></li><li><p>== :如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象[案例说明]</p></li><li><p>equals: 是Object类中的方法，只能判断引用类型，如何看Jdk源码，看老师演示:</p></li><li><p>默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。比如IntegerString [ 看看String和Integer的equals源代码)</p></li></ol><h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h3><ol><li>提高具有哈希结构的容器的效率！</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！</li><li>两个引用，如果指向的是不同对象，则哈希值是不一样的 </li><li>哈希值主要根据地址号来的！， 不能完全将哈希值等价于地址。</li><li>案例演示[HashCode_.java]: obj.hashCode() [测试：A obj1 = new A(); A obj2 = new A(); A obj3 = obj1]</li><li>后面在集合，中 hashCode 如果需要的话，也会重写, 在讲解集合时，老韩在说如何重写 hashCode() 代码</li></ol><h3 id="toStirng方法"><a href="#toStirng方法" class="headerlink" title="toStirng方法"></a>toStirng方法</h3><ol><li>基本介绍 默认返回：全类名+@+哈希值的十六进制，【查看 Object 的 toString 方法】 子类往往重写 toString 方法，用于返回对象的属性信息 </li><li>重写 toString 方法，打印对象或拼接对象时，都会自动调用该对象的 toString 形式.Monster [name, job, sal] 案例: ToString_.java </li><li>当直接输出一个对象时，toString 方法会被默认的调用, 比如 System.out.println(monster)； 就会默认调用 monster.toString()</li></ol><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><ol><li>当对象被回收时，系统自动调用该对象的 finalize 方法。子类可以重写该方法，做一些释放资源的操作 </li><li>什么时候被回收：当某个对象没有任何引用时，则 jvm 就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来 销毁该对象，在销毁该对象前，会先调用 finalize 方法。</li><li>垃圾回收机制的调用，是由系统来决定(即有自己的 GC 算法), 也可以通过 System.gc() 主动触发垃圾回收机制，测 试：Car [name]</li></ol><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><blockquote><p>F7(跳入) </p><p>F8(跳过) shift+F8(跳出) F9(resume,执行到下一个断点)</p><p> F7：跳入方法内 F8: 逐行执行代码. shift+F8: 跳出方</p></blockquote><h1 id="面型对象编程（高级）"><a href="#面型对象编程（高级）" class="headerlink" title="面型对象编程（高级）"></a>面型对象编程（高级）</h1><h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><p>类变量也叫静态变量/静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时,取到的都是相同的值同样任何一个该类的对象去修改它时,修改的也是同一个变量。这个从前面的图也可看出来。</p><p>(1) static变量是同一个类所有对象共享</p><p>(2) static类变量，在类加载的时候就生成了</p><h3 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h3><p>访问修饰符 static 数据类型 变量名: [推荐]<br>static 访问修饰符 数据类型 变量名;</p><h3 id="如何访问"><a href="#如何访问" class="headerlink" title="如何访问"></a>如何访问</h3><p>类名:类变量名<br>或者对象名.类变量名[静态变量的访问修饰符的访问权限和范围 和普通属性是一样的。<br>推荐使用:类名类变量名:</p><h3 id="类变量细节"><a href="#类变量细节" class="headerlink" title="类变量细节"></a>类变量细节</h3><ol><li>什么时候需要用类变量当我们需要让某个类的所有对象都共享一个变量时， 就可以考虑使用类变量(静态变量):比如:定义学生类，统计所有学生共交多少钱。Student (name, staticfee)</li><li>类变量与实例变量(普通属性)区别<br>类变量是该类的所有对象共享的，而实例变量是每个对象独享的。</li><li>加上static称为类变量或静态变量，否则称为实例变量/普通变量/非静态变量</li><li>类变量可以通过类名.类变量名或者对象名类变量名来访问，但java设计者推荐我们使用类名.类变量名方式访问。前提是满足访问修饰符的访权限和范围]</li><li>实例变量不能通过类名.类变量名方式访问。</li><li>类变量是在类加载时就初始化了，也就是说，即使你没有创建对象，只要类加载了,就可以使用类变量了。</li><li>类变量的生命周期是随类的加载开始，随着类消亡而销毁。</li></ol><h3 id="类方法细节"><a href="#类方法细节" class="headerlink" title="类方法细节"></a>类方法细节</h3><ol><li><p>类方法和普通方法都是随着类的加载而加载，将结构信息存储在方法区:<br>类方法中无this的参数<br>普通方法中隐含着this的参数</p></li><li><p>类方法可以通过类名调用，也可以通过对象名调用。</p></li><li><p>普通方法和对象有关，需要通过对象名调用，比如对象名.方法名(参数)， 不能通过类名调<br>用。</p></li><li><p>类方法中不允许使用和对象有关的关键字，比如this和super. 普通方法(成员方法)可以。 </p></li><li><p>类方法(静态方法)中只能访问静态变量或静态方法。</p></li><li><p>普通成员方法，既可以访问非静态成员，也可以访问静态成员。</p><p><u>小结:静态方法，只能访问静态的成员，非静态的方法，可以访问静态成员和非静态成员</u><br><u>(必须遵守访问权限)</u></p></li></ol><h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><ol><li><p>main方法时虚拟机调用</p></li><li><p>java虚拟机需要调用类的main(方法，所以该方法的访问权限必须是public</p></li><li><p>java虚拟机在执行main(方法时不必创建对象，所以该方法必须是static</p></li><li><p>该方法接收String类型的数组参数， 该数组中保存执行java命令时传递给所运行的类的参数,案例演示，接收参数.</p></li><li><p>java 执行的程序参数1 参数2 参数3</p></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>在 main()方法中，我们可以直接调用 main 方法所在类的静态方法或静态属性。</li><li>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静 态成员</li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码化块又称为初始化块属于类中的成员[即是类的一部分]，类似于方法，将逻辑语句封装在方法体中，通过(包围起来。<br>但和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时，或创建对象时隐式调用。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span><span class="token punctuation">{</span>     代码<span class="token punctuation">}</span><span class="token punctuation">;</span>说明注意<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span>修饰符可选，要写的话，也只能写<span class="token keyword">static</span><span class="token number">2</span><span class="token punctuation">)</span>代码块分为两类，使用<span class="token keyword">static</span> 修饰的叫静态代码块，没有<span class="token keyword">static</span>修饰的，叫普通代码块<span class="token operator">/</span>非静态代码块。<span class="token number">3</span><span class="token punctuation">)</span>逻辑语句可以为任何逻辑语句<span class="token punctuation">(</span>输入、输出、方法调用、循环、判断等<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>号可以写上，也可以省略。</code></pre><h3 id="细节-10"><a href="#细节-10" class="headerlink" title="细节"></a>细节</h3><ol><li>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。如果是普通代码块，每创建个对象，就执行。</li></ol><h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><ol><li><p>类什么时候被加载[重要背!]<br>①创建对象实例时(new)<br>②创建子类对象实例，父类也会被加载<br>③使用类的静态成员时(静态属性，静态方法)</p></li><li><p>普通的代码块， 在创建对象实例时，会被隐式的调用。被创建一次，就会调用次。如果只是使用类的静态成员时，普通代码块并不会执行。</p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ol><li><p>static代码块是类加载时， 执行，只会执行一次</p></li><li><p>普通代码块是在创建对象时调用的，创建一次，调用次</p></li><li><p>.类加载的3种情况，需要记住</p></li><li><p>创建一个对象时，在一个类调用顺序是:(点 ，难点) :</p><p>①调用静态代码块和静态属性初始化(注意:静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用) </p><p>②调用普通代码块和普通属性的初始化(注意:普通代码块和普通属性初始化调用的优先级一样，如果有多个普通代码块和多个普通属性初始化，则按定义顺序调用)</p><p>③调用构造方法。</p><p>构造器最后执行</p></li><li><p>构造器的最前面其实隐含了super(和调用普通代码块，新写一个类演示，静态相关的代码块，属性初始化，在类加载时，就执行完毕因此是优先于构造器和普通代码块执行的CodeBlockDetail03.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>   <span class="token comment" spellcheck="true">//这里有隐藏的执行要求</span>   <span class="token comment" spellcheck="true">//(1) super();//这个知识点，在前面讲解继承的时候，老师说</span>   <span class="token comment" spellcheck="true">//(2)调用普通代码块的</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span><span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre></li><li><p>我们看一下创建一个子类对象时(继承关系)，他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用顺序如下:<br>①父类的静态代码块和静态属性(优先级一样， 按定义顺序执行)<br>②子类的静态代码块和静态属性(优先级一样，按定义顺序执行)<br>③父类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)<br>④父类的构造方法<br>⑤子类的普通代码块和普通属性初始化(优先级一样，按定义顺序执行)<br>⑥子类的构造方法//面试题</p></li><li><p>静态代码块只能直接调用静态成员(静态属性和静态方法)， 普通代码块可以调<br>用任意成员。学习比较麻烦，工作轻松</p></li></ol><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ol><li>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中， 对某个类只能存在一个对象实例， 并且该类只提供一个取得其对象实例的方法</li><li>单例模式有两种方式: <ol><li>饿汉式</li><li>懒汉式</li></ol></li></ol><p>演示饿汉式和懒汉式单例模式的实现。<br>步骤如下:<br>1)构造器私有化=》防止直接new<br>2)类的内部创建对象<br>3)向外暴露一个静态的公共方法。getnstance<br>4)代码实现Single’ Ton01 java SingleTonO2.java</p><h3 id="饿汉式VS懒汉式"><a href="#饿汉式VS懒汉式" class="headerlink" title="饿汉式VS懒汉式"></a>饿汉式VS懒汉式</h3><ol><li><p>二者最主要的区别在于创建对象的时机不同:饿汉式是在类加载就创建了对象实例，<br>而懒汉式是在使用时才创建。</p></li><li><p>饿汉式不存在线程安全问题，懒汉式存在线程安全问题。(后面学习线程后，会完善<br>一把)</p></li><li><p>饿汉式存在浪费资源的可能。因为如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，懒汉式是使用时才创建，就不存在这个问题。</p></li><li><p>在我们javaSE标准类中，java.lang.Runtime就是经典的单例模式。</p></li></ol><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>final中文意思:最后的，最终的.<br>final可以修饰类、属性、方法和局部变量.<br>在某些情况下,程序员可能有以下需求，就会使用到final:</p><ol><li>当不希望类被继承时，可以用final修饰. </li><li>当不希望父类的某个方法被子类覆盖/重写(override)时，可以用final关键字I<br>修饰。</li><li>当不希望类的的某个属性的值被修改，可以用final修饰. [案例演示: public<br>final double TAX RATE=0.08]</li><li>当不希望某个局部变量被修改，可以使用final修饰[案例演示final double<br>TAX RATE-0.08 ]</li></ol><h3 id="细节-11"><a href="#细节-11" class="headerlink" title="细节"></a>细节</h3><ol><li>final修饰的属性又叫常量，一般用XX XX XX来命名</li></ol><ol start="2"><li><p>final修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如<br>下位置之一[选择个位置赋初值即可] :<br>①定义时:如public final double TAX RATE=0.08;<br>②在构造器中<br>③在代码块中。</p></li><li><p>如果final修饰的属性是静态的，则初始化的位置只能是<br>①定义时②在静态代码块不能在构造器中赋值。</p></li></ol><ol start="4"><li>final类不能继承，但是可以实例化对象。[A2类]</li></ol><ol start="4"><li>如果类不是final类,但是含有final方法，则该方法虽然不能重写，但是可<br>以被继承。[A3类]</li></ol><ol start="6"><li><p>一般来说，如果一个类已经是final类了，就没有必要再将方法修饰成final方法。</p></li><li><p>final不能修饰构造方法(即构造器)</p></li><li><p>final和static往往搭配使用，效率更高，不会导致类加载底层编译器做了优化<br> 处理。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span><span class="token keyword">static</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"韩顺平教育~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="9"><li>包装类(Integer,Double,Float, Boolean等都是fina),String也是final类。</li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote><p>当父类的一些方法不能确定时，可以用abstract关键字来修饰该方法，这个方法就是抽象方法用abstract来修饰该类就是抽象类。<br>我们看看如何把Animal做成抽象类， 并让子类Cat类实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>String name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></blockquote><ol><li>用abstract关键字来修饰一个类时，这个类就叫抽象类访问修饰符abstract类名{</li><li>用abstract关键字来修饰一个方法时，这个方法就是抽象方法访问修饰符 abstract 返回类型 方法名(参数列表);//没有方法体</li><li>抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类()</li><li>抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多</li></ol><h3 id="细节-12"><a href="#细节-12" class="headerlink" title="细节"></a>细节</h3><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法。 也就是说，抽象类可以没有abstract方法</li></ol><ol start="3"><li>一旦类包含 了abstract方法则这个类必须声明为abstract</li><li>abstract只能修饰类和方法，不能修饰属性和其它的。</li><li>抽象类可以有任意成员[抽象类本质还是类] ,比如:非抽象方法、构造器、静态属性等等</li><li>抽象方法不能有主体，即不能实现.如图所示<br>abstract void aaa{}</li><li>如果一个类继承 了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类.</li><li>抽象方法不能使用private、 final和static来修饰， 因为这些关键字都是和重写相违背的。</li></ol><h2 id="模板设计"><a href="#模板设计" class="headerlink" title="模板设计"></a>模板设计</h2><p>抽象类体现的就是一种模板模式的设计， 抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><ol><li>当功能内部一 部分实现是确定，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</li><li>编写一个抽象父类，父类提供了多个子类的通用方法，并把个或多个方法留给其子类实现，就是一种模板模式.</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口就是给出一些没有实现的方法,封装到一起，到某 个类要使用的时候，在根据具体情况把这些方法写出来。语法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span>接口名<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//属性</span><span class="token comment" spellcheck="true">//抽象方法</span><span class="token keyword">class</span>类名<span class="token keyword">implements</span>接口<span class="token punctuation">{</span>自己属性<span class="token operator">:</span>自己方法<span class="token punctuation">;</span>必须实现的接口的抽象方法<span class="token punctuation">}</span></code></pre><p>小结:接口是更加抽象的抽象的类，抽象类里的方法可以有方法体，接口里的所有方法都没有方法体[jdk7.0]。接口体现了程序设计的多态和高内聚低偶合的设计思想。特别说明: Jdk8.0后接口类可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</p><h3 id="细节-13"><a href="#细节-13" class="headerlink" title="细节"></a>细节</h3><ol><li>接口不能被实例化</li><li>接口中所有的方法是public方法， 接口中抽象方法，可以不用abstract修饰图示:</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>实际上是<span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>一个普通类实现接口,就必须将该接口的所有方法都实现。</li><li>抽象类实现接口，可以不用实现接口的方法。</li></ol><ol start="5"><li>一个类同时可以实现多个接口 [举例]</li><li>接口中的属性，只能是final的，而且是public static final修饰符。比如:int a= 1;实际上是public static final int a= 1; (必须初始化)</li><li>接口中属性的访问形式接口名属性名</li><li>接口不能继承其它的类，但是可以继承多个别的接口</li><li>接口的修饰符只能是public和默认，这点和类的修饰符是一样的。</li></ol><h3 id="接口VS继承"><a href="#接口VS继承" class="headerlink" title="接口VS继承"></a>接口VS继承</h3><blockquote><p>小结: 当子类继承了父类，就自动的拥有父类的功能 </p><p>/如果子类需要扩展功能，可以通过实现接口的方式扩展.</p><p> 可以理解 实现接口是 对 java 单继承机制的一种补充.</p></blockquote><p><strong>接口和继承解决的问题不同:</strong><br>    继承的价值主要在于:解决代码的复用性和可维护性。<br>    接口的价值主要在于:设计，设计好各种规范(方法)，让其它类去实现这些方法。即更加的灵活..<br><strong>接口比继承更加灵活</strong><br>    接口比继承更加灵活，继承是满足is - a的关系，而接口只需满足like - a的关系。<br><strong>接口在一定程度上实现代码解耦[即:接口规范性+动态绑定机制</strong></p><h3 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h3><ol><li>多态参数在前面的Usb接口案例，UsbInterface usb，既可以接收手机对象，又可以接收相机对象，就体现了接口多态(接口引用可以指向实现了接口的类的对象)</li><li>多态数组InterfacePolyArrjava演示一个案例:给Usb数组中，存放Phone和相机对象，Phone类还有一个特有的方法call()，请遍历Usb数组，如果是Phone对象，除了调用Usb接口定义的方法外，还需要调用Phone特有方法call.Usb usbs[] = new Usb[2]:</li><li>接口存在多态传递现象InterfacePolyPass.java</li></ol><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>如果定义类在局部位置(方法中/代码块) :(1) 局部内部类 (2) 匿名内部类 </p><p>定义在成员位置 (1) 成员内部类 (2) 静态内部类</p><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类(inner class),嵌套其他类的类称为外部类(outer class)。是我们类的第五大成员[思考:类的五大<br>成员是哪些?**[属性、方法、构造器、代码块、内部类]**，内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系，注意:内部类是学习的难点，同时也是重点，后面看底层源码时，有大量的内部类.</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class=" language-jsvs"><code class="language-jsvs">class Outer{ //外部类    class Inner{ //内部类    }class Other{ //外部其他类//InnerClass01.java </code></pre><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>定义在外部类局部位置上(比如方法内) :<br>    1)局部内部类(有类名)<br>    2)匿名内部类(没有类名,重!!!!!）<br>定义在外部类的成员位置上:<br>    1)成员内部类(没用static修饰)<br>    2)静态内部类(使用static修饰)</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>说明:局部内部类是定义在外部类的局部位置，比如方法中，并且有类名。</p><ol><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>不能添加访问修饰符，因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final</p></li><li><p>作用域:仅仅在定义 它的方法或代码块中。</p></li><li><p>局部内部类—访向—-&gt;外部类的成员[访问方式:直接访问]</p></li><li><p>外部类–访问—&gt;局部内部类的成员访问方式创建对象，再访问(注意:必须在作用域内)<br>记住:(1)局部内部类定义在方法中/代码块<br>(2)作用域在方法体或者代码块中<br>(3)本质仍然是一一个类</p></li><li><p>外部其他类–不能访—-局部内部类(因为局部内部类地位是一个局部变量)</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.this.成员) 去访问[演示]System. out.println(”外部类的n2=”+外部类名this.n2);</p></li></ol><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>(1)本质是类(2)内部类(3)该类没有名字(4)同时还是一个对象<br>说明:匿名内部类是定义在外部类的局部位置，比如方法中，并且没有类名<br>1.匿名内部类的基本语法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 类或接口<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    类体<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>innerclass<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** 演示匿名内部类的使用*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousInnerClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Outer04 outer04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer04<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer04</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法</span><span class="token comment" spellcheck="true">//基于接口的匿名内部类</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1.需求： 想使用 IA 接口,并创建对象</span><span class="token comment" spellcheck="true">//2.传统方式，是写一个类，实现该接口，并创建对象</span><span class="token comment" spellcheck="true">//3.老韩需求是 Tiger/Dog 类只是使用一次，后面再不使用</span><span class="token comment" spellcheck="true">//4. 可以使用匿名内部类来简化开发</span><span class="token comment" spellcheck="true">//5. tiger 的编译类型 ? IA</span><span class="token comment" spellcheck="true">//6. tiger 的运行类型 ? 就是匿名内部类 Outer04$1</span><span class="token comment" spellcheck="true">/*我们看底层 会分配 类名 Outer04$1class Outer04$1 implements IA {@Overridepublic void cry() {System.out.println("老虎叫唤...");}}*/</span><span class="token comment" spellcheck="true">//7. jdk 底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1 实例，并且把地址</span><span class="token comment" spellcheck="true">// 返回给 tiger</span><span class="token comment" spellcheck="true">//8. 匿名内部类使用一次，就不能再使用</span>    IA tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老虎叫唤..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tiger 的运行类型="</span> <span class="token operator">+</span> tiger<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// IA tiger = new Tiger();</span><span class="token comment" spellcheck="true">// tiger.cry();</span><span class="token comment" spellcheck="true">//演示基于类的匿名内部类</span><span class="token comment" spellcheck="true">//分析</span><span class="token comment" spellcheck="true">//1. father 编译类型 Father</span><span class="token comment" spellcheck="true">//2. father 运行类型 Outer04$2</span><span class="token comment" spellcheck="true">//3. 底层会创建匿名内部类</span><span class="token comment" spellcheck="true">/*class Outer04$2 extends Father{@Overridepublic void test() {System.out.println("匿名内部类重写了 test 方法");}}*/</span><span class="token comment" spellcheck="true">//4. 同时也直接返回了 匿名内部类 Outer04$2 的对象</span><span class="token comment" spellcheck="true">//5. 注意("jack") 参数列表会传递给 构造器</span>    Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类重写了 test 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father 对象的运行类型="</span> <span class="token operator">+</span> father<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Outer04$2</span>    father<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//基于抽象类的匿名内部类</span>    Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗吃骨头..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//class Tiger implements IA {</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// @Override</span><span class="token comment" spellcheck="true">// public void cry() {</span><span class="token comment" spellcheck="true">// System.out.println("老虎叫唤...");</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//class Dog implements IA{</span><span class="token comment" spellcheck="true">// @Override</span><span class="token comment" spellcheck="true">// public void cry() {</span><span class="token comment" spellcheck="true">// System.out.println("小狗汪汪...");</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到 name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//抽象类</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>匿名内部类的语法比较奇特，请大家注意，因为匿名内部类既是一 个类的定义，同时它本身也是一个对象，因此从语法上看，它既有定义类的特征，也有创建对象的特征，对前面代码分析可以看出这个特点，因此可以调用匿名内部类方法。</p></li><li><p>可以直接访问外部类的所有成员，包含私有的[案例演示]</p></li><li><p>不能添加访问修饰符因为它的地位就是一 个局部变量。</p></li><li><p>作用域:仅仅在定义它的方法或代码块中。</p></li><li><p>匿名内部类–访—&gt;外部类成员[访问方式:直接访问]</p></li><li><p>外部其他类不能访—-匿名内部类(因为匿名内部类地位是一个局部变量)</p></li><li><p>如果外部类和匿名内部类的成员重名时，匿名内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.this.成员) 去访问</p></li></ol><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>说明:成员内部类是定义在外部类的成员位置，并且没有static修饰。</p><ol><li><p>可以直接访问外部类的所有成员，包含私有的</p></li><li><p>可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员。</p></li><li><p>作用域 MemberInnerClass01 java和外部类的其他成员一样，为整个类体比如前面案例，在外部类的成员方法中创建成员内部类对象，再调用方法</p></li><li><p>成员内部类– 访— &gt;外部类成员(比如:属性) [访问方式直接访问] (说明)</p></li><li><p>外部类访—-成员内部类(说明)访问方式创建对象，再访问</p></li><li><p>外部其他类– -访向—- &gt;成员内部类</p></li><li><p>如果外部类和内部类的成员重名时，内部类访问的话默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类名.this.成员) 去访问</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>innerclass<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberInnerClass01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Outer08 outer08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outer08<span class="token punctuation">.</span><span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//外部其他类，使用成员内部类的三种方式</span>    <span class="token comment" spellcheck="true">//老韩解读</span>    <span class="token comment" spellcheck="true">// 第一种方式</span>    <span class="token comment" spellcheck="true">// outer08.new Inner08(); 相当于把 new Inner08()当做是 outer08 成员</span>    <span class="token comment" spellcheck="true">// 这就是一个语法，不要特别的纠结. Outer08.Inner08 inner08 = outer08.new Inner08();</span>    inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二方式 在外部类中，编写一个方法，可以返回 Inner08 对象</span>    Outer08<span class="token punctuation">.</span>Inner08 inner08Instance <span class="token operator">=</span> outer08<span class="token punctuation">.</span><span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inner08Instance<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outer08</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//外部类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi()方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1.注意: 成员内部类，是定义在外部内的成员位置上</span>    <span class="token comment" spellcheck="true">//2.可以添加任意访问修饰符(public、protected 、默认、private),因为它的地位就是一个成员</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner08</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//成员内部类</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> sal <span class="token operator">=</span> <span class="token number">99.8</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//可以直接访问外部类的所有成员，包含私有的</span>        <span class="token comment" spellcheck="true">//如果成员内部类的成员和外部类的成员重名，会遵守就近原则. //，可以通过 外部类名.this.属性 来访问外部类的成员</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1 = "</span> <span class="token operator">+</span> n1 <span class="token operator">+</span> <span class="token string">" name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" 外部类的 n1="</span> <span class="token operator">+</span> Outer08<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法，返回一个 Inner08 实例</span>    <span class="token keyword">public</span> Inner08 <span class="token function">getInner08Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//写方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用成员内部类</span>        <span class="token comment" spellcheck="true">//创建成员内部类的对象，然后使用相关的方法</span>        Inner08 inner08 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner08<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inner08<span class="token punctuation">.</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h1><h2 id="枚举的两种实现放式"><a href="#枚举的两种实现放式" class="headerlink" title="枚举的两种实现放式"></a>枚举的两种实现放式</h2><ol><li>自定义类实现枚举</li><li>使用 enum 关键字实现枚</li></ol><h2 id="自定义类实现枚举"><a href="#自定义类实现枚举" class="headerlink" title="自定义类实现枚举"></a>自定义类实现枚举</h2><ol><li><p>不需要提供setXxx方法，因为枚举对象值通常为只读</p></li><li><p>对枚举对象/属性使用final + static共同修饰，实现底层优化.</p></li><li><p>枚举对象名通常使用全部大写，常量的命名规范</p></li><li><p>枚举对象根据需要，也可以有多个属性//Enumeration02.java</p></li></ol><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li>构造器私有化 </li><li>本类内部创建一组对象[四个 春夏秋冬</li><li>对外暴露对象（通过为对象添加 public final static 修饰符）</li><li>可以提供 get 方法，但是不要提供 set</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>enum_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @author 韩顺平* @version 1.0*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enumeration03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Season2<span class="token punctuation">.</span>AUTUMN<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Season2<span class="token punctuation">.</span>SUMMER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//演示使用 enum 关键字来实现枚举类</span><span class="token keyword">enum</span> Season2 <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类</span><span class="token comment" spellcheck="true">//定义了四个对象, 固定. // public static final Season SPRING = new Season("春天", "温暖");</span><span class="token comment" spellcheck="true">// public static final Season WINTER = new Season("冬天", "寒冷");</span><span class="token comment" spellcheck="true">// public static final Season AUTUMN = new Season("秋天", "凉爽");</span><span class="token comment" spellcheck="true">// public static final Season SUMMER = new Season("夏天", "炎热");</span><span class="token comment" spellcheck="true">//如果使用了 enum 来实现枚举类</span><span class="token comment" spellcheck="true">//1. 使用关键字 enum 替代 class</span><span class="token comment" spellcheck="true">//2. public static final Season SPRING = new Season("春天", "温暖") 直接使用</span><span class="token comment" spellcheck="true">// SPRING("春天", "温暖") 解读 常量名(实参列表)</span><span class="token comment" spellcheck="true">//3. 如果有多个常量(对象)， 使用 ,号间隔即可</span><span class="token comment" spellcheck="true">//4. 如果使用 enum 来实现枚举，要求将定义常量对象，写在前面</span><span class="token comment" spellcheck="true">//5. 如果我们使用的是无参构造器，创建常量对象，则可以省略 ()</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"温暖"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"寒冷"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"凉爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"炎热"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*, What()*/</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span>    <span class="token keyword">private</span> <span class="token function">Season2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//无参构造器</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Season2</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Season{"</span> <span class="token operator">+</span>        <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">", desc='"</span> <span class="token operator">+</span> desc <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="细节-14"><a href="#细节-14" class="headerlink" title="细节"></a>细节</h2><ol><li>当我们使用 enum 关键字开发一个枚举类时，默认会继承 Enum 类, 而且是一个 final 类</li><li>传统的 public static final Season2 SPRING = new Season2(“春天”, “温暖”); 简化成 SPRING(“春天”, “温暖”)， 这里必 须知道，它调用的是哪个构造器.</li><li>如果使用无参构造器 创建 枚举对象，则实参列表和小括号都可以省略 </li><li>当有多个枚举对象时，使用,间隔，最后有一个分号结尾 </li><li>枚举对象必须放在枚举类的行首</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li>toString:Enum 类已经重写过了，返回的是当前对象 名,子类可以重写该方法，用于返回对象的属性信息 </li><li>name：返回当前对象名（常量名），子类中不能重写</li><li>ordinal：返回当前对象的位置号，默认从 0 开始 </li><li>values：返回当前枚举类中所有的常量</li><li>valueOf：将字符串转换成枚举对象，要求字符串必须 为已有的常量名，否则报异常！</li><li>compareTo：比较两个枚举常量，比较的就是编号！</li></ol><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ol><li>使用 enum 关键字后，就不能再继承其它类了，因为 enum 会隐式继承 Enum，而 Java 是单继承机制。</li><li>枚举类和普通类一样，可以实现接口，如下形式。 enum 类名 implements 接口 1，接口2{}</li></ol><h2 id="注解的理解"><a href="#注解的理解" class="headerlink" title="注解的理解"></a>注解的理解</h2><ol><li>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。</li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。</li><li>在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角 色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等</li></ol><h2 id="Annotaton介绍"><a href="#Annotaton介绍" class="headerlink" title="Annotaton介绍"></a>Annotaton介绍</h2><p>使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素 </p><p>三个基本的 Annotation:</p><ol><li>@Override: 限定某个方法，是重写父类方法, 该注解只能用于方法 </li><li>@Deprecated: 用于表示某个程序元素(类, 方法等)已过时</li><li>@SuppressWarnings: 抑制编译器警告</li></ol><h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><p>Override使用说明</p><ol><li>@Override表示指定重写父类的方法(从编译层面验证)，如果父类没有fly方法，则会报错</li><li>如果不写@Override注解，而父类仍有public void fly00} ,仍然构成重写</li><li>@Override只能修饰方法，不能修饰其它类，包，属性等等</li><li>查看@Override注解源码为@Target(ElementType.METHOD),说明只能修饰方法</li><li>@Target是修饰注解的注解，称为元注解记住这个概念.</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>annotation_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @author 韩顺平* @version 1.0*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Override_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//父类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father fly..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子类</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. @Override 注解放在 fly 方法上，表示子类的 fly 方法时重写了父类的 fly</span><span class="token comment" spellcheck="true">//2. 这里如果没有写 @Override 还是重写了父类 fly</span><span class="token comment" spellcheck="true">//3. 如果你写了@Override 注解，编译器就会去检查该方法是否真的重写了父类的</span><span class="token comment" spellcheck="true">// 方法，如果的确重写了，则编译通过，如果没有构成重写，则编译错误</span><span class="token comment" spellcheck="true">//4. 看看 @Override 的定义</span><span class="token comment" spellcheck="true">// 解读： 如果发现 @interface 表示一个 注解类</span><span class="token comment" spellcheck="true">/*@Target(ElementType.METHOD)@Retention(RetentionPolicy.SOURCE)public @interface Override {}*/</span>    <span class="token annotation punctuation">@Override</span> <span class="token comment" spellcheck="true">//说明</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son fly...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Deprecate"><a href="#Deprecate" class="headerlink" title="Deprecate"></a>Deprecate</h3><p>@Deprecated的说明</p><ol><li>用于表示某个程序元素(类，方法等)已过时</li><li>可以修饰方法，类，字段，包，参数等等</li><li>@Target(value= {CONSTRUCTOR, FIELD, LOCAL VARIABLE, METHOD,PACKAGE, PARAMETER, TYPE})</li><li>@Deprecated的作用可以做到新旧版本的兼容和过渡</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>annotation_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @author 韩顺平* @version 1.0*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deprecated_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. @Deprecated 修饰某个元素, 表示该元素已经过时</span><span class="token comment" spellcheck="true">//2. 即不在推荐使用，但是仍然可以使用</span><span class="token comment" spellcheck="true">//3. 查看 @Deprecated 注解类的源码</span><span class="token comment" spellcheck="true">//4. 可以修饰方法，类，字段, 包, 参数 等等</span><span class="token comment" spellcheck="true">//5. @Deprecated 可以做版本升级过渡使用</span><span class="token comment" spellcheck="true">/*@Documented@Retention(RetentionPolicy.RUNTIME)@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})public @interface Deprecated {}*/</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="SuppressWarnings"></a>SuppressWarnings</h3><p>●@SuppressWarnings注解的案例</p><ol><li>unchecked 是忽略没有检查的警告</li><li>rawtypes是忽略没有指定泛型的警告(传参时没有指定泛型的警告错误)</li><li>unused是忽略没有使用某个变量的警告错误</li><li>@SuppressWarnings 可以修饰的程序元素为，查看@ Target</li><li>生成@SupperssWarnings时，不用背，直接点击左侧的黄色提示，就可以选择(注意可以指定生成的位置)</li></ol><h2 id="JDK的元Annotation"><a href="#JDK的元Annotation" class="headerlink" title="JDK的元Annotation"></a>JDK的元Annotation</h2><p>JDK 的元 Annotation 用于修饰其他 Annotation 元注解： 本身作用不大，讲这个原因希望同学们，看源码时，可以知道他是干什么。</p><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><ol><li>Retention //指定注解的作用范围，三种 SOURCE,CLASS,RUNTIME</li><li>Target // 指定注解可以在哪些地方使用</li><li>Documented //指定该注解是否会在 javadoc 体现 </li><li>Inherited //子类会继承父类注解</li></ol><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>​只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 可以保留多长时间, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值: @Retention 的三种值 </p><ol><li>RetentionPolicy.SOURCE: 编译器使用后，直接丢弃这种策略的注释</li><li>RetentionPolicy.CLASS: 编译器将把注解记录在 class 文件中. 当运行 Java 程序时, JVM 不会保留注解。 这是默认值</li><li>RetentionPolicy.RUNTIME:编译器将把注解记录在 class 文件中. 当运行 Java 程序时, JVM 会保留注解. 程序可以 通过反射获取该注解</li></ol><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>用于修饰Annotation定义，用于指定被修饰的Annotation能用于修饰哪些程序元素. @Target也包含一个名为value的成员变量。</p><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>@Documented:用于指定被该元Annotation修饰的Annotation类将被javadoc工具提取成文档，即在生成文档时，可以看到该注解。说明:定义为Documented的注解必须设置Retention值为RUNTIME。</p><h3 id="Inherited-注解"><a href="#Inherited-注解" class="headerlink" title="@Inherited 注解"></a>@Inherited 注解</h3><p>被它修饰的Annotation将具有继承性如果某个类使用了被@Inherited修饰的Annotation,则其子类将自动具有该注解。</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>●基本概念<br>Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)执行过程中所发生的异常事件可分为两大类</p><ol><li>Error(错误): Java虚拟机无法解决的严重问题。如: JVM系统内部错误、资源耗尽等严重情况。比如: StackOverflowError[栈溢出]和OOM(out of memory), Error 是严重错误，程序会崩溃。</li><li>Exception:其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如空指针访问，试图读取不存在的文件，网络连接中断等等，Exception 分为两大类:运行时异常[程序运行时，发生的异常]和编译时异常[编程时，编译器检查出的异常]。</li></ol><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220802150023053.png" alt="image-20220802150023053"></p><ol><li>异常分为两大类，运行时异常和编译时异常.</li><li>运行时异常，编译器检查不出来。一般是指编程时的逻辑错误，是程序员应该避免其出现的异常。java.lang.RuntimeException类及它的子 类都是运行时异常</li><li>对于运行时异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响</li><li>编译时异常， 是编译器要求必须处置的异常。</li></ol><h2 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h2><ol><li>NullPointerException 空指针异常</li><li>ArithmeticException 数学运算异常</li><li>ArrayIndexOutOfBoundsException 数组下标越界异常</li><li>ClassCastException 类型转换异常</li><li>NumberFormatException 数字格式不正确异常[]</li></ol><h2 id="常见的编译时异常"><a href="#常见的编译时异常" class="headerlink" title="常见的编译时异常"></a>常见的编译时异常</h2><ol><li>SQLException //操作数据库时，查询表可能发生异常</li><li>IOException //操作文件时，发生的异常</li><li>FileNotFoundException //当操作一个不存在的文件时， 发生异常</li><li>ClassNotFoundException //加载类，而该类不存在时，异常</li><li>EOFException //操作文件，到文件末尾，发生异常</li><li>IllegalArguementException //参数异常</li></ol><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>异常处理就是当异常发生时，对异常处理的方式。</p><h3 id="异常处理的过程"><a href="#异常处理的过程" class="headerlink" title="异常处理的过程"></a>异常处理的过程</h3><ol><li>try-catch-finally<br>程序员在代码中捕获发生的异常，自行处理</li><li>throws<br>将发生的异常抛出，交给调用者(方法)来处理，最顶级的处理者就是JVM</li></ol><h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220802161815693.png" alt="image-20220802161815693"></p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220802161827403.png" alt="image-20220802161827403"></p><h2 id="try-catch-异常处"><a href="#try-catch-异常处" class="headerlink" title="try-catch 异常处"></a>try-catch 异常处</h2><ol><li><p>Java提供try和catch块来处理异常。 try块用于包含可能出错的代码。catch块用于处理try块中发生的异常。可以根据需要在程序中有多个ry..catch块。</p></li><li><p>基本语法</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//可疑代码</span><span class="token comment" spellcheck="true">//将异常生成对应的异常对象，传递给catch块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//对异常的处理</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果没有finally,语法是可以通过</span></code></pre><h3 id="细节-15"><a href="#细节-15" class="headerlink" title="细节"></a>细节</h3><ol><li><p>如果异常发生了， 则异常发生后面的代码不会执行， 直接进入到catch块</p></li><li><p>如果异常没有发生，则顺序执行try的代码块，不会进入到catch.</p></li><li><p>如果希望不管是否发生异常，都执行某段代码(比如关闭连接，释放资源等)则使用如下代码- finally{}</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//可疑代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//....</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//释放资源等..</span><span class="token punctuation">}</span> </code></pre><ol start="4"><li>可以有多个catch语句,捕获不同的异常(进行不同的业务处理)，要求父类异常在后，子类异常在前，比如(Exception 在后，NullPointerException 在前)，如果发生异常，只会匹配一个catch, 案例演示</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>try_<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @author 韩顺平* @version 1.0*/</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryCatchDetail02</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1.如果 try 代码块有可能有多个异常</span><span class="token comment" spellcheck="true">//2.可以使用多个 catch 分别捕获不同的异常，相应处理</span><span class="token comment" spellcheck="true">//3.要求子类异常写在前面，父类异常写在后面</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//person = null;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//NullPointerException</span>                <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArithmeticException</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空指针异常="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"算术异常="</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>可以进行 try-finally 配合使用，这种用法相当于没有捕获异常，因此程序会直接崩掉/退出。应用场景，就是执行一-段代码，不管是否发生异常，都必须执行某个业务逻辑。</li></ol><p>  <strong>finally必须执行，因此哪怕catch有return，也不执行，而是执行finally</strong></p><h3 id="try-catch-finally-执行顺序小结"><a href="#try-catch-finally-执行顺序小结" class="headerlink" title="try-catch-finally 执行顺序小结"></a>try-catch-finally 执行顺序小结</h3><ol><li>如果没有出现异常，则执行try块中所有语句，不执行catch块中语句，如果有finally,最后还需要执行finally里面的语句。</li><li>如果出现异常，则try块中异常发生后，try块剩下的语句不再执行。将执行catch块中的语句，如果有finally, 最后还需要执行finally里面的语句!</li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>如果用户输入的不是一个整数，就提示他反复输入，直到输入一个整数为止</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>try_<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryCatchExercise04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果用户输入的不是一个整数，就提示他反复输入，直到输入一个整数为止</span><span class="token comment" spellcheck="true">//思路</span><span class="token comment" spellcheck="true">//1. 创建 Scanner 对象</span><span class="token comment" spellcheck="true">//2. 使用无限循环，去接收一个输入</span><span class="token comment" spellcheck="true">//3. 然后将该输入的值，转成一个 int</span><span class="token comment" spellcheck="true">//4. 如果在转换时，抛出异常，说明输入的内容不是一个可以转成 int 的内容</span><span class="token comment" spellcheck="true">//5. 如果没有抛出异常，则 break 该循环</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String inputStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>            inputStr <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                num <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>inputStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里是可能抛出异常</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的不是一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的值是="</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><ol><li>如果个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</li><li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</li></ol><h3 id="细节-16"><a href="#细节-16" class="headerlink" title="细节"></a>细节</h3><ol><li>对于编译异常，程序中必须处理，比如try-catch或者throws</li><li>对于运行时异常，程序中如果没有处理，默认就是throws的方式处理[举例]</li><li>子类重写父类的方法时，对抛出异常的规定:子类重写的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常的类型的子类型[举例]</li><li>在throws过程中，如果有方法try- catch ,就相当于处理异常，就可以不必 throws</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里大家思考问题 调用 f3() 报错</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. 因为 f3() 方法抛出的是一个编译异常</span><span class="token comment" spellcheck="true">//2. 即这时，就要 f1() 必须处理这个编译异常</span><span class="token comment" spellcheck="true">//3. 在 f1() 中，要么 try-catch-finally ,或者继续 throws 这个编译异常</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出异常</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"d://aa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>当程序中出现了某些”错误”,但该错误信息并没有在Throwable子类中描述处理，这个时候可以自己设计异常类，用于描述该错误信息。</p><ol><li>定义类:自定义异常类名(程序员自己写)继承Exception或RuntimeException</li><li>如果继承Exception,属于编译异常</li><li>如果继承RuntimeException,属于运行异常(一般来说，继承RuntimeException)</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>customexception_<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*throws AgeException*/</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要求范围在 18 – 120 之间，否则抛出一个自定义异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里我们可以通过构造器，设置信息</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AgeException</span><span class="token punctuation">(</span><span class="token string">"年龄需要在 18~120 之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的年龄范围正确."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自定义一个异常</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. 一般情况下，我们自定义异常是继承 RuntimeException</span><span class="token comment" spellcheck="true">//2. 即把自定义异常做成 运行时异常，好处时，我们可以使用默认的处理机制</span><span class="token comment" spellcheck="true">//3. 即比较方便</span><span class="token keyword">class</span> <span class="token class-name">AgeException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">AgeException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h2><table><thead><tr><th></th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td>throws</td><td>异常处理的一种方式</td><td>方法声明处</td><td>异常类型</td></tr><tr><td>throw</td><td>手动生成异常对象的关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><h3 id="包装类和基本数据类型转换"><a href="#包装类和基本数据类型转换" class="headerlink" title="包装类和基本数据类型转换"></a>包装类和基本数据类型转换</h3><ol><li><p>jdk5前的手动装箱和拆箱方式，装箱:基本类型-&gt;包装类型，反之，拆箱</p></li><li><p>jdk5以后(含jdk5)的自动装箱和拆箱方式</p></li><li><p>自动装箱底层调用的是valueOf方法， 比如Integer.valueOf()</p></li><li><p>其它包装类的用法类似</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>wrapper<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** @author 韩顺平* @version 1.0*/</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Integer01</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//演示 int &lt;--> Integer 的装箱和拆箱</span>        <span class="token comment" spellcheck="true">//jdk5 前是手动装箱和拆箱</span>        <span class="token comment" spellcheck="true">//手动装箱 int->Integer</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        Integer integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer integer1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//手动拆箱</span>        <span class="token comment" spellcheck="true">//Integer -> int</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//jdk5 后，就可以自动装箱和自动拆箱</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//自动装箱 int->Integer</span>        Integer integer2 <span class="token operator">=</span> n2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//底层使用的是 Integer.valueOf(n2)</span>        <span class="token comment" spellcheck="true">//自动拆箱 Integer->int</span>        <span class="token keyword">int</span> n3 <span class="token operator">=</span> integer2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//底层仍然使用的是 intValue()方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  <u>三元运算符是一个整体</u></p><pre class=" language-java"><code class="language-java">Object obj1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//三元运算符[是一个整体]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//什么? 1.0</span></code></pre><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>wrapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperExercise02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//False</span>        <span class="token comment" spellcheck="true">//所以，这里主要是看范围 -128 ~ 127 就是直接返回</span>        <span class="token comment" spellcheck="true">/*        老韩解读        //1. 如果 i 在 IntegerCache.low(-128)~IntegerCache.high(127),就直接从数组返回        //2. 如果不在 -128~127,就直接 new Integer(i)        public static Integer valueOf(int i) {        if (i >= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)        return IntegerCache.cache[i + (-IntegerCache.low)];        return new Integer(i);    }*/</span>        Integer m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//底层 Integer.valueOf(1); -> 阅读源码</span>        Integer n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层 Integer.valueOf(1);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//T</span>        <span class="token comment" spellcheck="true">//所以，这里主要是看范围 -128 ~ 127 就是直接返回</span>        <span class="token comment" spellcheck="true">//，否则，就 new Integer(xx);</span>        Integer x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层 Integer.valueOf(1);</span>        Integer y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层 Integer.valueOf(1);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//False</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>wrapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperExercise03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//示例一</span>        Integer i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>        <span class="token comment" spellcheck="true">//示例二</span>        Integer i3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>        <span class="token comment" spellcheck="true">//示例三</span>        Integer i5 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//底层 Integer.valueOf(127)</span>        Integer i6 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-128~127</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5 <span class="token operator">==</span> i6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//T</span>        <span class="token comment" spellcheck="true">//示例四</span>        Integer i7 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        Integer i8 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i7 <span class="token operator">==</span> i8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>        <span class="token comment" spellcheck="true">//示例五</span>        Integer i9 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Integer.valueOf(127)</span>        Integer i10 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i9 <span class="token operator">==</span> i10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>        <span class="token comment" spellcheck="true">//示例六</span>        Integer i11<span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i12<span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//只有有基本数据类型，判断的是</span>        <span class="token comment" spellcheck="true">//值是否相同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i11<span class="token operator">==</span>i12<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//T</span>        <span class="token comment" spellcheck="true">//示例七</span>        Integer i13<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i14<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i13<span class="token operator">==</span>i14<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p> String实现了Serializable,说明了String可串行化</p><p>String实现了Comparable接口，说明String对象可以比较</p><ol><li>String对象用于保存字符串，也就是一组字符序列</li><li>宇符串常量对象是用双引号括起的字符序列。例如: “你好”、”12.97”、 “boy”等</li><li>字符串的字符使用Unicode字符编码，一个字符(不区分字母还是汉字)占两个字节。</li><li>String类较常用构造器(其它看手册):<br>String s1 = new String0; /<br>String s2 = new String(String original);<br>String s3 = new String(charD a);<br>String s4 = new String(charl a,int startIndex,int count)<br>说明:</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>string_<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1.String 对象用于保存字符串，也就是一组字符序列</span><span class="token comment" spellcheck="true">//2. "jack" 字符串常量, 双引号括起的字符序列</span><span class="token comment" spellcheck="true">//3. 字符串的字符使用 Unicode 字符编码，一个字符(不区分字母还是汉字)占两个字节</span><span class="token comment" spellcheck="true">//4. String 类有很多构造器，构造器的重载</span><span class="token comment" spellcheck="true">// 常用的有 String s1 = new String(); //</span><span class="token comment" spellcheck="true">//String s2 = new String(String original);</span><span class="token comment" spellcheck="true">//String s3 = new String(char[] a);</span><span class="token comment" spellcheck="true">//String s4 = new String(char[] a,int startIndex,int count)</span><span class="token comment" spellcheck="true">//String s5 = new String(byte[] b)</span><span class="token comment" spellcheck="true">//5. String 类实现了接口 Serializable【String 可以串行化:可以在网络传输】</span><span class="token comment" spellcheck="true">// 接口 Comparable [String 对象可以比较大小]</span><span class="token comment" spellcheck="true">//6. String 是 final 类，不能被其他的类继承</span><span class="token comment" spellcheck="true">//7. String 有属性 private final char value[]; 用于存放字符串内容</span><span class="token comment" spellcheck="true">//8. 一定要注意：value 是一个 final 类型， 不可以修改(需要功力)：即 value 不能指向</span><span class="token comment" spellcheck="true">// 新的地址，但是单个字符内容是可以变化</span>    String name <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'H'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value = v2; 不可以修改 value 地址</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="String-两种创建方式"><a href="#String-两种创建方式" class="headerlink" title="String 两种创建方式"></a>String 两种创建方式</h3><ol><li>方式一:直接赋值String S = “hspedu”;</li><li>方式二:调用构造器String s = new String(“hspedu”);</li></ol><h3 id="两种方式的区别"><a href="#两种方式的区别" class="headerlink" title="两种方式的区别"></a>两种方式的区别</h3><p>方式一:直接赋值Strings = “hsp”;<br>方式二:调用构造器String s2 = new String(“hsp”);</p><ol><li><p>方式一:先从常量池查看是否有”hsp”数据空间，如果有，直接指向;如果没有则重新创建，然后指向。s最终指向的是常量池的空间地址</p></li><li><p>方式二:先在堆中创建空间，里面维护了value属性， 指向常量池的hsp空间。如果常量池没有”hsp”,重新创建，如果有，直接通过value指向。最终指向的是堆中的空间地址。</p></li><li><p>画出两种方式的内存分布图</p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220803113447459.png" alt="image-20220803113447459"></p></li></ol><h2 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h2><ol><li><p>String是-个final类， 代表不可变的字符序列</p></li><li><p>字符串是不可变的。一个字符串对象旦被分配， 其内容是不可变的</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>以下语句创建了几个对象<span class="token operator">?</span>画出内存布局图。String s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>s1 <span class="token operator">=</span><span class="token string">"haha"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1min</span><span class="token comment" spellcheck="true">//创建了2个对象.</span><span class="token number">2</span><span class="token punctuation">.</span>题<span class="token number">2</span> StringExercise08<span class="token punctuation">.</span>java <span class="token number">1</span> min思考String a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建a对象</span>String b <span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建b对象</span>String c<span class="token operator">=</span> a<span class="token operator">+</span> b<span class="token punctuation">;</span>创建了几个对象<span class="token operator">?</span>画出内存图<span class="token operator">?</span><span class="token comment" spellcheck="true">//关键就是要分析Stringc= a + b;到底是如何执行的</span><span class="token comment" spellcheck="true">//-共有3对象，如图。</span>老韩小结<span class="token operator">:</span>底层是StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">;</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> sb是在堆中，并且append是在原来字符串的基础<span class="token punctuation">.</span>上追加的<span class="token punctuation">.</span>重要规则，Stringc1 <span class="token operator">=</span> <span class="token string">"ab"</span> <span class="token operator">+</span> <span class="token string">"cd"</span><span class="token punctuation">;</span>常量相加，看的是池。 Stringc1 <span class="token operator">=</span> a<span class="token operator">+</span> b<span class="token punctuation">;</span>变量相加<span class="token punctuation">,</span>是在堆中学习思路<span class="token operator">:</span>一定尽量看源码学习。</code></pre><h2 id="String-类的常见方法"><a href="#String-类的常见方法" class="headerlink" title="String 类的常见方法"></a>String 类的常见方法</h2><p>String类是保存字符串常量的。每次更新都需要重新开辟空间，效率较低，因此java设计者还提供了StringBuilder和StringBuffer来增强String的功能，并提高效率。[后面我们还会详细介绍StringBuilder和StringBuffer]</p><ol><li><p>equals //区分大小写，判断内容是否相等</p></li><li><p>equalslgnoreCase //忽略大小写的判断内容是否相等</p></li><li><p>length /获取字符的个数，字符串的长度</p></li><li><p>indexOf //获取字符在字符串中第1次出现的索引,索引从开始，如果找不到，返回-1</p></li><li><p>lastlndexOf //获取字符在字符串中最后1次出现的索引,索引从开始，如找不到，返回-1</p></li><li><p>substring //截取指定范围的子串</p></li><li><p>trim //去前后空格</p></li><li><p>charAt:获取某索引处的字符，注意不能使用Str[index]这种方式</p></li><li><p>toUpperCase</p></li><li><p>toLowerCase</p></li><li><p>concat</p></li><li><p>replace替换字符串中的字符</p></li><li><p>split分割字符串，对于某些分割字符，我们需要转义比如| \等</p></li><li><p>案例: String poem = “锄禾日当午,汗滴禾下土，谁知盘中餐,粒粒皆辛苦”:和文件路径.</p></li><li><p>compareTo //比较两个字符串的大小</p><blockquote><p>(1) 如果长度相同，并且每个字符也相同，就返回 0 // </p><p>(2) 如果长度相同或者不相同，但是在进行比较时，可以区分大小 // 就返回 if (c1 != c2) { // return c1 - c2; // } </p><p>(3) 如果前面的部分都相同，就返回 str1.len - str2.le</p></blockquote></li><li><p>toCharArray //转换成字符数组</p></li><li><p>format //格式字符串，%s宇符串%c宇符%d整型%.2f浮点型</p></li></ol><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>   java.lang.StringBuffer代表可变的字符序列， 可以对字符串内容进行增删。<br>  很多方法与String相同，但StringBuffer是可变长度的。<br>  StringBuffer是一个容器。</p><h3 id="String-VS-StringBuffer"><a href="#String-VS-StringBuffer" class="headerlink" title="String VS StringBuffer"></a>String VS StringBuffer</h3><ol><li>String保存的是字符串常量，里面的值不能更改，每次String类的更新实际上就是更改地址，效率较低//private final char value[];</li><li>StringBuffer保存的是字符串变量，里面的值可以更改，每次StringBuffer的更新实际上可以更新内容，不用每次更新地址，效率较高<br>//char[] value;/这个放在堆.</li></ol><h3 id="String-和-StringBuffer-相互转换"><a href="#String-和-StringBuffer-相互转换" class="headerlink" title="String 和 StringBuffer 相互转换"></a>String 和 StringBuffer 相互转换</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hspedu<span class="token punctuation">.</span>stringbuffer_<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringAndStringBuffer</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//看 String——>StringBuffer</span>        String str <span class="token operator">=</span> <span class="token string">"hello tom"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式 1 使用构造器</span>        <span class="token comment" spellcheck="true">//注意： 返回的才是 StringBuffer 对象，对 str 本身没有影响</span>        StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式 2 使用的是 append 方法</span>        StringBuffer stringBuffer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer1 <span class="token operator">=</span> stringBuffer1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//看看 StringBuffer ->String</span>        StringBuffer stringBuffer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"韩顺平教育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式 1 使用 StringBuffer 提供的 toString 方法</span>        String s <span class="token operator">=</span> stringBuffer3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式 2: 使用构造器来搞定</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>stringBuffer3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="StringBuffer类常见方法"><a href="#StringBuffer类常见方法" class="headerlink" title="StringBuffer类常见方法"></a>StringBuffer类常见方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuffer s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "hello,"</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"hello,张三丰"</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">10.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"hello,张三丰赵敏 100true10.5" System.out.println(s);//"hello,张三丰赵敏 100true10.5"</span>        <span class="token comment" spellcheck="true">//删</span>        <span class="token comment" spellcheck="true">/*        * 删除索引为>=start &amp;&amp; &lt;end 处的字符        * 解读: 删除 11~14 的字符 [11, 14)        */</span>        s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"hello,张三丰赵敏 true10.5"</span>        <span class="token comment" spellcheck="true">//改</span>        <span class="token comment" spellcheck="true">//老韩解读，使用 周芷若 替换 索引 9-11 的字符 [9,11)</span>        s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"周芷若"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"hello,张三丰周芷若 true10.5"</span>        <span class="token comment" spellcheck="true">//查找指定的子串在字符串第一次出现的索引，如果找不到返回-1</span>        <span class="token keyword">int</span> indexOf <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indexOf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span>        <span class="token comment" spellcheck="true">//插</span>        <span class="token comment" spellcheck="true">//老韩解读，在索引为 9 的位置插入 "赵敏",原来索引为 9 的内容自动后移</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"hello,张三丰赵敏周芷若 true10.5"</span>        <span class="token comment" spellcheck="true">//长度</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//22</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><ol><li>一个可变的字符序列。此类提供一 个与StringBuffer兼容的API, 但不保证同步(StringBuilder不是线程安全)。该类被设计用作StringBuffer的一个简易替换，用在字符串缓冲区被单个线程使用的时候。如果可能，建议优先采用该类,因为在大多数实现中，它比StringBuffer要快[后面测]。</li><li>在StringBuilder上的主要操作是append和insert方法，可重载这些方法，以接受任意类型的数据。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. StringBuffer 的直接父类 是 AbstractStringBuilder</span><span class="token comment" spellcheck="true">//2. StringBuffer 实现了 Serializable, 即 StringBuffer 的对象可以串行化</span><span class="token comment" spellcheck="true">//3. 在父类中 AbstractStringBuilder 有属性 char[] value,不是 final</span><span class="token comment" spellcheck="true">// 该 value 数组存放 字符串内容，引出存放在堆中的</span><span class="token comment" spellcheck="true">//4. StringBuffer 是一个 final 类，不能被继承</span><span class="token comment" spellcheck="true">//5. 因为 StringBuffer 字符内容是存在 char[] value, 所有在变化(增加/删除)</span><span class="token comment" spellcheck="true">// 不用每次都更换地址(即不是每次创建新对象)， 所以效率高于 String</span>StringBuffer stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. StringBuilder 继承 AbstractStringBuilder 类</span><span class="token comment" spellcheck="true">//2. 实现了 Serializable ,说明 StringBuilder 对象是可以串行化(对象可以网络传输,可以保存到文件)</span><span class="token comment" spellcheck="true">//3. StringBuilder 是 final 类, 不能被继承</span><span class="token comment" spellcheck="true">//4. StringBuilder 对象字符序列仍然是存放在其父类 AbstractStringBuilder 的 char[] value;</span><span class="token comment" spellcheck="true">// 因此，字符序列是堆中</span><span class="token comment" spellcheck="true">//5. StringBuilder 的方法，没有做互斥的处理,即没有 synchronized 关键字,因此在单线程的情况下使用</span><span class="token comment" spellcheck="true">// StringBuilder</span>StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="String、StringBuffer-和-StringBuilder-的比较"><a href="#String、StringBuffer-和-StringBuilder-的比较" class="headerlink" title="String、StringBuffer 和 StringBuilder 的比较"></a>String、StringBuffer 和 StringBuilder 的比较</h2><ol><li>StringBuilder和StringBuffer非常类似，均代表可变的字符序列，而且方法也一样</li><li>String:不可变字符序列，效率低,但是复用率高。</li><li>StringBuffer: 可变字符序列、效率较高(增删)、线程安全，看源码</li><li>StringBuilder: 可变字符序列、效率最高、线程不安全</li><li>String使用注意说明:<br>string s= “a”; //创建了一个字符串<br>s += “b”; //实际上原来的”a”字符串对象已经丢弃了，现在又产生了一个字符串s+ “b” (也就是” ab”).如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能=&gt;结论:如果我们对String做大量修改，不要使用String</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>使用的原则，结论:</p><ol><li>如果字符串存在大量的修改操作，一般使用StringBuffer 或StringBuilder</li><li>如果字符串存在大量的修改操作，并在单线程的情况，使用StringBuilder</li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用StringBuffer</li><li>如果我们字符串很少修改，被多个对象引用，使用String,比如配置信息等</li><li>StringBuilder的方法使用和StringBuffer -一样， 不再说.</li></ol><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//看看 Math 常用的方法(静态方法)</span>        <span class="token comment" spellcheck="true">//1.abs 绝对值</span>        <span class="token keyword">int</span> abs <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>abs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//9</span>        <span class="token comment" spellcheck="true">//2.pow 求幂</span>        <span class="token keyword">double</span> pow <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 的 4 次方</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//16</span>        <span class="token comment" spellcheck="true">//3.ceil 向上取整,返回>=该参数的最小整数(转成 double);</span>        <span class="token keyword">double</span> ceil <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ceil<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.0</span>        <span class="token comment" spellcheck="true">//4.floor 向下取整，返回&lt;=该参数的最大整数(转成 double)</span>        <span class="token keyword">double</span> floor <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4.001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.0</span>        <span class="token comment" spellcheck="true">//5.round 四舍五入 Math.floor(该参数+0.5)</span>        <span class="token keyword">long</span> round <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">5.51</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>round<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span>        <span class="token comment" spellcheck="true">//6.sqrt 求开方</span>        <span class="token keyword">double</span> sqrt <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.0</span>        <span class="token comment" spellcheck="true">//7.random 求随机数</span>        <span class="token comment" spellcheck="true">// random 返回的是 0 &lt;= x &lt; 1 之间的一个随机小数</span>        <span class="token comment" spellcheck="true">// 思考：请写出获取 a-b 之间的一个随机整数,a,b 均为整数 ，比如 a = 2, b=7</span>        <span class="token comment" spellcheck="true">// 即返回一个数 x 2 &lt;= x &lt;= 7</span>        <span class="token comment" spellcheck="true">// 老韩解读 Math.random() * (b-a) 返回的就是 0 &lt;= 数 &lt;= b-a</span>        <span class="token comment" spellcheck="true">// (1) (int)(a) &lt;= x &lt;= (int)(a + Math.random() * (b-a +1) )</span>        <span class="token comment" spellcheck="true">// (2) 使用具体的数给小伙伴介绍 a = 2 b = 7</span>        <span class="token comment" spellcheck="true">// (int)(a + Math.random() * (b-a +1) ) = (int)( 2 + Math.random()*6)</span>        <span class="token comment" spellcheck="true">// Math.random()*6 返回的是 0 &lt;= x &lt; 6 小数</span>        <span class="token comment" spellcheck="true">// 2 + Math.random()*6 返回的就是 2&lt;= x &lt; 8 小</span>            <span class="token comment" spellcheck="true">// (int)(2 + Math.random()*6) = 2 &lt;= x &lt;= 7</span>        <span class="token comment" spellcheck="true">// (3) 公式就是 (int)(a + Math.random() * (b-a +1) )</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//max , min 返回最大值和最小值</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"min="</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max="</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>Arrays里面包含了一系列静态方法，用于管理或操作数组(比如排序和搜索)。</p><ol><li><p>toString返回数组的字符串形式Arrays.toString(arr)</p></li><li><p>sort排序(自然排序和定制排序) Integer arr[] = {1,-1, 7, 0, 89};</p></li></ol><p>  ArraysSortCustom.java</p><p>  ArraysMethod02.java</p><ol start="3"><li><p>binarySearch通过二分搜索法进行查找，要求必须排好序<br>int index = Arrays.binarySearch(arr, 3);</p></li><li><p>copyOf数组元素的复制<br>Integer[] newArr = Arrays.copyOf(arr, arr.length);</p></li><li><p>fill数组元素的填充<br>Integer[] num = new Integer[{9,3,2};<br>Arrays,fill(num, 99);</p></li><li><p>equals比较两个数组元素内容是否完全一致<br>boolean equals = Arrays.equals(arr, arr2);</p></li><li><p>asList将一组值，转换成list<br>List<integer> asList = Arrays.asList(2,3,4,5,6,1);<br>System.out.println(“ asList=” + asList);</integer></p></li></ol><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><ol><li>exit退出当前程序</li><li>arraycopy :复制数组元素，比较适合底层调用，一般使用<br>Arrays.copyOf完成复制数组.<br>int[] src={1,2,3};<br>int[] dest = new int[3];<br>System.arraycopy(src, 0, dest, 0, 3); </li><li>currentTimeMillens:返回当前时间距离1970-1-1的毫秒数</li><li>gc运行垃圾回收机制System.gc0;</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">System_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//exit 退出当前程序</span>        <span class="token comment" spellcheck="true">// System.out.println("ok1");</span>        <span class="token comment" spellcheck="true">// //老韩解读</span>        <span class="token comment" spellcheck="true">// //1. exit(0) 表示程序退出</span>        <span class="token comment" spellcheck="true">// //2. 0 表示一个状态 , 正常的状态</span>        <span class="token comment" spellcheck="true">// System.exit(0);//</span>        <span class="token comment" spellcheck="true">// System.out.println("ok2");</span>        <span class="token comment" spellcheck="true">//arraycopy ：复制数组元素，比较适合底层调用，</span>        <span class="token comment" spellcheck="true">// 一般使用 Arrays.copyOf 完成复制数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dest 当前是 {0,0,0}</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 主要是搞清楚这五个参数的含义</span>        <span class="token comment" spellcheck="true">//2. // 源数组</span>        <span class="token comment" spellcheck="true">// * @param src the source array. // srcPos： 从源数组的哪个索引位置开始拷贝</span>        <span class="token comment" spellcheck="true">// * @param srcPos starting position in the source array. // dest : 目标数组，即把源数组的数据拷贝到哪个数组</span>        <span class="token comment" spellcheck="true">// * @param dest the destination array. // destPos: 把源数组的数据拷贝到 目标数组的哪个索引</span>        <span class="token comment" spellcheck="true">// * @param destPos starting position in the destination data. // length: 从源数组拷贝多少个数据到目标数组</span>        <span class="token comment" spellcheck="true">// * @param length the number of array elements to be copied. System.arraycopy(src, 0, dest, 0, src.length);</span>        <span class="token comment" spellcheck="true">// int[] src={1,2,3};</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dest="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3]</span>        <span class="token comment" spellcheck="true">//currentTimeMillens:返回当前时间距离 1970-1-1 的毫秒数</span>        <span class="token comment" spellcheck="true">// 老韩解读:</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="BigInteger-和-BigDecimal-类"><a href="#BigInteger-和-BigDecimal-类" class="headerlink" title="BigInteger 和 BigDecimal 类"></a>BigInteger 和 BigDecimal 类</h2><ol><li>BigInteger适合保存比较大的整型</li><li>BigDecimal适合保存精度更高的浮点型(小数)</li></ol><h3 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h3><ol><li><p>add加</p></li><li><p>subtract减</p></li><li><p>multiply乘</p></li><li><p>divide除</p><p><u>在调用 divide 方法时，指定精度即可. BigDecimal.ROUND_CEILING //如果有无限循环小数，就会保留分子的精度</u></p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigInteger_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当我们编程中，需要处理很大的整数，long 不够用</span>        <span class="token comment" spellcheck="true">//可以使用 BigInteger 的类来搞定</span>        <span class="token comment" spellcheck="true">// long l = 23788888899999999999999999999l;</span>        <span class="token comment" spellcheck="true">// System.out.println("l=" + l);</span>        BigInteger bigInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"23788888899999999999999999999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger bigInteger2 <span class="token operator">=</span> <span class="token keyword">new</span>        韩顺平循序渐进学 Java 零基础        第 <span class="token number">588</span>页        <span class="token function">BigInteger</span><span class="token punctuation">(</span><span class="token string">"10099999999999999999999999999999999999999999999999999999999999999999999999999999999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 在对 BigInteger 进行加减乘除的时候，需要使用对应的方法，不能直接进行 + - * /</span>        <span class="token comment" spellcheck="true">//2. 可以创建一个 要操作的 BigInteger 然后进行相应操作</span>        BigInteger add <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigInteger2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        BigInteger subtract <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>bigInteger2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>subtract<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//减</span>        BigInteger multiply <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bigInteger2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//乘</span>        BigInteger divide <span class="token operator">=</span> bigInteger<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigInteger2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>divide<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//除</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimal_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当我们需要保存一个精度很高的数时，double 不够用</span>        <span class="token comment" spellcheck="true">//可以是 BigDecimal</span>        <span class="token comment" spellcheck="true">// double d = 1999.11111111111999999999999977788d;</span>        <span class="token comment" spellcheck="true">// System.out.println(d);</span>        BigDecimal bigDecimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1999.11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigDecimal bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 如果对 BigDecimal 进行运算，比如加减乘除，需要使用对应的方法</span>        <span class="token comment" spellcheck="true">//2. 创建一个需要操作的 BigDecimal 然后调用相应的方法即可</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println(bigDecimal.divide(bigDecimal2));//可能抛出异常 ArithmeticException</span>        <span class="token comment" spellcheck="true">//在调用 divide 方法时，指定精度即可. BigDecimal.ROUND_CEILING</span>        <span class="token comment" spellcheck="true">//如果有无限循环小数，就会保留 分子 的精度</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigDecimal<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_CEILING<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="第一代日期时间"><a href="#第一代日期时间" class="headerlink" title="第一代日期时间"></a>第一代日期时间</h3><ol><li>Date: 精确到毫秒，代表特定的瞬间</li><li>SimpleDateFormat:格式和解析日期的类，SimpleDateFormat格式化和解析日期的具体类。它允许进行格式化(日期-&gt;文本)、解析(文本-&gt;日期)和规范化.</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Date01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 获取当前系统时间</span>        <span class="token comment" spellcheck="true">//2. 这里的 Date 类是在 java.util 包</span>        <span class="token comment" spellcheck="true">//3. 默认输出的日期格式是国外的方式, 因此通常需要对格式进行转换</span>        Date d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取当前系统时间</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前日期="</span> <span class="token operator">+</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">9234567</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过指定毫秒数得到时间</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d2="</span> <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取某个时间对应的毫秒数</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 创建 SimpleDateFormat 对象，可以指定相应的格式</span>        <span class="token comment" spellcheck="true">//2. 这里的格式使用的字母是规定好，不能乱写</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy 年 MM 月 dd 日 hh:mm:ss E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// format:将日期转换成指定格式的字符串</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前日期="</span> <span class="token operator">+</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 可以把一个格式化的 String 转成对应的 Date</span>        <span class="token comment" spellcheck="true">//2. 得到 Date 仍然在输出时，还是按照国外的形式，如果希望指定格式输出，需要转换</span>        <span class="token comment" spellcheck="true">//3. 在把 String -> Date ， 使用的 sdf 格式需要和你给的 String 的格式一样，否则会抛出转换异常</span>        String s <span class="token operator">=</span> <span class="token string">"1996 年 01 月 01 日 10:20:30 星期一"</span><span class="token punctuation">;</span>        Date parse <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parse="</span> <span class="token operator">+</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第二代日期类"><a href="#第二代日期类" class="headerlink" title="第二代日期类"></a>第二代日期类</h2><ol><li>第二代日期类，主要就是Calendar类(日历)。<br>public abstract class Calendar extends Obiect implements Seralizable,<br>Cloneable, Comparable &lt; Calendar &gt;</li></ol><ol start="2"><li>Calendar类是一个抽象类，它为特定瞬间与一组诸如YEAR、MONTH.<br>DAY OF MONTH、HOUR 等日历字县之间的转换提供了-些方法，并为操<br>作日历字段(例如获得下星期的日期)提供了一些方法。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calendar_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. Calendar 是一个抽象类， 并且构造器是 private</span>        <span class="token comment" spellcheck="true">//2. 可以通过 getInstance() 来获取实例</span>        <span class="token comment" spellcheck="true">//3. 提供大量的方法和字段提供给程序员</span>        <span class="token comment" spellcheck="true">//4. Calendar 没有提供对应的格式化的类，因此需要程序员自己组合来输出(灵活)</span>        <span class="token comment" spellcheck="true">//5. 如果我们需要按照 24 小时进制来获取时间， Calendar.HOUR ==改成=> Calendar.HOUR_OF_DAY</span>        Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建日历类对象//比较简单，自由</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c="</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取日历对象的某个日历字段</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年："</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里为什么要 + 1, 因为 Calendar 返回月时候，是按照 0 开始编号</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日："</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小时："</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分钟："</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒："</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Calender 没有专门的格式化方法，所以需要程序员自己来组合显示</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span>        c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">" "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第三代日期类"><a href="#第三代日期类" class="headerlink" title="第三代日期类"></a>第三代日期类</h2><p>➢前面两代日期类的不足分析<br>JDK 1.0中包含了一-个java.util.Date类， 但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar也存在问题是:<br>1)可变性:像日期和时间这样的类应该是不可变的。<br>2)偏移性: Date中的年份是从1900开始的， 而月份都从0开始。<br>3)格式化:格式化只对Date有用，Calendar则不行。<br>4)此外，它们也不是线程安全的;不能处理闰秒等(每隔2天，多出1s) 。</p><ol><li>LocalDate(日期/年月日)、LocalTime(时间/时分秒)、LocalDate Time(日期时间/年月日时分秒) JDK8加入<br>LocalDate只包含日期，可以获取日期字段<br>LocalTime只包含时间，可以获取时间字段<br>LocalDate Time包含日期+时间，可以获取日期和时间字段</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalDate_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//第三代日期</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 使用 now() 返回表示当前日期时间的 对象</span>        LocalDateTime ldt <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//LocalDate.now();//LocalTime.now()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 使用 DateTimeFormatter 对象来进行格式化</span>        <span class="token comment" spellcheck="true">// 创建 DateTimeFormatter 对象</span>        DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String format <span class="token operator">=</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"格式化的日期="</span> <span class="token operator">+</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"时="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒="</span> <span class="token operator">+</span> ldt<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDate now <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以获取年月日</span>        LocalTime now2 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取到时分秒</span>        <span class="token comment" spellcheck="true">//提供 plus 和 minus 方法可以对当前时间进行加或者减</span>        <span class="token comment" spellcheck="true">//看看 890 天后，是什么时候 把 年月日-时分秒</span>        LocalDateTime localDateTime <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">890</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"890 天后="</span> <span class="token operator">+</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//看看在 3456 分钟前是什么时候，把 年月日-时分秒输出</span>        LocalDateTime localDateTime2 <span class="token operator">=</span> ldt<span class="token punctuation">.</span><span class="token function">minusMinutes</span><span class="token punctuation">(</span><span class="token number">3456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3456 分钟前 日期="</span> <span class="token operator">+</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="格式日期类DateTimeFormatter"><a href="#格式日期类DateTimeFormatter" class="headerlink" title="格式日期类DateTimeFormatter"></a>格式日期类DateTimeFormatter</h3><p>类似于SimpleDateFormat<br>DateTimeFormat dtf = Date TimeFormatter.ofPattern(格式);<br>String str = dtf.format(日期对象);</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>类似于Date<br>提供了一系列和Date类转换的方式<br>Instant– &gt; Date:<br>Date date = Date.from(instant);<br>Date– &gt; Instant:<br>Instant instant = date.tolnstant();</p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul><li>LocalDate Time类</li><li>MonthDay类:检查重复事件</li><li>是否是闰年</li><li>增加日期的某个部分</li><li>使用plus方法测试增加时间的某个部分</li><li>使用minus方法测试查看一年前和一年后的日期</li><li>其他的方法，老师就不说，使用的时候，自己查看API使用即可</li></ul><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h2><p>1)长度开始时必须指定，而且一旦指定，不能更改<br>2)保存的必须为同一类型的元素<br>3)使用数组进行增加/删除元素的示意代码-比较麻烦</p><h2 id="集合-1"><a href="#集合-1" class="headerlink" title="集合"></a>集合</h2><p>1)可以动态保存任意多个对象，使用比较方便!<br>2)提供了一系列方便的操作对象的方法: add、remove、 set、 get等<br>3)使用集合添加，删除新元素的示意代码-简洁了</p><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a><u>集合框架</u></h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220804225900547.png" alt="image-20220804225900547"></p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220804225921134.png" alt="image-20220804225921134"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Collection_</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 集合主要是两组(单列集合 , 双列集合)</span>        <span class="token comment" spellcheck="true">//2. Collection 接口有两个重要的子接口 List Set , 他们的实现子类都是单列集合</span>        <span class="token comment" spellcheck="true">//3. Map 接口的实现子类 是双列集合，存放的 K-V</span>        <span class="token comment" spellcheck="true">//4. 把老师梳理的两张图记住</span>        <span class="token comment" spellcheck="true">//Collection</span>        <span class="token comment" spellcheck="true">//Map</span>        ArrayList arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"NO1"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"NO2"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Collection-接口和常用方法"><a href="#Collection-接口和常用方法" class="headerlink" title="Collection 接口和常用方法"></a>Collection 接口和常用方法</h2><h3 id="Collection-接口实现类的特点"><a href="#Collection-接口实现类的特点" class="headerlink" title="Collection 接口实现类的特点"></a>Collection 接口实现类的特点</h3><ol><li>collection实现子类可以存放多个元素，每个元素可以是object</li><li>有些Collection的实现类， 可以存放重复的元素，有些不可以</li><li>有些Collection的实现类， 有些是有序的(List),有些不是有序(Set)</li><li>Collection接没有直接的实现子类，是通过它的子接口Set和List来实现的</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionMethod</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add:添加单个元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list.add(new Integer(10))</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// remove:删除指定元素</span>        <span class="token comment" spellcheck="true">//list.remove(0);//删除第一个元素</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定删除某个元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// contains:查找元素是否存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        <span class="token comment" spellcheck="true">// size:获取元素个数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// isEmpty:判断是否为空</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>        <span class="token comment" spellcheck="true">// clear:清空</span>        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addAll:添加多个元素</span>        ArrayList list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"红楼梦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"三国演义"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// containsAll:查找多个元素是否都存在</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        <span class="token comment" spellcheck="true">// removeAll：删除多个元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"聊斋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[聊斋]</span>        <span class="token comment" spellcheck="true">// 说明：以 ArrayList 实现类来演示. }</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Collection-接口遍历元素方式-使用-Iterator-迭代器"><a href="#Collection-接口遍历元素方式-使用-Iterator-迭代器" class="headerlink" title="Collection 接口遍历元素方式 使用 Iterator(迭代器)"></a>Collection 接口遍历元素方式 使用 Iterator(迭代器)</h3><ol><li><p>Iterator对象称为迭代器，主要用于遍历Collection集合中的元素。</p></li><li><p>所有实现了Collection接口的集合类都有一 个iterator(方法，用以返回一个实现了Iterator接口的对象，即可以返回一个迭代器。</p></li><li><p>Iterator的结构.[看一张图]</p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220804230623646.png" alt="image-20220804230623646"></p></li></ol><ol start="4"><li>Iterator仅用于遍历集合，Iterator 本身并不存放对象。</li></ol><blockquote><p>Iterator iterator = oll.iterator(; //得到个集合的迭代器<br>//hasNext):判断是否还有下一个元素<br>while(iterator.hasNext(){<br>//next0作用:1.下移2.将下移以后集合位置上的元素返回<br>System. out.println(iterator.nextO);</p></blockquote><p><strong><u>在调用iterator.next()方法之前必须要调用iterator.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出NoSuchElementException异常。</u></strong></p><h3 id="Collection-接口遍历对象方式for-循环增强"><a href="#Collection-接口遍历对象方式for-循环增强" class="headerlink" title="Collection 接口遍历对象方式for 循环增强"></a>Collection 接口遍历对象方式for 循环增强</h3><p>增强for循环，可以代替iterator迭代器，特点:增强for就是简化版的iterator ,本质样。只能用于遍历集合或数组。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>元素类型元素名<span class="token operator">:</span>集合名或数组名<span class="token punctuation">)</span> <span class="token punctuation">{</span>    访问元素<span class="token punctuation">}</span></code></pre><h2 id="List-接口和常用方法"><a href="#List-接口和常用方法" class="headerlink" title="List 接口和常用方法"></a>List 接口和常用方法</h2><p>List接口是Collection接口的子接口List java</p><ol><li><p>List集合类中元素有序(即添加顺序和取出顺序 致)、且可重复 [案例]</p></li><li><p>List集合中的每个元素都有其对应的顺序索引，即支持索引。[案例]</p></li><li><p>List容器中的元素都对应一 个整数型的序号记载其在容器中的位置， 可以根据序号存取容器中的元素。</p></li><li><p>JDK API中List接口的实现类有:</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">List_</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. List 集合类中元素有序(即添加顺序和取出顺序一致)、且可重复 [案例]</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. List 集合中的每个元素都有其对应的顺序索引，即支持索引</span>        <span class="token comment" spellcheck="true">// 索引是从 0 开始的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hsp</span>        <span class="token comment" spellcheck="true">//3. </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="List-接口的常用方法"><a href="#List-接口的常用方法" class="headerlink" title="List 接口的常用方法"></a>List 接口的常用方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListMethod</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"贾宝玉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// void add(int index, Object ele):在 index 位置插入 ele 元素</span>        <span class="token comment" spellcheck="true">//在 index = 1 的位置插入一个对象</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"韩顺平"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</span>        List list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object get(int index):获取指定 index 位置的元素</span>        <span class="token comment" spellcheck="true">//说过</span>        <span class="token comment" spellcheck="true">// int indexOf(Object obj):返回 obj 在集合中首次出现的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>        <span class="token comment" spellcheck="true">// int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"韩顺平"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"韩顺平"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object remove(int index):移除指定 index 位置的元素，并返回此元素</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换. list.set(1, "玛丽");</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// List subList(int fromIndex, int toIndex):返回从 fromIndex 到 toIndex 位置的子集合</span>        <span class="token comment" spellcheck="true">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span>        List returnlist <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnlist="</span> <span class="token operator">+</span> returnlist<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="List-的三种遍历方式-ArrayList-LinkedList-Vector"><a href="#List-的三种遍历方式-ArrayList-LinkedList-Vector" class="headerlink" title="List 的三种遍历方式 [ArrayList, LinkedList,Vector]"></a>List 的三种遍历方式 [ArrayList, LinkedList,Vector]</h3><blockquote><p>1)方式一:使用iterator<br>Iterator iter = col.iterator0:<br>while(iter.hasNext(){<br>Object。= iter.next(;<br>2)方式二:使用增强for<br>for(Object o:col){<br>3)方式三:使用普通for<br>forint i=0;i&lt; list.size);i+ +){<br>Object object = list.get();<br>System.out.println(object);<br>说明:使用LinkedList完成使用方式和ArrayList一样</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListFor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//List 接口的实现子类 Vector LinkedList</span>        <span class="token comment" spellcheck="true">//List list = new ArrayList();</span>        <span class="token comment" spellcheck="true">//List list = new Vector();</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"鱼香肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京烤鸭子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token comment" spellcheck="true">//1. 迭代器</span>        Iterator iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====增强 for====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 增强 for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o="</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====普通 for===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 使用普通 for</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象="</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="ArrayList-底层结构和源码分析"><a href="#ArrayList-底层结构和源码分析" class="headerlink" title="ArrayList 底层结构和源码分析"></a>ArrayList 底层结构和源码分析</h2><h3 id="ArrayList-注意事项"><a href="#ArrayList-注意事项" class="headerlink" title="ArrayList 注意事项"></a>ArrayList 注意事项</h3><ol><li>permits all elements, including null , ArrayList可以加入null,并且多个</li><li>ArrayList是由数组来实现数据存储的[后面老师解读源码]</li><li>ArrayList基本等同于Vector，除了ArrayList是线程不安全(执行效率高)看源码.在多线程情况下，不建议使用ArrayList</li></ol><h3 id="ArrayList-的底层操作机制源码分析-重点，难点"><a href="#ArrayList-的底层操作机制源码分析-重点，难点" class="headerlink" title="ArrayList 的底层操作机制源码分析(重点，难点.)"></a>ArrayList 的底层操作机制源码分析(重点，难点.)</h3><ol><li><p>ArrayList中维护了一个0bject类型的数组elementData. [debug看源码]transient Object[] elementData; //transient表示瞬间，短暂的，表示该属性不会被序列号</p></li><li><p>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0,第1次添加，则扩容elementData为10,如需要再次扩容，则扩容elementData为1.5倍。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩解读源码</span>        <span class="token comment" spellcheck="true">//注意，注意，注意，Idea 默认情况下，Debug 显示的数据是简化后的，如果希望看到完整的数据</span>        <span class="token comment" spellcheck="true">//需要做设置. //使用无参构造器创建 ArrayList 对象</span>        <span class="token comment" spellcheck="true">//ArrayList list = new ArrayList();</span>        ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用 for 给 list 集合添加 1-10 数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用 for 给 list 集合添加 11-15 数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>  <img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220805113950966.png" alt="image-20220805113950966"></p><p>  <img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220805114002310.png" alt="image-20220805114002310"></p><ol start="3"><li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1.5倍。</li></ol><h2 id="Vector-底层结构和源码剖析"><a href="#Vector-底层结构和源码剖析" class="headerlink" title="Vector 底层结构和源码剖析"></a>Vector 底层结构和源码剖析</h2><ol><li>Vector类的定义说明</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> RandomAccess<span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable</code></pre><ol start="2"><li><p>Vector底层也是一 个对象数组，protected Object[] elementData;</p></li><li><p>Vector是线程同步的，即线程安全，Vector类的操作方法带有synchronized</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> E <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">=</span> elementCount<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>在开发中，需要线程同步安全时，考虑使用Vector</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无参构造器</span>        <span class="token comment" spellcheck="true">//有参数的构造</span>        Vector vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vector="</span> <span class="token operator">+</span> vector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. new Vector() 底层</span>        <span class="token comment" spellcheck="true">/*        public Vector() {            this(10);        }        补充：如果是 Vector vector = new Vector(8);        走的方法:        public Vector(int initialCapacity) {            this(initialCapacity, 0);        }        2. vector.add(i)        2.1 //下面这个方法就添加数据到 vector 集合        public synchronized boolean add(E e) {            modCount++;            ensureCapacityHelper(elementCount + 1);            elementData[elementCount++] = e;            return true;        }        2.2 //确定是否需要扩容 条件 ： minCapacity - elementData.length>0        private void ensureCapacityHelper(int minCapacity) {            // overflow-conscious code            if (minCapacity - elementData.length > 0)                grow(minCapacity);            }            2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法            //newCapacity = oldCapacity + ((capacityIncrement > 0) ?            // capacityIncrement : oldCapacity);            //就是扩容两倍. private void grow(int minCapacity) {                // overflow-conscious code                int oldCapacity = elementData.length;                int newCapacity = oldCapacity + ((capacityIncrement > 0) ?                capacityIncrement : oldCapacity);                if (newCapacity - minCapacity &lt; 0)                    newCapacity = minCapacity;                if (newCapacity - MAX_ARRAY_SIZE > 0)                    newCapacity = hugeCapacity(minCapacity);                elementData = Arrays.copyOf(elementData, newCapacity);            }    */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Vector-和-ArrayList的比较"><a href="#Vector-和-ArrayList的比较" class="headerlink" title="Vector 和 ArrayList的比较"></a>Vector 和 ArrayList的比较</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220805141126843.png" alt="image-20220805141126843"></p><h2 id="LinkedList-底层结构"><a href="#LinkedList-底层结构" class="headerlink" title="LinkedList 底层结构"></a>LinkedList 底层结构</h2><ol><li>LinkedList底层实现了双向链表和双端队列特点</li><li>可以添加任意元素(元素可以重复)，包括null</li><li>线程不安全，没有实现同步</li></ol><h3 id="LinkedList-的底层操作机制"><a href="#LinkedList-的底层操作机制" class="headerlink" title="LinkedList 的底层操作机制"></a>LinkedList 的底层操作机制</h3><ol><li><p>LinkedList底层维护了一个双向链表.</p></li><li><p>LinkedList中维护了两个属性first和last分别指向首节点和尾节点</p></li><li><p>每个节点(Node对象) ，里面又维护了prev、 next、 item三个属性，其中通过prev指向前一个，通过next指向后个节点。最终实现双向链表</p></li><li><p>所以LinkedList的元素的添加和删除， 不是通过数组完成的，相对来说效率较高。</p></li><li><p>模拟一个简单的双向链表</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListCRUD</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"linkedList="</span> <span class="token operator">+</span> linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//演示一个删除结点的</span>        linkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里默认删除的是第一个结点</span>        <span class="token comment" spellcheck="true">//linkedList.remove(2);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"linkedList="</span> <span class="token operator">+</span> linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改某个结点对象</span>        linkedList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"linkedList="</span> <span class="token operator">+</span> linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//得到某个结点对象</span>        <span class="token comment" spellcheck="true">//get(1) 是得到双向链表的第二个对象</span>        Object o <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//999</span>        <span class="token comment" spellcheck="true">//因为 LinkedList 是 实现了 List 接口, 遍历方式</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===LinkeList 遍历迭代器===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> linkedList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"next="</span> <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===LinkeList 遍历增强 for===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o1 <span class="token operator">:</span> linkedList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1="</span> <span class="token operator">+</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===LinkeList 遍历普通 for===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//老韩源码阅读.</span>        <span class="token comment" spellcheck="true">/* 1. LinkedList linkedList = new LinkedList();        public LinkedList() {}        2. 这时 linkeList 的属性 first = null last = null        3. 执行 添加        public boolean add(E e) {            linkLast(e);            return true;        }        4.将新的结点，加入到双向链表的最后        void linkLast(E e) {            final Node&lt;E> l = last;            final Node&lt;E> newNode = new Node&lt;>(l, e, null);            last = newNode;            if (l == null)                first = newNode;            else                l.next = newNode;            size++;            modCount++;        }        */</span>        <span class="token comment" spellcheck="true">/*        老韩读源码 linkedList.remove(); // 这里默认删除的是第一个结点        1. 执行 removeFirst        public E remove() {            return removeFirst();        }        2. 执行        public E removeFirst() {            final Node&lt;E> f = first;            if (f == null)            throw new NoSuchElementException();            return unlinkFirst(f);        }        3. 执行 unlinkFirst, 将 f 指向的双向链表的第一个结点拿掉        private E unlinkFirst(Node&lt;E> f) {            // assert f == first &amp;&amp; f != null;            final E element = f.item;            final Node&lt;E> next = f.next;            f.item = null;            f.next = null; // help GC            first = next;            if (next == null)            last = null;            else            next.prev = null;            size--;            modCount++;            return element;        }        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="ArrayList-和-LinkedList-比较"><a href="#ArrayList-和-LinkedList-比较" class="headerlink" title="ArrayList 和 LinkedList 比较"></a>ArrayList 和 LinkedList 比较</h2><table><thead><tr><th></th><th>底层结构</th><th>增删效率</th><th>改查效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低 数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高，通过链表追加</td><td>较低</td></tr></tbody></table><p>  如何选择ArrayList和LinkedList:</p><ol><li>如果我们改查的操作多 ,选择ArrayList</li><li>如果我们增删的操作多，选择LinkedList</li><li>一般来说，在程序中，80%-90%都是查询，因此大部分情况下会选择ArrayList</li><li>在一个项目中，根据业务灵活选择，也可能这样，-个模块使用的是ArrayList,另外一个模块是LinkedList,也就是说，要根据业务来进行选择</li></ol><h2 id="Set接口和常用方法"><a href="#Set接口和常用方法" class="headerlink" title="Set接口和常用方法"></a>Set接口和常用方法</h2><ol><li>无序(添加和取出的顺序不一致)， 没有索引[后面演示]</li><li>不允许重复元素，所以最多包含一个null</li></ol><h3 id="Set-接口的常用方法"><a href="#Set-接口的常用方法" class="headerlink" title="Set 接口的常用方法"></a>Set 接口的常用方法</h3><p>和 List 接口一样, Set 接口也是 Collection 的子接口，因此，常用方法和 Collection 接口一样</p><h3 id="Set-接口的遍历方式"><a href="#Set-接口的遍历方式" class="headerlink" title="Set 接口的遍历方式"></a>Set 接口的遍历方式</h3><p>同Collection的遍历方式样，因为Set接口是Collection接口的子接口。</p><ol><li>可以使用迭代器</li><li>增强for</li><li>不能使用索引的方式来获取.</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法</span>        <span class="token comment" spellcheck="true">//2. set 接口的实现类的对象(Set 接口对象), 不能存放重复的元素, 可以添加一个 null</span>        <span class="token comment" spellcheck="true">//3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)</span>        <span class="token comment" spellcheck="true">//4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定. Set set = new HashSet();</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重复</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再次添加 null</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set="</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token comment" spellcheck="true">//方式 1： 使用迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====使用迭代器===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj="</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式 2: 增强 for</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====增强 for===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o="</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//set 接口对象，不能通过索引来获取</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Set-接口实现类-HashSet"><a href="#Set-接口实现类-HashSet" class="headerlink" title="Set 接口实现类-HashSet"></a>Set 接口实现类-HashSet</h2><ol><li><p>HashSet实现了 Set接口</p></li><li><p>HashSet实际上是HashMap，看下源码.</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> HashSetK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><ol start="4"><li><p>可以存放null值，但是只能有一个null</p></li><li><p>HashSet不保证元素是有序的,取决于hash后，再确定索引的结果. (即，不保证存放元素的顺序和取出顺序一致)</p></li></ol><ol start="5"><li>不能有重复元素/对象 在前面Set接口使用已经讲过</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSet01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//说明</span>        <span class="token comment" spellcheck="true">//1. 在执行 add 方法后，会返回一个 boolean 值</span>        <span class="token comment" spellcheck="true">//2. 如果添加成功，返回 true, 否则返回 false</span>        <span class="token comment" spellcheck="true">//3. 可以通过 remove 指定删除哪个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set="</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3 个</span>        <span class="token comment" spellcheck="true">//</span>        set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set="</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0</span>        <span class="token comment" spellcheck="true">//4 Hashset 不能添加相同的元素/数据?</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加成功</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入不了</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Ok</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set="</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在加深一下. 非常经典的面试题.</span>        <span class="token comment" spellcheck="true">//看源码，做分析， 先给小伙伴留一个坑，以后讲完源码，你就了然</span>        <span class="token comment" spellcheck="true">//去看他的源码，即 add 到底发生了什么?=> 底层机制. set.add(new String("hsp"));//ok</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入不了. System.out.println("set=" + set);</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//定义了 Dog 类</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dog{"</span> <span class="token operator">+</span>        <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HashSet-底层机制说明"><a href="#HashSet-底层机制说明" class="headerlink" title="HashSet 底层机制说明"></a>HashSet 底层机制说明</h3><ol><li>HashSet 底层是HashMap</li><li>添加一个元素时，先得到hash值会转成-&gt;索引值</li><li>找到存储数据表table，看这个索引位置是否已经存放的有元素</li><li>如果没有，直接加入</li><li>.如果有，调用equals比较，如果相同，就放弃添加，如果不相同，则添加到最后</li><li>在Java8中，如果一条链表的元素个数到达TREEIFY THRESHOLD(默认是8),井且table的大小 &gt;=MIN TREEIFY CAPACITY(默认64),就会进行树化(红黑树)</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//到此位置，第 1 次 add 分析完毕. hashSet.add("php");//到此位置，第 2 次 add 分析完毕</span>        hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"set="</span> <span class="token operator">+</span> hashSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        1. 执行 HashSet()        public HashSet() {            map = new HashMap&lt;>();        }        2. 执行 add()        public boolean add(E e) {//e = "java"            return map.put(e, PRESENT)==null;//(static) PRESENT = new Object();        }        3.执行 put() , 该方法会执行 hash(key) 得到 key 对应的 hash 值 算法 h = key.hashCode()) ^ (h >>> 16)        public V put(K key, V value) {//key = "java" value = PRESENT 共享            return putVal(hash(key), key, value, false, true);        }        4.执行 putVal        final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) {            Node&lt;K,V>[] tab; Node&lt;K,V> p; int n, i; //定义了辅助变量        //table 就是 HashMap 的一个数组，类型是 Node[]        //if 语句表示如果当前 table 是 null, 或者 大小=0        //就是第一次扩容，到 16 个空间. if ((tab = table) == null || (n = tab.length) == 0)        n = (tab = resize()).length;        //(1)根据 key，得到 hash 去计算该 key 应该存放到 table 表的哪个索引位置        //并把这个位置的对象，赋给 p        //(2)判断 p 是否为 null        //(2.1) 如果 p 为 null, 表示还没有存放元素, 就创建一个 Node (key="java",value=PRESENT)        //(2.2) 就放在该位置 tab[i] = newNode(hash, key, value, null)        if ((p = tab[i = (n - 1) &amp; hash]) == null)        tab[i] = newNode(hash, key, value, null);        else {        //一个开发技巧提示： 在需要局部变量(辅助变量)时候，在创建        Node&lt;K,V> e; K k; //        //如果当前索引位置对应的链表的第一个元素和准备添加的 key 的 hash 值一样        //并且满足 下面两个条件之一:        //(1) 准备加入的 key 和 p 指向的 Node 结点的 key 是同一个对象        //(2) p 指向的 Node 结点的 key 的 equals() 和准备加入的 key 比较后相同        //就不能加入        if (p.hash == hash &amp;&amp;        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))        e = p;        //再判断 p 是不是一颗红黑树, //如果是一颗红黑树，就调用 putTreeVal , 来进行添加        else if (p instanceof TreeNode)        e = ((TreeNode&lt;K,V>)p).putTreeVal(this, tab, hash, key, value);        else {//如果 table 对应索引位置，已经是一个链表, 就使用 for 循环比较        //(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后        // 注意在把元素添加到链表后，立即判断 该链表是否已经达到 8 个结点        // , 就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)        // 注意，在转成红黑树时，要进行判断, 判断条件        // if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY(64))        // resize();        // 如果上面条件成立，先 table 扩容. // 只有上面条件不成立时，才进行转成红黑树        //(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接 break        for (int binCount = 0; ; ++binCount) {        if ((e = p.next) == null) {        p.next = newNode(hash, key, value, null);        if (binCount >= TREEIFY_THRESHOLD(8) - 1) // -1 for 1st        treeifyBin(tab, hash);        break;        }        if (e.hash == hash &amp;&amp;((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))            break;        p = e;        }        }        if (e != null) { // existing mapping for key            V oldValue = e.value;            if (!onlyIfAbsent || oldValue == null)            e.value = value;            afterNodeAccess(e);            return oldValue;        }        }        ++modCount;        //size 就是我们每加入一个结点 Node(k,v,h,next), size++        if (++size > threshold)            resize();//扩容        afterNodeInsertion(evict);        return null;        }        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol><li>HashSet底层是HashMap,第次添加时，table 数组扩容到16,临界值(threshold)是16<em>加载因子(loadFactor)是0.75 = 12</em></li><li>如果table数组使用到了临界值12,就会扩容到16* 2 = 32,新的临界值就是32*0.75 = 24,依次类推</li><li>在Java8中，如果一条链表的元素个数到达TREEIFY THRESHOLD(默认是8),并且table的大小&gt;=MIN TREEIFY CAPACITY(默认64),就会进行树化(红黑树)，否则仍然采用数组扩容机制</li></ol><pre class=" language-JAVA"><code class="language-JAVA">public class HashSetIncrement {    public static void main(String[] args) {        /*        HashSet 底层是 HashMap, 第一次添加时，table 数组扩容到 16，        临界值(threshold)是 16*加载因子(loadFactor)是 0.75 = 12        如果 table 数组使用到了临界值 12,就会扩容到 16 * 2 = 32,        韩顺平循序渐进学 Java 零基础        第 653页        新的临界值就是 32*0.75 = 24, 依次类推        */        HashSet hashSet = new HashSet();        // for(int i = 1; i <= 100; i++) {        // hashSet.add(i);//1,2,3,4,5...100        // }        /*        在 Java8 中, 如果一条链表的元素个数到达 TREEIFY_THRESHOLD(默认是 8 )，        并且 table 的大小 >= MIN_TREEIFY_CAPACITY(默认 64),就会进行树化(红黑树), 否则仍然采用数组扩容机制        */        // for(int i = 1; i <= 12; i++) {        // hashSet.add(new A(i));//        // }        /*        当我们向 hashset 增加一个元素，-> Node -> 加入 table , 就算是增加了一个 size++        */        for(int i = 1; i <= 7; i++) {//在 table 的某一条链表上添加了 7 个 A 对象            hashSet.add(new A(i));//        }        for(int i = 1; i <= 7; i++) {//在 table 的另外一条链表上添加了 7 个 B 对象            hashSet.add(new B(i));//        }        }    }    class B {        private int n;        public B(int n) {            this.n = n;        }        @Override        public int hashCode() {            return 200;        }    }    class A {        private int n;        public A(int n) {            this.n = n;        }        @Override        public int hashCode() {            return 100;        }}</code></pre><h2 id="Set-接口实现类-LinkedHashSet"><a href="#Set-接口实现类-LinkedHashSet" class="headerlink" title="Set 接口实现类-LinkedHashSet"></a>Set 接口实现类-LinkedHashSet</h2><ol><li>LinkedHashSet是HashSet的子类</li><li>LinkedHashSet底层是一个LinkedHashMap,底层维护了一个数组+双向链表</li><li>LinkedHashSet根据元素的hashCode值来决定元素的存储位置，同时使用链表维护元素的次序(图)，这使得元素看起来是以插入顺序保存的。</li><li>LinkedHashSet不允许添重复元素</li></ol><h2 id="Map-接口和常用方法"><a href="#Map-接口和常用方法" class="headerlink" title="Map 接口和常用方法"></a>Map 接口和常用方法</h2><ol><li>Map与Collection并列存在。用于保存具有映射关系的数据:Key-Value</li><li>Map中的key和value 可以是任何引用类型的数据，会封装到HashMap$Node对象中</li><li>Map中的key不允许重复，原因和HashSet一样，前面分析过源码.</li><li>Map中的value可以重复</li><li>Map的key可以为nul, value也可以为null,注意key为null,只能有一个，value为null可以多个.</li><li>常用String类作为Map的key</li><li>key和value之间存在单向对一关系，即通过指定的key总能找到对应的value</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Map_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩解读 Map 接口实现类的特点, 使用实现类 HashMap</span>        <span class="token comment" spellcheck="true">//1. Map 与 Collection 并列存在。用于保存具有映射关系的数据:Key-Value(双列元素)</span>        <span class="token comment" spellcheck="true">//2. Map 中的 key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node 对象中</span>        <span class="token comment" spellcheck="true">//3. Map 中的 key 不允许重复，原因和 HashSet 一样，前面分析过源码. //4. Map 中的 value 可以重复</span>        <span class="token comment" spellcheck="true">//5. Map 的 key 可以为 null, value 也可以为 null ，注意 key 为 null,</span>        <span class="token comment" spellcheck="true">// 只能有一个，value 为 null ,可以多个</span>        <span class="token comment" spellcheck="true">//6. 常用 String 类作为 Map 的 key</span>        <span class="token comment" spellcheck="true">//7. key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no1"</span><span class="token punctuation">,</span> <span class="token string">"韩顺平"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no2"</span><span class="token punctuation">,</span> <span class="token string">"张无忌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no1"</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当有相同的 k , 就等价于替换. map.put("no3", "张三丰");//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价替换</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no4"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no5"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"赵敏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-v</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"金毛狮王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-v</span>        <span class="token comment" spellcheck="true">// 通过 get 方法，传入 key ,会返回对应的 value</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"no2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张无忌</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map="</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220806181427692.png" alt="image-20220806181427692"></p><h3 id="Map-接口遍历方法"><a href="#Map-接口遍历方法" class="headerlink" title="Map 接口遍历方法"></a>Map 接口遍历方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapFor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"邓超"</span><span class="token punctuation">,</span> <span class="token string">"孙俪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"王宝强"</span><span class="token punctuation">,</span> <span class="token string">"马蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"宋喆"</span><span class="token punctuation">,</span> <span class="token string">"马蓉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"刘令博"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"刘亦菲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"鹿晗"</span><span class="token punctuation">,</span> <span class="token string">"关晓彤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一组: 先取出 所有的 Key , 通过 Key 取出对应的 Value</span>        Set keyset <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(1) 增强 for</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----第一种方式-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object key <span class="token operator">:</span> keyset<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//(2) 迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----第二种方式--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> keyset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第二组: 把所有的 values 取出</span>        Collection values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里可以使用所有的 Collections 使用的遍历方法</span>        <span class="token comment" spellcheck="true">//(1) 增强 for</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---取出所有的 value 增强 for----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//(2) 迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---取出所有的 value 迭代器----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator2 <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object value <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第三组: 通过 EntrySet 来获取 k-v</span>        Set entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// EntrySet&lt;Map.Entry&lt;K,V>></span>        <span class="token comment" spellcheck="true">//(1) 增强 for</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----使用 EntrySet 的 for 增强(第 3 种)----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> entrySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将 entry 转成 Map.Entry</span>            Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> entry<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//(2) 迭代器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----使用 EntrySet 的 迭代器(第 4 种)----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator3 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator3<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object entry <span class="token operator">=</span> iterator3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//System.out.println(next.getClass());//HashMap$Node -实现-> Map.Entry (getKey,getValue)</span>            <span class="token comment" spellcheck="true">//向下转型 Map.Entry</span>            Map<span class="token punctuation">.</span>Entry m <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> entry<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Map-接口实现类-HashMap"><a href="#Map-接口实现类-HashMap" class="headerlink" title="Map 接口实现类-HashMap"></a>Map 接口实现类-HashMap</h2><ol><li>Map接的常用实现类: HashMap. Hashtable和Properties.</li><li>HashMap是Map接口使用频率最高的实现类。</li><li>HashMap是以key-val对的方式来存储数据(HashMap$Node类型) [案例Entry]</li><li>key不能重复，但是值可以重复，允许使用null键和null值。</li><li>如果添加相同的key ,则会覆盖原来的key-val等同于修改.(key不会替换，val会 替换)</li><li>与HashSet-样，不保证映射的顺序，因为底层是以hash表的方式来存储的. jdk8的hashMap 底层数组+链表+红黑树)</li><li>HashMap没有实现同步，因此是线程不安全的，方法没有做同步互斥的操作，没有synchronized</li></ol><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220807155016641.png" alt="image-20220807155016641"></p><h3 id="HashMap-底层机制及源码剖析"><a href="#HashMap-底层机制及源码剖析" class="headerlink" title="HashMap 底层机制及源码剖析"></a>HashMap 底层机制及源码剖析</h3><p>➢扩容机制[和HashSet相同]</p><ol><li>HashMap底层维护了Node类型的数组table,默认为null</li><li>当创建对象时，将加载因子(loadfactor)初始化为0.75.</li><li>当添加key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元索直接添加。如果该索引处有元素，继续判断该元素的key和准备加入的key相是否等，如果相等，则直接替换val; 如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容。</li><li>第1次添加，则需要扩容table容量为16,临界值(threshold)为12 (16*0.75)</li><li>以后再扩容，则需要扩容table容量为原来的2倍(32)，临界值为原来的2倍,即24,依次类推</li><li>在Java8中如果一条链表的元素个数超过 TREEIFY THRESHOLD(默认是8)，井且table的大小&gt;= MIN TREEIFY CAPACITY(默认64),就会进行树化(红黑树)。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapSource1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替换 value</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map="</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">/*老韩解读 HashMap 的源码+图解        1. 执行构造器 new HashMap()        初始化加载因子 loadfactor = 0.75        HashMap$Node[] table = null        2. 执行 put 调用 hash 方法，计算 key 的 hash 值 (h = key.hashCode()) ^ (h >>> 16)        public V put(K key, V value) {//K = "java" value = 10            return putVal(hash(key), key, value, false, true);        }        3. 执行 putVal        final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) {        Node&lt;K,V>[] tab; Node&lt;K,V> p; int n, i;//辅助变量        //如果底层的 table 数组为 null, 或者 length =0 , 就扩容到 16        if ((tab = table) == null || (n = tab.length) == 0)        n = (tab = resize()).length;        //取出 hash 值对应的 table 的索引位置的 Node, 如果为 null, 就直接把加入的 k-v        //, 创建成一个 Node ,加入该位置即可        if ((p = tab[i = (n - 1) &amp; hash]) == null)        tab[i] = newNode(hash, key, value, null);        else {        Node&lt;K,V> e; K k;//辅助变量        // 如果 table 的索引位置的 key 的 hash 相同和新的 key 的 hash 值相同，        // 并 满足(table 现有的结点的 key 和准备添加的 key 是同一个对象 || equals 返回真)        // 就认为不能加入新的 k-v        if (p.hash == hash &amp;&amp;        ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))        e = p;        else if (p instanceof TreeNode)//如果当前的 table 的已有的 Node 是红黑树，就按照红黑树的方式处        理        e = ((TreeNode&lt;K,V>)p).putTreeVal(this, tab, hash, key, value);        else {        //如果找到的结点，后面是链表，就循环比较        for (int binCount = 0; ; ++binCount) {//死循环        if ((e = p.next) == null) {//如果整个链表，没有和他相同,就加到该链表的最后        p.next = newNode(hash, key, value, null);        //加入后，判断当前链表的个数，是否已经到 8 个，到 8 个，后        //就调用 treeifyBin 方法进行红黑树的转换        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st        treeifyBin(tab, hash);        break;        }        if (e.hash == hash &amp;&amp; //如果在循环比较过程中，发现有相同,就 break,就只是替换 value        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))            break;        p = e;        }        }        if (e != null) { // existing mapping for key            V oldValue = e.value;            if (!onlyIfAbsent || oldValue == null)            e.value = value; //替换，key 对应 value            afterNodeAccess(e);            return oldValue;        }        }        ++modCount;//每增加一个 Node ,就 size++        if (++size > threshold[12-24-48])//如 size > 临界值，就扩容            resize();            afterNodeInsertion(evict);            return null;        }        5. 关于树化(转成红黑树)        //如果 table 为 null ,或者大小还没有到 64，暂时不树化，而是进行扩容. //否则才会真正的树化 -> 剪枝        final void treeifyBin(Node&lt;K,V>[] tab, int hash) {            int n, index; Node&lt;K,V> e;            if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)            resize();        }        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Map-接口实现类-Hashtable"><a href="#Map-接口实现类-Hashtable" class="headerlink" title="Map 接口实现类-Hashtable"></a>Map 接口实现类-Hashtable</h2><ol><li>存放的元素是键值对:即K-V</li><li>hashtable的键和值都不能为null, 否则会抛出NullPointerException</li><li>hashTable使用方法基本上和HashMap-样</li><li>hashTable是线程安全的(synchronized), hashMap是线程不安全的</li><li>简单看下底层结构</li></ol><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><ol><li>Properties类继承自Hashtable类并且实现了Map接口，也是使用一种键值对的形式来保存数据。</li><li>他的使用特点和Hashtable类似</li><li>Properties 还可以用于从xx.properties文件中，加载数据到Properties类对象，并进行读取和修改</li><li>说明:工作后xxx.properties文件通常作为配置文件，这个知识点在I0流举例，有兴|趣可先看文章</li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. Properties 继承 Hashtable</span>        <span class="token comment" spellcheck="true">//2. 可以通过 k-v 存放数据，当然 key 和 value 不能为 null</span>        <span class="token comment" spellcheck="true">//增加</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//properties.put(null, "abc");//抛出 空指针异常</span>        <span class="token comment" spellcheck="true">//properties.put("abc", null); //抛出 空指针异常</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k-v</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lucy"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lic"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lic"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果有相同的 key ， value 被替换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"properties="</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 k 获取对应值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//88</span>        <span class="token comment" spellcheck="true">//删除</span>        properties<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"lic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"properties="</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改</span>        properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">,</span> <span class="token string">"约翰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"properties="</span> <span class="token operator">+</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6总结-开发中如何选择集合实现类-记住"><a href="#6总结-开发中如何选择集合实现类-记住" class="headerlink" title="6总结-开发中如何选择集合实现类(记住)"></a>6总结-开发中如何选择集合实现类(记住)</h2><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行选择，分析如下:</p><ol><li>先判断存储的类型(一组对象[单列或组树值对双列)</li><li>一组对象[单列]: Collection接口<br><strong>允许重复: List</strong><br>增删多: LinkedList [底层维护了一个双向链表]<br>改盘多: ArrayList [底层维护Object类型的可变数组]<br><strong>不允许重复: Set</strong><br>无序: HashSet [底层是HashMap, 维护了一个哈希表即(数组+链表+红黑树)<br>排序: TreeSet [老韩举例说明]<br>插入和取出顺序一致: LinkedHashSet ， 维护数组双向链表</li><li>一组健值对[双列]: map<br>键无序: HashMap [底层是:哈希表jdk7: 数组+链表，jdk8: 数组+链表+红黑树]<br>键排序: TreeMap [老韩举例说明]<br>键插入和取出顺序一致: LinkedHashMap<br>读取文件Properties</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"all"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSet_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 当我们使用无参构造器，创建 TreeSet 时，仍然是无序的</span>        <span class="token comment" spellcheck="true">//2. 老师希望添加的元素，按照字符串大小来排序</span>        <span class="token comment" spellcheck="true">//3. 使用 TreeSet 提供的一个构造器，可以传入一个比较器(匿名内部类)</span>        <span class="token comment" spellcheck="true">// 并指定排序规则</span>        <span class="token comment" spellcheck="true">//4. 简单看看源码</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">/*        1. 构造器把传入的比较器对象，赋给了 TreeSet 的底层的 TreeMap 的属性 this.comparator        public TreeMap(Comparator&lt;? super K> comparator) {        this.comparator = comparator;        }        2. 在 调用 treeSet.add("tom"), 在底层会执行到        if (cpr != null) {//cpr 就是我们的匿名内部类(对象)        do {        parent = t;        //动态绑定到我们的匿名内部类(对象)compare        cmp = cpr.compare(key, t.key);        if (cmp &lt; 0)        t = t.left;        else if (cmp > 0)        t = t.right;        else //如果相等，即返回 0,这个 Key 就没有加入        return t.setValue(value);        } while (t != null);        }        */</span>        <span class="token comment" spellcheck="true">// TreeSet treeSet = new TreeSet();</span>        TreeSet treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//下面 调用 String 的 compareTo 方法进行字符串大小比较</span>                <span class="token comment" spellcheck="true">//如果老韩要求加入的元素，按照长度大小排序</span>                <span class="token comment" spellcheck="true">//return ((String) o2).compareTo((String) o1);</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加数据. treeSet.add("jack");</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"treeSet="</span> <span class="token operator">+</span> treeSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeMap_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用默认的构造器，创建 TreeMap, 是无序的(也没有排序)</span>        <span class="token comment" spellcheck="true">/*        老韩要求：按照传入的 k(String) 的大小进行排序        */</span>        <span class="token comment" spellcheck="true">// TreeMap treeMap = new TreeMap();</span>        TreeMap treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//按照传入的 k(String) 的大小进行排序</span>                <span class="token comment" spellcheck="true">//按照 K(String) 的长度大小排序</span>                <span class="token comment" spellcheck="true">//return ((String) o2).compareTo((String) o1);</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"杰克"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kristina"</span><span class="token punctuation">,</span> <span class="token string">"克瑞斯提诺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token string">"斯密斯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">,</span> <span class="token string">"韩顺平"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入不了</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"treemap="</span> <span class="token operator">+</span> treeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        老韩解读源码：        1. 构造器. 把传入的实现了 Comparator 接口的匿名内部类(对象)，传给给 TreeMap 的 comparator        public TreeMap(Comparator&lt;? super K> comparator) {        this.comparator = comparator;        }        2. 调用 put 方法        2.1 第一次添加, 把 k-v 封装到 Entry 对象，放入 root        Entry&lt;K,V> t = root;        if (t == null) {        compare(key, key); // type (and possibly null) check        root = new Entry&lt;>(key, value, null);        size = 1;        modCount++;        return null;        }        2.2 以后添加        Comparator&lt;? super K> cpr = comparator;        if (cpr != null) {        do { //遍历所有的 key , 给当前 key 找到适当位置        parent = t;        cmp = cpr.compare(key, t.key);//动态绑定到我们的匿名内部类的 compare        if (cmp &lt; 0)        t = t.left;        else if (cmp > 0)        t = t.right;        else //如果遍历过程中，发现准备添加 Key 和当前已有的 Key 相等，就不添加        return t.setValue(value);        } while (t != null);    }    */</span><span class="token punctuation">}</span></code></pre><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ol><li>Collections是个操作Set, List和Map等集合的工具类</li><li>Collections中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作</li></ol><h3 id="排序操作：（均为-static-方法）"><a href="#排序操作：（均为-static-方法）" class="headerlink" title="排序操作：（均为 static 方法）"></a>排序操作：（均为 static 方法）</h3><ol><li>reverse(List):反转List中元素的顺序</li><li>shuffle(List):对List集合元索进行随机排序</li><li>sort(List):根据元素的自然顺序对指定List集合元素按升序排序</li><li>sort(List, Comparator): 根据指定的Comparator产生的顺序对List集合元素进行排序</li><li>swap(List, int, int): 将指定list集合中的i处元素和j处元素进行交换</li><li>应用案例演示Collections java</li></ol><h3 id="查找、替换"><a href="#查找、替换" class="headerlink" title="查找、替换"></a>查找、替换</h3><ol><li>Object max(Collection):根据元素的自然顺序，返回给定集合中的最大元素</li><li>object max(Collection, Comparator); 根据Comparator指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency(Collection, Object): 返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src): 将src中的内容复制到dest中</li><li>boolean replaceAll(List list, Object oldVal, Object newVal): 使用新值替换List对象的所有旧值</li><li>应用案例演示</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Collections_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 ArrayList 集合，用于测试. List list = new ArrayList();</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"milan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// reverse(List)：反转 List 中元素的顺序</span>        Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// shuffle(List)：对 List 集合元素进行随机排序</span>        <span class="token comment" spellcheck="true">// for (int i = 0; i &lt; 5; i++) {</span>        <span class="token comment" spellcheck="true">// Collections.shuffle(list);</span>        <span class="token comment" spellcheck="true">// System.out.println("list=" + list);</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自然排序后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span>        <span class="token comment" spellcheck="true">//我们希望按照 字符串的长度大小排序</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//可以加入校验代码. return ((String) o2).length() - ((String) o1).length();</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符串长度大小排序="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span>        <span class="token comment" spellcheck="true">//比如</span>        Collections<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换后的情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自然顺序最大元素="</span> <span class="token operator">+</span> Collections<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span>        <span class="token comment" spellcheck="true">//比如，我们要返回长度最大的元素</span>        Object maxObject <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object o1<span class="token punctuation">,</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度最大的元素="</span> <span class="token operator">+</span> maxObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Object min(Collection)</span>        <span class="token comment" spellcheck="true">//Object min(Collection，Comparator)</span>        <span class="token comment" spellcheck="true">//上面的两个方法，参考 max 即可</span>        <span class="token comment" spellcheck="true">//int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tom 出现的次数="</span> <span class="token operator">+</span> Collections<span class="token punctuation">.</span><span class="token function">frequency</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//void copy(List dest,List src)：将 src 中的内容复制到 dest 中</span>        ArrayList dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//为了完成一个完整拷贝，我们需要先给 dest 赋值，大小和 list.size()一样</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拷贝</span>        Collections<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dest="</span> <span class="token operator">+</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span>        <span class="token comment" spellcheck="true">//如果 list 中，有 tom 就替换成 汤姆</span>        Collections<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list 替换后="</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="本章作业"><a href="#本章作业" class="headerlink" title="本章作业"></a>本章作业</h2><p><strong>试分析HashSet和TreeSet分别如何实现去重的</strong><br>(1) HashSet的去重机制: hashCode() + equals() ,底层先通过存入对象，进行运算得到一个hash值，通过hash值得到对应的索引，如果发现table索引所在的位置，没有数据，就直接存放如果有数据，就进行equals比较[遍历比较]， 如果比较后，不相同，就加入，否则就不加入.<br>(2) TreeSet的去重机制:如果你传入了一个Comparator匿名对象， 就使用实现的compare去重，如果方法返回0,就认为是相同的元素/数据，就不添加，如果你没有传入个Comparator匿名对象，则以你添加的对象实现的Compareable接口的compareTo去重</p><p><strong>试写出Vector和ArrayList的比较?</strong> </p><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全(同步)效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全，效率高</td><td>如果使用有参构造器按照1.5倍扩容，如果是无参构造器  1.第次扩客10   2.从第二次开始按照1.5</td></tr><tr><td>Vector</td><td>可安数组objectl[]</td><td>jdk1.0</td><td>安全，效率不高</td><td>如果是无参，默认10.满后，按照2倍扩容     如果是指定大小创建Vector,则每次按照2倍扩容</td></tr></tbody></table><h1 id="章泛型"><a href="#章泛型" class="headerlink" title="章泛型"></a>章泛型</h1><h2 id="使用传统方法的问题分析"><a href="#使用传统方法的问题分析" class="headerlink" title="使用传统方法的问题分析"></a>使用传统方法的问题分析</h2><p>1)不能对加入到集合ArrayList中的数据类型进行约束(不安全)<br>2)遍历的时候，需要进行类型转换，如果集合中的数据量较大，对效率有影响</p><h3 id="泛型快速体验-用泛型来解决前面的问题"><a href="#泛型快速体验-用泛型来解决前面的问题" class="headerlink" title="泛型快速体验-用泛型来解决前面的问题"></a>泛型快速体验-用泛型来解决前面的问题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用传统的方法来解决===> 使用泛型</span>        <span class="token comment" spellcheck="true">//老韩解读</span>        <span class="token comment" spellcheck="true">//1. 当我们 ArrayList&lt;Dog> 表示存放到 ArrayList 集合中的元素是 Dog 类型 (细节后面说...)</span>        <span class="token comment" spellcheck="true">//2. 如果编译器发现添加的类型，不满足要求，就会报错</span>        <span class="token comment" spellcheck="true">//3. 在遍历的时候，可以直接取出 Dog 类型而不是 Object</span>        <span class="token comment" spellcheck="true">//4. public class ArrayList&lt;E> {} E 称为泛型,那么 Dog->E</span>        ArrayList<span class="token operator">&lt;</span>Dog<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Dog<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"发财"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小黄"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//假如我们的程序员，不小心，添加了一只猫</span>        <span class="token comment" spellcheck="true">//arrayList.add(new Cat("招财猫", 8));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===使用泛型===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Dog dog <span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*        1.请编写程序，在 ArrayList 中，添加 3 个 Dog 对象        2.Dog 对象含有 name 和 age, 并输出 name 和 age (要求使用 getXxx())        3.老师使用泛型来完成代码        */</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//Cat 类</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cat</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型的理解和好处"><a href="#泛型的理解和好处" class="headerlink" title="泛型的理解和好处"></a>泛型的理解和好处</h2><h3 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h3><ol><li>编译时，检查添加元素的类型，提高了安全性</li><li>减少了类型转换的次数，提高效率[说明]<br><strong>不使用泛型</strong><br>Dog -加入-&gt; Object 取出-&gt; Dog //放入到ArrayList会先转成Object，在取出时，还需要转换成Dog<br><strong>使用泛型</strong><br>Dog -&gt; Dog-&gt; Dog /放入时，和取出时，不需要类型转换，提高效率</li><li>不再提示编译警告</li></ol><h3 id="泛型介绍"><a href="#泛型介绍" class="headerlink" title="泛型介绍"></a>泛型介绍</h3><p>老韩理解:泛(广泛)型(类型) =&gt; Integer, String,Dog</p><ol><li>泛型又称参数化类型， 是Jdk5.0出现的新特性，解决数据类型的安全性问题</li><li>在类声明或实例化时只要指定好需要的具体的类型即可。</li><li>Java泛型可以保证如果程序在编译时没有发出警告， 运行时就不会产生ClassCastException异常 同时，代码更加简洁、健壮</li><li>泛型的作用是:可以在类声明时通过一个标识表示类中某个属性的类型，或者是某个方法的返回值的类型，或者是参数类型。[有点难，举例Generic03.java]</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注意，特别强调： E 具体的数据类型在定义 Person 对象的时候指定,即在编译期间，就确定 E 是什么类型</span>    Person<span class="token operator">&lt;</span>String<span class="token operator">></span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"韩顺平教育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//String</span>    <span class="token comment" spellcheck="true">/*    你可以这样理解，上面的 Person 类    class Person {        String s ;//E 表示 s 的数据类型, 该数据类型在定义 Person 对象的时候指定,即在编译期间，就确定 E        是什么类型        public Person(String s) {//E 也可以是参数类型            this.s = s;        }        public String f() {//返回类型使用 E            return s;        }    }    */</span>    Person<span class="token operator">&lt;</span>Integer<span class="token operator">></span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Integer</span>    <span class="token comment" spellcheck="true">/*    class Person {        Integer s ;//E 表示 s 的数据类型, 该数据类型在定义 Person 对象的时候指定,即在编译期间，就确定 E        是什么类型        public Person(Integer s) {//E 也可以是参数类型            this.s = s;        }        public Integer f() {//返回类型使用 E            return s;        }    }    */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型，</span><span class="token comment" spellcheck="true">// 或者是某个方法的返回值的类型，或者是参数类型</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E s <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//E 表示 s 的数据类型, 该数据类型在定义 Person 对象的时候指定,即在编译期间，就确定 E 是什么类型</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>E s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//E 也可以是参数类型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> E <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回类型使用 E</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示 s 的运行类型</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型的语法"><a href="#泛型的语法" class="headerlink" title="泛型的语法"></a>泛型的语法</h2><h3 id="泛型的声明"><a href="#泛型的声明" class="headerlink" title="泛型的声明"></a>泛型的声明</h3><p>interface接口<t> {}和class类&lt;K,V&gt; 0}<br>//比如: List , ArrayList<br>说明:<br>1)其中，T,K,V不代表值，而是表示类型。<br>2)任意字母都可以。常用T表示，是Type的缩写</t></p><h3 id="泛型的实例化"><a href="#泛型的实例化" class="headerlink" title="泛型的实例化"></a>泛型的实例化</h3><p>要在类名后面指定类型参数的值(类型)。如:</p><ol><li>List <string> strList = new ArrayList &lt; String&gt;():</string></li><li>Iterator<customer> iterator = customers.iterator():</customer></li></ol><h3 id="泛型使用举例"><a href="#泛型使用举例" class="headerlink" title="泛型使用举例"></a>泛型使用举例</h3><blockquote><ol><li>创建3个学生对象</li><li>放入到HashSet中学生对象，使用</li><li>放入到HashMap中，要求Key是String name, Value就是学生对象</li><li>使用两种方式遍历</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericExercise</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用泛型方式给 HashSet 放入 3 个学生对象</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"mary"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//使用泛型方式给 HashMap 放入 3 个学生对象</span>        <span class="token comment" spellcheck="true">//K -> String V->Student</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        public class HashMap&lt;K,V> {}        */</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"milan"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"milan"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//迭代器 EntrySet</span>        <span class="token comment" spellcheck="true">/*        public Set&lt;Map.Entry&lt;K,V>> entrySet() {        Set&lt;Map.Entry&lt;K,V>> es;        return (es = entrySet) == null ? (entrySet = new EntrySet()) : es;        }        */</span>        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">>></span> entries <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        public final Iterator&lt;Map.Entry&lt;K,V>> iterator() {        return new EntryIterator();        }        */</span>        Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">>></span> iterator <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 创建 3 个学生对象* 放入到 HashSet 中学生对象, 使用. * 放入到 HashMap 中，要求 Key 是 String name, Value 就是 学生对象* 使用两种方式遍历*/</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>        <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>        <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="泛型使用的注意事项和细节"><a href="#泛型使用的注意事项和细节" class="headerlink" title="泛型使用的注意事项和细节"></a>泛型使用的注意事项和细节</h3><ol><li>interface List<t>{} ，public class HashSet<e> 0}..等等<br>说明: T, E只能是引用类型<br>看看下面语句是否正确?:<br>| List <integer> list = new ArrayList <integer> 0; //OK<br>List <int> list2 = new ArrayList<int> 0://错误</int></int></integer></integer></e></t></li><li>在给泛型指定具体类型后，可以传入该类型或者其子类类型</li><li>泛型使用形式<br>List <integer> list1 = new ArrayList&lt; Integer&gt; 0;<br>List&lt; Integer&gt; list2 = new ArrayList&lt;&gt; 0; [说明:]</integer></li><li>如果我们这样写List list3 = new ArrayList(;默认给它的泛型是[<e> E就是Object ]<br>即:</e></li></ol><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><p>基本语法<br>class类名&lt;T, … { /..表示可以有多个泛型<br>成员}</p><p>➢注意细节<br>1)普通成员可以使用泛型(属性、方法)<br>2)使用泛型的数组，不能初始化<br>3)静态方法中不能使用类的泛型<br>4)泛型类的类型，是在创建对象时确定的(因为创建对象时，需要指定确定类型)<br>5)如果在创建对象时，没有指定类型，默认为Object</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomGeneric_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//T=Double, R=String, M=Integer</span>        Tiger<span class="token operator">&lt;</span>Double<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"john"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token number">10.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//OK</span>        <span class="token comment" spellcheck="true">//g.setT("yy"); //错误，类型不对</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        Tiger g2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">"john~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK T=Object R=Object M=Object</span>        g2<span class="token punctuation">.</span><span class="token function">setT</span><span class="token punctuation">(</span><span class="token string">"yy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//OK ,因为 T=Object "yy"=String 是 Object 子类</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g2="</span> <span class="token operator">+</span> g2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//老韩解读</span><span class="token comment" spellcheck="true">//1. Tiger 后面泛型，所以我们把 Tiger 就称为自定义泛型类</span><span class="token comment" spellcheck="true">//2, T, R, M 泛型的标识符, 一般是单个大写字母</span><span class="token comment" spellcheck="true">//3. 泛型标识符可以有多个. //4. 普通成员可以使用泛型 (属性、方法)</span><span class="token comment" spellcheck="true">//5. 使用泛型的数组，不能初始化</span><span class="token comment" spellcheck="true">//6. 静态方法中不能使用类的泛型</span><span class="token keyword">class</span> <span class="token class-name">Tiger</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token punctuation">,</span> M<span class="token operator">></span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    R r<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//属性使用到泛型</span>    M m<span class="token punctuation">;</span>    T t<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//因为数组在 new 不能确定 T 的类型，就无法在内存开空间</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> ts<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Tiger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Tiger</span><span class="token punctuation">(</span>R r<span class="token punctuation">,</span> M m<span class="token punctuation">,</span> T t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器使用泛型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Tiger</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> R r<span class="token punctuation">,</span> M m<span class="token punctuation">,</span> T t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器使用泛型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//因为静态是和类相关的，在类加载时，对象还没有创建</span>    <span class="token comment" spellcheck="true">//所以，如果静态方法和静态属性使用了泛型，JVM 就无法完成初始化</span>    <span class="token comment" spellcheck="true">// static R r2;</span>    <span class="token comment" spellcheck="true">// public static void m1(M m) {</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">//方法使用泛型</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> R <span class="token function">getR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setR</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//方法使用到泛型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> M <span class="token function">getM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回类型可以使用泛型. return m;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setM</span><span class="token punctuation">(</span>M m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setT</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Tiger{"</span> <span class="token operator">+</span>        <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>        <span class="token string">", r="</span> <span class="token operator">+</span> r <span class="token operator">+</span>        <span class="token string">", m="</span> <span class="token operator">+</span> m <span class="token operator">+</span>        <span class="token string">", t="</span> <span class="token operator">+</span> t <span class="token operator">+</span>        <span class="token string">", ts="</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><p>➢基本语法<br>interface 接口名&lt;T, … {<br>➢注意细节</p><ol><li>接口中，静态成员也不能使用泛型(这个和泛型类规定样)</li><li>泛型接口的类型， 在继承接口或者实现接口时确定</li><li>没有指定类型，默认为Object</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 泛型接口使用的说明* 1. 接口中，静态成员也不能使用泛型* 2. 泛型接口的类型, 在继承接口或者实现接口时确定* 3. 没有指定类型，默认为 Object*/</span><span class="token comment" spellcheck="true">//在继承接口 指定泛型接口的类型</span><span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token keyword">extends</span> <span class="token class-name">IUsb</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Double<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//当我们去实现 IA 接口时，因为 IA 在继承 IUsu 接口时，指定了 U 为 String R 为 Double</span><span class="token comment" spellcheck="true">//，在实现 IUsu 接口的方法时，使用 String 替换 U, 是 Double 替换 R</span><span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Double <span class="token function">get</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span>Double aDouble<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Double r1<span class="token punctuation">,</span> Double r2<span class="token punctuation">,</span> String u1<span class="token punctuation">,</span> String u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现接口时，直接指定泛型接口的类型</span><span class="token comment" spellcheck="true">//给 U 指定 Integer 给 R 指定了 Float</span><span class="token comment" spellcheck="true">//所以，当我们实现 IUsb 方法时，会使用 Integer 替换 U, 使用 Float 替换 R</span><span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token keyword">implements</span> <span class="token class-name">IUsb</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Float<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Float <span class="token function">get</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span>Float aFloat<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Float r1<span class="token punctuation">,</span> Float r2<span class="token punctuation">,</span> Integer u1<span class="token punctuation">,</span> Integer u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//没有指定类型，默认为 Object</span><span class="token comment" spellcheck="true">//建议直接写成 IUsb&lt;Object,Object></span>    <span class="token keyword">class</span> <span class="token class-name">CC</span> <span class="token keyword">implements</span> <span class="token class-name">IUsb</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//等价 class CC implements IUsb&lt;Object,Object> {</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Object r1<span class="token punctuation">,</span> Object r2<span class="token punctuation">,</span> Object u1<span class="token punctuation">,</span> Object u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IUsb</span><span class="token operator">&lt;</span>U<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//U name; 不能这样使用</span>    <span class="token comment" spellcheck="true">//普通方法中，可以使用接口泛型</span>    R <span class="token function">get</span><span class="token punctuation">(</span>U u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>R r1<span class="token punctuation">,</span> R r2<span class="token punctuation">,</span> U u1<span class="token punctuation">,</span> U u2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在 jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span>    <span class="token keyword">default</span> R <span class="token function">method</span><span class="token punctuation">(</span>U u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><p>基本语法<br>修饰符&lt;T.R..&gt;.返回类型方法名(参数列表) {<br>➢注意细节</p><ol><li>泛型方法，可以定义在普通类中，也可以定义在泛型类中</li><li>当泛型方法被调用时，类型会确定</li><li>public void eat(E e) 0}，修饰符后没有&lt;T.R..&gt; eat方法不是泛型方法，而是使用了泛型</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomMethodGeneric</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token string">"宝马"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当调用方法时，传入参数，编译器，就会确定类型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当调用方法时，传入参数，编译器，就会确定类型</span>        <span class="token comment" spellcheck="true">//测试</span>        <span class="token comment" spellcheck="true">//T->String, R-> ArrayList</span>        Fish<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ArrayList<span class="token operator">></span> fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fish<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//泛型方法，可以定义在普通类中, 也可以定义在泛型类中</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//说明 泛型方法</span>    <span class="token comment" spellcheck="true">//1. &lt;T,R> 就是泛型</span>    <span class="token comment" spellcheck="true">//2. 是提供给 fly 使用的</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> R r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//泛型方法</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Integer</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Fish</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//泛型类</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span><span class="token operator">&lt;</span>U<span class="token punctuation">,</span>M<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>U u<span class="token punctuation">,</span> M m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//泛型方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//说明</span>    <span class="token comment" spellcheck="true">//1. 下面 hi 方法不是泛型方法</span>    <span class="token comment" spellcheck="true">//2. 是 hi 方法使用了类声明的 泛型</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//泛型方法，可以使用类声明的泛型，也可以使用自己声明泛型</span>    <span class="token keyword">public</span><span class="token operator">&lt;</span>K<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>R r<span class="token punctuation">,</span> K k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArrayList</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Float</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h2><h3 id="泛型的继承和通配符说明"><a href="#泛型的继承和通配符说明" class="headerlink" title="泛型的继承和通配符说明"></a>泛型的继承和通配符说明</h3><ol><li>泛型不具备继承性List<object> list = new ArrayList&lt; String&gt; 0; //对吗?<li><!--?--> :支持任意泛型类型</li><li><!--? extends A-->:支持A类以及A类的子类，规定了泛型的上限</li><li><!--? super A-->:支持A类以及A类的父类，不限于直接父类，规定了泛型的下限</li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericExtends</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//泛型没有继承性</span>        <span class="token comment" spellcheck="true">//List&lt;Object> list = new ArrayList&lt;String>();</span>        <span class="token comment" spellcheck="true">//举例说明下面三个方法的使用</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>AA<span class="token operator">></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BB<span class="token operator">></span> list4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>CC<span class="token operator">></span> list5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果是 List&lt;?> c ，可以接受任意的泛型类型</span>        <span class="token function">printCollection1</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printCollection1</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printCollection1</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printCollection1</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printCollection1</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//List&lt;? extends AA> c： 表示 上限，可以接受 AA 或者 AA 子类</span>        <span class="token comment" spellcheck="true">// printCollection2(list1);//×</span>        <span class="token comment" spellcheck="true">// printCollection2(list2);//×</span>        <span class="token function">printCollection2</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//√</span>        <span class="token function">printCollection2</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//√</span>        <span class="token function">printCollection2</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//√</span>        <span class="token comment" spellcheck="true">//List&lt;? super AA> c: 支持 AA 类以及 AA 类的父类，不限于直接父类</span>        <span class="token function">printCollection3</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//√</span>        <span class="token comment" spellcheck="true">//printCollection3(list2);//×</span>        <span class="token function">printCollection3</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//√</span>        <span class="token comment" spellcheck="true">//printCollection3(list4);//×</span>        <span class="token comment" spellcheck="true">//printCollection3(list5);//×</span>        <span class="token comment" spellcheck="true">//冒泡排序</span>        <span class="token comment" spellcheck="true">//插入排序</span>        <span class="token comment" spellcheck="true">//....</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ? extends AA 表示 上限，可以接受 AA 或者 AA 子类</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCollection2</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AA</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//说明: List&lt;?> 表示 任意的泛型类型都可以接受</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCollection1</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 通配符，取出时，就是 Object</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ? super 子类类名 AA:支持 AA 类以及 AA 类的父类，不限于直接父类，</span>        <span class="token comment" spellcheck="true">//规定了泛型的下限</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCollection3</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> AA<span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token keyword">extends</span> <span class="token class-name">AA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CC</span> <span class="token keyword">extends</span> <span class="token class-name">BB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><ol><li>一个类有很多功能代码需要测试， 为了测试，就需要写入到main方法中</li><li>如果有多个功能代码测试，就需要来回注销，切换很麻烦</li><li>如果可以直接运行一个方法，就方便很多，并且可以给出相关信息，就好了-&gt; JUnit</li></ol><h3 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>JUnit是一一个Java语言的单元测试框架</li><li>多数Java的开发环境都已经集成了JUnit作为单元测试的工具</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnit_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//传统方式</span>        <span class="token comment" spellcheck="true">//new JUnit_().m1();</span>        <span class="token comment" spellcheck="true">//new JUnit_().m2();</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m3 方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="坦克大战"><a href="#坦克大战" class="headerlink" title="坦克大战"></a>坦克大战</h1><h2 id="java-绘图坐标体系"><a href="#java-绘图坐标体系" class="headerlink" title="java 绘图坐标体系"></a>java 绘图坐标体系</h2><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220809082813134.png" alt="image-20220809082813134"></p><blockquote><p>计算机在屏幕上显示的内容都是由屏幕上的每一个像素组成的。例如，计算机显示<br>器的分辨率是800x600，表示计算机屏幕上的每一行由800个点组成，共有600行,<br>整个计算机屏幕共有480 000个像素。像素是一个密度单位而厘米是长度单位两<br>者无法比较</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCircle</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//JFrame 对应窗口,可以理解成是一个画框</span>    <span class="token comment" spellcheck="true">//定义一个面板</span>    <span class="token keyword">private</span> MyPanel mp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出程序~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        <span class="token comment" spellcheck="true">//初始化面板</span>        mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把面板放入到窗口(画框)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置窗口的大小</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当点击窗口的小×，程序完全退出. this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以显示</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.先定义一个 MyPanel, 继承 JPanel 类， 画图形，就在面板上画</span><span class="token keyword">class</span> <span class="token class-name">MyPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//说明:</span><span class="token comment" spellcheck="true">//1. MyPanel 对象就是一个画板</span><span class="token comment" spellcheck="true">//2. Graphics g 把 g 理解成一支画笔</span><span class="token comment" spellcheck="true">//3. Graphics 提供了很多绘图的方法</span><span class="token comment" spellcheck="true">//Graphics g</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//绘图方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用父类的方法完成初始化. System.out.println("paint 方法被调用了~");</span>    <span class="token comment" spellcheck="true">//画出一个圆形. //g.drawOval(10, 10, 100, 100);</span>    <span class="token comment" spellcheck="true">//演示绘制不同的图形.. //画直线 drawLine(int x1,int y1,int x2,int y2)</span>    <span class="token comment" spellcheck="true">//g.drawLine(10, 10, 100, 100);</span>    <span class="token comment" spellcheck="true">//画矩形边框 drawRect(int x, int y, int width, int height)</span>    <span class="token comment" spellcheck="true">//g.drawRect(10, 10, 100, 100);</span>    <span class="token comment" spellcheck="true">//画椭圆边框 drawOval(int x, int y, int width, int height)</span>    <span class="token comment" spellcheck="true">//填充矩形 fillRect(int x, int y, int width, int height)</span>    <span class="token comment" spellcheck="true">//设置画笔的颜色</span>    <span class="token comment" spellcheck="true">// g.setColor(Color.blue);</span>    <span class="token comment" spellcheck="true">// g.fillRect(10, 10, 100, 100);</span>    <span class="token comment" spellcheck="true">//填充椭圆 fillOval(int x, int y, int width, int height)</span>    <span class="token comment" spellcheck="true">// g.setColor(Color.red);</span>    <span class="token comment" spellcheck="true">// g.fillOval(10, 10, 100, 100);</span>    <span class="token comment" spellcheck="true">//画图片 drawImage(Image img, int x, int y, ..)</span>    <span class="token comment" spellcheck="true">//1. 获取图片资源, /bg.png 表示在该项目的根目录去获取 bg.png 图片资源</span>    <span class="token comment" spellcheck="true">// Image image = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource("/bg.png"));</span>    <span class="token comment" spellcheck="true">// g.drawImage(image, 10, 10, 175, 221, this);</span>    <span class="token comment" spellcheck="true">//画字符串 drawString(String str, int x, int y)//写字</span>    <span class="token comment" spellcheck="true">//给画笔设置颜色和字体</span>    g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>    g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"隶书"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里设置的 100， 100， 是 "北京你好"左下角</span>    g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"北京你好"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置画笔的字体 setFont(Font font)</span>    <span class="token comment" spellcheck="true">//设置画笔的颜色 setColor(Color c)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="绘图原理"><a href="#绘图原理" class="headerlink" title="绘图原理"></a>绘图原理</h3><ul><li><p>Component类提供 了两个和绘图相关最重要的方法:</p><ol><li>paint(Graphics g)绘制组件的外观</li><li>repaint(刷新组件的外观。</li></ol></li><li><p>当组件第一次在屏幕显 示的时候，程序会自动的调用paint(方法来绘制组件</p></li><li><p>在以下情况paint(将会被调用:</p><ol><li>窗口最小化，再最大化</li><li>.窗口的大小发生变化</li><li>repaint方法被调用</li></ol></li></ul><h3 id="Graphics-类"><a href="#Graphics-类" class="headerlink" title="Graphics 类"></a>Graphics 类</h3><ol><li>画直线drawLine(int x1,int y1,int x2,int y2)</li><li>画矩形边框drawRect(int x, int y, int width, int height)</li><li>画椭圆边框drawOval(int x, int y, int width, int height</li><li>填充矩形fillRect(int x, int y, int width, int height)</li><li>填充椭圆fllval(int x, int y. int width, int height)</li><li>画图片drawlmage(lmage img, int x, inty, .)</li><li>画字符串drawString(String str, int x, int y)</li><li>设置画笔的字体setFont(Font font)</li><li>设置画笔的颜色setColor(Color c)</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCircle</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//JFrame 对应窗口,可以理解成是一个画框</span>    <span class="token comment" spellcheck="true">//定义一个面板</span>    <span class="token keyword">private</span> MyPanel mp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出程序~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        <span class="token comment" spellcheck="true">//初始化面板</span>        mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把面板放入到窗口(画框)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置窗口的大小</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当点击窗口的小×，程序完全退出. this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以显示</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1.先定义一个 MyPanel, 继承 JPanel 类， 画图形，就在面板上画</span><span class="token keyword">class</span> <span class="token class-name">MyPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//说明:</span>    <span class="token comment" spellcheck="true">//1. MyPanel 对象就是一个画板</span>    <span class="token comment" spellcheck="true">//2. Graphics g 把 g 理解成一支画笔</span>    <span class="token comment" spellcheck="true">//3. Graphics 提供了很多绘图的方法</span>    <span class="token comment" spellcheck="true">//Graphics g</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//绘图方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用父类的方法完成初始化. System.out.println("paint 方法被调用了~");</span>        <span class="token comment" spellcheck="true">//画出一个圆形. //g.drawOval(10, 10, 100, 100);</span>        <span class="token comment" spellcheck="true">//演示绘制不同的图形.. //画直线 drawLine(int x1,int y1,int x2,int y2)</span>        <span class="token comment" spellcheck="true">//g.drawLine(10, 10, 100, 100);</span>        <span class="token comment" spellcheck="true">//画矩形边框 drawRect(int x, int y, int width, int height)</span>        <span class="token comment" spellcheck="true">//g.drawRect(10, 10, 100, 100);</span>        <span class="token comment" spellcheck="true">//画椭圆边框 drawOval(int x, int y, int width, int height)</span>        <span class="token comment" spellcheck="true">//填充矩形 fillRect(int x, int y, int width, int height)</span>        <span class="token comment" spellcheck="true">//设置画笔的颜色</span>        <span class="token comment" spellcheck="true">// g.setColor(Color.blue);</span>        <span class="token comment" spellcheck="true">// g.fillRect(10, 10, 100, 100);</span>        <span class="token comment" spellcheck="true">//填充椭圆 fillOval(int x, int y, int width, int height)</span>        <span class="token comment" spellcheck="true">// g.setColor(Color.red);</span>        <span class="token comment" spellcheck="true">// g.fillOval(10, 10, 100, 100);</span>        <span class="token comment" spellcheck="true">//画图片 drawImage(Image img, int x, int y, ..)</span>        <span class="token comment" spellcheck="true">//1. 获取图片资源, /bg.png 表示在该项目的根目录去获取 bg.png 图片资源</span>        <span class="token comment" spellcheck="true">// Image image = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource("/bg.png"));</span>        <span class="token comment" spellcheck="true">// g.drawImage(image, 10, 10, 175, 221, this);</span>        <span class="token comment" spellcheck="true">//画字符串 drawString(String str, int x, int y)//写字</span>        <span class="token comment" spellcheck="true">//给画笔设置颜色和字体</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"隶书"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里设置的 100， 100， 是 "北京你好"左下角</span>        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"北京你好"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置画笔的字体 setFont(Font font)</span>        <span class="token comment" spellcheck="true">//设置画笔的颜色 setColor(Color c)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="java-事件处理机制"><a href="#java-事件处理机制" class="headerlink" title="java 事件处理机制"></a>java 事件处理机制</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BallMove</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//窗口</span>MyPanel mp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>           BallMove ballMove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BallMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">BallMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//窗口 JFrame 对象可以监听键盘事件, 即可以监听到面板发生的键盘事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//面板, 可以画出小球</span><span class="token comment" spellcheck="true">//KeyListener 是监听器, 可以监听键盘事件</span><span class="token keyword">class</span> <span class="token class-name">MyPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token keyword">implements</span> <span class="token class-name">KeyListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//为了让小球可以移动, 把他的左上角的坐标(x,y)设置变量</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认黑色</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有字符输出时，该方法就会触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当某个键按下，该方法会触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//System.out.println((char)e.getKeyCode() + "被按下..");</span>        <span class="token comment" spellcheck="true">//根据用户按下的不同键，来处理小球的移动 (上下左右的键)</span>        <span class="token comment" spellcheck="true">//在 java 中，会给每一个键，分配一个值(int)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//KeyEvent.VK_DOWN 就是向下的箭头对应的 code</span>            y<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_UP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            y<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_LEFT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> KeyEvent<span class="token punctuation">.</span>VK_RIGHT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//让面板重绘</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当某个键释放(松开)，该方法会触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>java事件处理是采取”委派事件模型”。当事件发生时，产生事件的对象，会把此”信息”传递给”事件的监听者”处理，这里所说的”信息”实际上就是java.awt.event事件类库里某个类所创建的对象，把它称为”事件的对象”。</p><h3 id="事件处理机制深入理解"><a href="#事件处理机制深入理解" class="headerlink" title="事件处理机制深入理解"></a>事件处理机制深入理解</h3><ol><li>前面我们提到几个重要的概念事件源，事件，事件监听器我们下面来全面的介绍它们。</li><li>事件源:事件源是一个产生事件的对象，比如按钮，窗口等。</li><li>事件:事件就是承载事件源状态改变时的对象，比如当键盘事件、鼠标事件、窗口事件等等，会生成一个事件对象，该对象保存着当前事件很多信息，比如KeyEvent 对象有含有被按下键的Code值。java.awt.event包 和javax.swing.event包中定义了各种事件类型</li></ol><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220809140533022.png" alt="image-20220809140533022"></p><ol start="5"><li>事件监听器接口:<br>(1) 当事件源产生一个事件， 可以传送给事件监听者处理<br>(2) 事件监听者实际上就是一个类，该类实现了某个事件监听器接口比如前面我们案例中的MyPanle就是一个类，它实现了KeyListener接口，它就可以作为个事件监听者，对接受到的事件进行处理<br>(3) 事件监听器接口有多种，不同的事件监听器接口可以监听不同的事件，个类可以实现多个监听接口<br>(4) 这些接口在java.awt.event包javax.swing.event包中定义。列出常用的事件监听器接口，查看jdk文档聚集了.</li></ol><h1 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h1><h2 id="线程相关概念"><a href="#线程相关概念" class="headerlink" title="线程相关概念"></a>线程相关概念</h2><h3 id="程序-program"><a href="#程序-program" class="headerlink" title="程序(program)"></a>程序(program)</h3><p>是为完成特定任务、用某种语言编写的一-组指令的集合。简单的说:就是我们写的代码</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol><li>进程是指运行中的程序，比如我们使用QQ，就启动了一个进程，操作系统就会为该进程分配内存空间。当我们使用迅雷，又启动了一个进程，操作系统将为迅雷分配新的内存空间。</li><li>进程是程序的一次执行过程，或是正在运行的一个程序。是动态过程:有它自身的产生、存在和消亡的过程</li></ol><h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><ol><li>线程由进程创建的，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ol><h3 id="其他相关概念"><a href="#其他相关概念" class="headerlink" title="其他相关概念"></a>其他相关概念</h3><ol><li>单线程:同一个时刻，只允许执行一个线程</li><li>多线程:同一个时刻，可以执行多个线程，比如:一个qq进程，可以同时打开多个聊天窗口，一个迅雷进程，可以同时下载多个文件</li><li>并发:同一个时刻，多个任务交替执行，造成种“貌似同时”的错觉，简单的说，单核cpu实现的多任务就是并发。</li><li>并发:同一个时刻，多个任务交替执行，造成种“貌似同时”的错觉，简单的说，单核cpu实现的多任务就是并发。</li></ol><h2 id="线程基本使用"><a href="#线程基本使用" class="headerlink" title="线程基本使用"></a>线程基本使用</h2><h3 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h3><p>在java中线程来使用有两种方法。</p><ol><li>继承Thread类，重写run方法</li><li>实现Runnable接口，重写run方法</li></ol><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220809230516602.png" alt="image-20220809230516602"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 Cat 对象，可以当做线程使用</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//老韩读源码</span>        <span class="token comment" spellcheck="true">/*        (1)        public synchronized void start() {        start0();        }        (2)        //start0() 是本地方法，是 JVM 调用, 底层是 c/c++实现        //真正实现多线程的效果， 是 start0(), 而不是 run        private native void start0();        */</span>        cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动线程-> 最终会执行 cat 的 run 方法</span>        <span class="token comment" spellcheck="true">//cat.run();//run 方法就是一个普通的方法, 没有真正的启动一个线程，就会把 run 方法执行完毕，才向下执行</span>        <span class="token comment" spellcheck="true">//说明: 当 main 线程启动一个子线程 Thread-0, 主线程不会阻塞, 会继续执行</span>        <span class="token comment" spellcheck="true">//这时 主线程和子线程是交替执行.. System.out.println("主线程继续执行" + Thread.currentThread().getName());//名字 main</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程 i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//让主线程休眠</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//老韩说明</span><span class="token comment" spellcheck="true">//1. 当一个类继承了 Thread 类， 该类就可以当做线程使用</span><span class="token comment" spellcheck="true">//2. 我们会重写 run 方法，写上自己的业务代码</span><span class="token comment" spellcheck="true">//3. run Thread 类 实现了 Runnable 接口的 run 方法</span><span class="token comment" spellcheck="true">/*@Overridepublic void run() {if (target != null) {target.run();}}*/</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重写 run 方法，写上自己的业务逻辑</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该线程每隔 1 秒。在控制台输出 “喵喵, 我是小猫咪”</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵, 我是小猫咪"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>times<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 线程名="</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让该线程休眠 1 秒 ctrl+alt+t</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>times <span class="token operator">==</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当 times 到 80, 退出 while, 这时线程也就退出.. }</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220810115641240.png" alt="image-20220810115641240"></p><ol><li>java是单继承的，在某些情况下一个类可能已经继承了某个父类，这时在用继承Thread类方法来创建线程显然不可能了。</li><li>java设计者们提供了另外-个方式创建线程，就是通过实现Runnable接口来创建线程</li></ol><h2 id="继承-Thread-vs-实现-Runnable-的区别"><a href="#继承-Thread-vs-实现-Runnable-的区别" class="headerlink" title="继承 Thread vs 实现 Runnable 的区别"></a>继承 Thread vs 实现 Runnable 的区别</h2><ol><li>从java的设计来看，通过继承Thread或者实现Runnable接口来创建线程本质上没有区别,从jdk帮助文档我们可以看到Thread类本身就实现了Runnable接口</li><li>实现Runnable接口方式更加适合多个线程共享一个资源的情况， 并且避免了单继承的限制，建议使用Runnable</li></ol><p>[售票系统]，编程模拟三个售票窗口售票100,分别使用继承Thread和实现Runnable方式，并分析有什么问题? SellTicket.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTicket</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试</span>        <span class="token comment" spellcheck="true">// SellTicket01 sellTicket01 = new SellTicket01();</span>        <span class="token comment" spellcheck="true">// SellTicket01 sellTicket02 = new SellTicket01();</span>        <span class="token comment" spellcheck="true">// SellTicket01 sellTicket03 = new SellTicket01();</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// //这里我们会出现超卖.. // sellTicket01.start();//启动售票线程</span>        <span class="token comment" spellcheck="true">// sellTicket02.start();//启动售票线程</span>        <span class="token comment" spellcheck="true">// sellTicket03.start();//启动售票线程</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===使用实现接口方式来售票====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SellTicket02 sellTicket02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SellTicket02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket02<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第 1 个线程-窗口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket02<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第 2 个线程-窗口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket02<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第 3 个线程-窗口</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用 Thread 方式</span><span class="token keyword">class</span> <span class="token class-name">SellTicket01</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让多个线程共享 ticketNum</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"售票结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//休眠 50 毫秒, 模拟</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 售出一张票"</span> <span class="token operator">+</span> <span class="token string">" 剩余票数="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">--</span>ticketNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现接口方式</span><span class="token keyword">class</span> <span class="token class-name">SellTicket02</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让多个线程共享 ticketNum</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"售票结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//休眠 50 毫秒, 模拟</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 售出一张票"</span> <span class="token operator">+</span> <span class="token string">" 剩余票数="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">--</span>ticketNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 - 0 - -1 - -2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><ol><li>当线程完成任务后，会自动退出。</li><li>还可以通过使用变量来控制run方法退出的方式停止线程，即通知方式</li></ol><h2 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h2><h3 id="常用方法第一组"><a href="#常用方法第一组" class="headerlink" title="常用方法第一组"></a>常用方法第一组</h3><ol><li>setName //设置线程名称，使之与参数name相同</li><li>getName //返回该线程的名称</li><li>start //使该线程开始执行: Java 虚拟机底层调用该线程的starto方法</li><li>run //调用线程对象run方法;</li><li>setPriority //更改线程的优先级</li><li>getPriority //获取线程的优先级</li><li>sleep //在指定的毫秒数内让当前正在执行的线程休眠(暂停执行)</li><li>interrupt //中断线程</li></ol><h3 id="注意事项和细节"><a href="#注意事项和细节" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li>start底层会创建新的线程，调用run, run就是一个简单的方法调用，不会启动新线程</li><li>线程优先级的范围</li><li>interrupt,中断线程，但并没有真正的结束线程。所以一般用于中断正在休眠线程</li><li>sleep:线程的静态方法，使当前线程休眠</li></ol><h3 id="常用方法第二组"><a href="#常用方法第二组" class="headerlink" title="常用方法第二组"></a>常用方法第二组</h3><ol><li>yield:线程的礼让。让出cpu,让其他线程执行，但礼让的时间不确定，所以也不一定礼让成功</li><li>join:线程的插队。插队的线程一-旦插队成功， 则肯定先执行完插入的线程所有的任务案例: main线程创建个子线程，每隔1s输出hello, 输出20次，主线程每隔1秒，输出hi,输出20次.要求两个线程同时执行，当主线程输出5次后，就让子线程运行完毕，主线程再继续，</li></ol><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><blockquote><p>1.主线程每隔1s，输出hi,一共10次<br>2.当输出到hi 5时，启动一个子线程(要求<br>实现Runnable),每隔1s输出hello,等<br>该线程输出10次hello后，退出<br>3.主线程继续输出hi，直到主线程退出<br>4.如图，完成代码其实线程插队.. </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodExercise</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">T3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建子线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//说明主线程输出了 5 次 hi</span>                t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动子线程 输出 hello... t3.join();//立即将 t3 子线程，插入到 main 线程，让 t3 先执行</span>            <span class="token punctuation">}</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出一次 hi, 让 main 线程也休眠 1s</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">T3</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h2><p>1.用户线程:也叫工作线程，当线程的任务执行完或通知方式结束<br>2.守护线程:一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束<br>3.常见的守护线程:垃圾回收机制</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220810184249105.png" alt="image-20220810184249105"></p><h3 id="线程状态转换图"><a href="#线程状态转换图" class="headerlink" title="线程状态转换图"></a>线程状态转换图</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220810184326709.png" alt="image-20220810184326709"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadState_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        T t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 状态 "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>State<span class="token punctuation">.</span>TERMINATED <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 状态 "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 状态 "</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><ol><li>在多线程编程，-些敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同时刻，最多有一个线程访问，以保证数据的完整性。</li><li>也可以这里理解:线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作.</li></ol><h3 id="同步具体方法-Synchronized"><a href="#同步具体方法-Synchronized" class="headerlink" title="同步具体方法-Synchronized"></a>同步具体方法-Synchronized</h3><ol><li><p>同步代码块<br>synchronized (对象) { // 得到对象的锁，才能操作同步代码<br>// 需要被同步代码:</p><p>}</p></li><li><p>synchronized还可以放在方法声明中， 表示整个方法为同步方法<br>public synchronized void m (String name){<br>//需要被同步的代码</p><p>}</p></li><li><p>如何理解:<br>就好像某小伙伴上厕所前先把门关上(上锁),完事后再出来(解锁),那么其它小伙伴就可在使用厕所了</p></li><li><p>使用synchronized解决售票问题</p></li></ol><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ol><li>Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。</li><li>每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一 时刻，只能有一一个线程访问该对象。</li><li>关键字synchronized来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由个线程访问</li><li>同步的局限性:导致程序的执行效率要降低</li><li>同步方法(非静态的)的锁可以是this,也可以是其他对象(要求是同一一个对象)</li><li>同步方法(静态的)的锁为当前类本身。</li></ol><h3 id="使用互斥锁来解决售票问题"><a href="#使用互斥锁来解决售票问题" class="headerlink" title="使用互斥锁来解决售票问题"></a>使用互斥锁来解决售票问题</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SellTicket</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SellTicket03 sellTicket03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SellTicket03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第 1 个线程-窗口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第 2 个线程-窗口</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sellTicket03<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第 3 个线程-窗口</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现接口方式, 使用 synchronized 实现线程同步</span><span class="token keyword">class</span> <span class="token class-name">SellTicket03</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让多个线程共享 ticketNum</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//控制 run 方法变量</span>    Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//同步方法（静态的）的锁为当前类本身</span>    <span class="token comment" spellcheck="true">//老韩解读</span>    <span class="token comment" spellcheck="true">//1. public synchronized static void m1() {} 锁是加在 SellTicket03.class</span>    <span class="token comment" spellcheck="true">//2. 如果在静态方法中，实现一个同步代码块. </span><span class="token comment" spellcheck="true">/*    synchronized (SellTicket03.class) {        System.out.println("m2");    }    */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SellTicket03<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//老韩说明</span>    <span class="token comment" spellcheck="true">//1. public synchronized void sell() {} 就是一个同步方法</span>    <span class="token comment" spellcheck="true">//2. 这时锁在 this 对象</span>    <span class="token comment" spellcheck="true">//3. 也可以在代码块上写 synchronize ,同步代码块, 互斥锁还是在 this 对象</span>    <span class="token keyword">public</span> <span class="token comment" spellcheck="true">/*synchronized*/</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//同步方法, 在同一时刻， 只能有一个线程来执行 sell 方法</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*this*/</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"售票结束..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//休眠 50 毫秒, 模拟</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"窗口 "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 售出一张票"</span> <span class="token operator">+</span> <span class="token string">" 剩余票数="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">--</span>ticketNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1 - 0 - -1 - -2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sell 方法是一共同步方法</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="注意事项和细节-1"><a href="#注意事项和细节-1" class="headerlink" title="注意事项和细节"></a>注意事项和细节</h3><ol><li><p>同步方法如果没有使用static修饰: 默认锁对象为this</p></li><li><p>如果方法使用static修饰，默认锁对象:当前类.class</p></li><li><p>实现的落地步骤:</p></li></ol><p>  需要先分析上锁的代码<br>  选择同步代码块或同步方法<br>  要求多个线程的锁对象为同一个即可!</p><h2 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h2><p>多个线程都占用了 对方的锁资源，但不肯相让，导致了死锁，在编程是一 定要避免死锁的发生. </p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟死锁现象</span>        DeadLockDemo A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLockDemo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        A<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"A 线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DeadLockDemo B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLockDemo</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"B 线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        A<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//线程</span><span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Object o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保证多线程，共享一个对象,这里使用 static</span>    <span class="token keyword">static</span> Object o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DeadLockDemo</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//下面业务逻辑的分析</span>        <span class="token comment" spellcheck="true">//1. 如果 flag 为 T, 线程 A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span>        <span class="token comment" spellcheck="true">//2. 如果线程 A 得不到 o2 对象锁，就会 Blocked</span>        <span class="token comment" spellcheck="true">//3. 如果 flag 为 F, 线程 B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span>        <span class="token comment" spellcheck="true">//4. 如果线程 B 得不到 o1 对象锁，就会 Blocked</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//对象互斥锁, 下面就是同步代码</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里获得 li 对象的监视权</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>o1<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 这里获得 li 对象的监视权</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><ol><li>当前线程的同步方法、 同步代码块执行结束<br>案例:上厕所，完事出来</li><li>当前线程在同步代码块、同步方法中遇到break, return.<br>案例:没有正常的完事，经理叫他修改bug,不得已出来</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception,导致异常结束#<br>案例:没有正常的完事，发现忘带纸，不得已出来</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait(方法，当前线程暂停，并释放锁。<br>案例:没有正常完事，觉得需要酝酿下，所以出来等会再进去</li></ol><h3 id="下面操作不会释放锁"><a href="#下面操作不会释放锁" class="headerlink" title="下面操作不会释放锁"></a>下面操作不会释放锁</h3><ol><li>线程执行同步代码块或同步方法时，程序调用Thread.sleep0. Thread.yield(方法暂停当前线程的执行，不会释放锁<br>案例:上厕所，太困了在坑位上眯了一会</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend(方法将该线程挂起，该线程不会释放锁。<br>提示:应尽量避免使用suspend)和resume0来控制线程，方法不再推荐使用</li></ol><h1 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812113334318.png" alt="image-20220812113334318"></p><h2 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h2><p>new File(String pathname) //根据路径构建一个File对象<br>new File(File parent,String child) //根据父目录文件+子路径构建<br>new File(String parent,String child) //根据父目录+子路径构建<br>createNewFile创建新文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileCreate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式 1 new File(String pathname)</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\news1.txt"</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式 2 new File(File parent,String child) //根据父目录文件+子路径构建</span><span class="token comment" spellcheck="true">//e:\\news2.txt</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File parentFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> <span class="token string">"news2.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里的 file 对象，在 java 程序中，只是一个对象</span>        <span class="token comment" spellcheck="true">//只有执行了 createNewFile 方法，才会真正的，在磁盘创建该文件</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentFile<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式 3 new File(String parent,String child) //根据父目录+子路径构建</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//String parentPath = "e:\\";</span>        String parentPath <span class="token operator">=</span> <span class="token string">"e:\\"</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> <span class="token string">"news4.txt"</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//下面四个都是抽象类</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//InputStream</span>    <span class="token comment" spellcheck="true">//OutputStream</span>    <span class="token comment" spellcheck="true">//Reader //字符输入流</span>    <span class="token comment" spellcheck="true">//Writer //字符输出流</span><span class="token punctuation">}</span></code></pre><h3 id="获取文件的相关信息"><a href="#获取文件的相关信息" class="headerlink" title="获取文件的相关信息"></a>获取文件的相关信息</h3><p>getName、getAbsolutePath、 getParent、 length、 exists、isFile、isDirectory</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInformation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取文件的信息</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//先创建文件对象</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"e:\\news1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用相应的方法，得到对应信息</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名字="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getName、getAbsolutePath、getParent、length、exists、isFile、isDirectory</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件绝对路径="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件父级目录="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件大小(字节)="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件是否存在="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是不是一个文件="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//T</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是不是一个目录="</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//F</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="目录的操作和文件删除"><a href="#目录的操作和文件删除" class="headerlink" title="目录的操作和文件删除"></a>目录的操作和文件删除</h3><p>mkdir创建一 级目录、mkdirs创建多级目录、delete删除空目录或文件</p><h2 id="IO-流原理及流的分类"><a href="#IO-流原理及流的分类" class="headerlink" title="IO 流原理及流的分类"></a>IO 流原理及流的分类</h2><h3 id="Java-IO-流原理"><a href="#Java-IO-流原理" class="headerlink" title="Java IO 流原理"></a>Java IO 流原理</h3><ol><li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理数据传输。如读/写文件，网络通讯等。</li><li>Java程序中，对于数据的输入/输出操作以”流(stream)”的方式进行。</li><li>java.io包下提供了各种”流”类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</li><li>.输入input:读取外部数据(磁盘、光盘等存储设备的数据)到程序(内存)中。</li><li>输出output: 将程序(内存)数据输出到磁盘、光盘等存储设备中</li></ol><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>**按操作数据单位不同分为:**字节流(8 bit)二进制文件，字符流(按字符)文本文件<br>**按数据流的流向不同分为:**输入流，输出流<br>**按流的角色的不同分为:**节点流，处理流/包装流</p><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><ol><li>Java的I0流共涉及40多个类，实际上非常规则，都是从如上4个抽象基类派生的。</li><li>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</li></ol><h2 id="IO-流体系图-常用的类"><a href="#IO-流体系图-常用的类" class="headerlink" title="IO 流体系图-常用的类"></a>IO 流体系图-常用的类</h2><h3 id="IO-流体系图"><a href="#IO-流体系图" class="headerlink" title="IO 流体系图"></a>IO 流体系图</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812114120170.png" alt="image-20220812114120170"></p><h3 id="FileInputStream-介绍"><a href="#FileInputStream-介绍" class="headerlink" title="FileInputStream 介绍"></a>FileInputStream 介绍</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStream_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 演示读取文件... * 单个字节的读取，效率比较低    * -> 使用 read(byte[] b)    */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\hello.txt"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> readData <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建 FileInputStream 对象，用于读取 文件</span>            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从该输入流读取一个字节的数据。 如果没有输入可用，此方法将阻止。</span>            <span class="token comment" spellcheck="true">//如果返回-1 , 表示读取完毕</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readData <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转成 char 显示</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭文件流，释放资源.</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 使用 read(byte[] b) 读取文件，提高效率    */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\hello.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一次读取 8 个字节. int readLen = 0;</span>        FileInputStream fileInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建 FileInputStream 对象，用于读取 文件</span>            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从该输入流读取最多 b.length 字节的数据到字节数组。 此方法将阻塞，直到某些输入可用。</span>            <span class="token comment" spellcheck="true">//如果返回-1 , 表示读取完毕</span>            <span class="token comment" spellcheck="true">//如果读取正常, 返回实际读取的字节数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示</span>            <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭文件流，释放资源. try {</span>                fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FileOutputStream-介绍"><a href="#FileOutputStream-介绍" class="headerlink" title="FileOutputStream 介绍"></a>FileOutputStream 介绍</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812114319026.png" alt="image-20220812114319026"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStream01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 演示使用 FileOutputStream 将数据写到文件中, * 如果该文件不存在，则创建该文件    */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建 FileOutputStream 对象</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.txt"</span><span class="token punctuation">;</span>        FileOutputStream fileOutputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//得到 FileOutputStream 对象 对象</span>            <span class="token comment" spellcheck="true">//老师说明</span>            <span class="token comment" spellcheck="true">//1. new FileOutputStream(filePath) 创建方式，当写入内容是，会覆盖原来的内容</span>            <span class="token comment" spellcheck="true">//2. new FileOutputStream(filePath, true) 创建方式，当写入内容是，是追加到文件后面</span>            fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//写入一个字节</span>            <span class="token comment" spellcheck="true">//fileOutputStream.write('H');//</span>            <span class="token comment" spellcheck="true">//写入字符串</span>            String str <span class="token operator">=</span> <span class="token string">"hsp,world!"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//str.getBytes() 可以把 字符串-> 字节数组</span>            <span class="token comment" spellcheck="true">//fileOutputStream.write(str.getBytes());</span>            <span class="token comment" spellcheck="true">/*            write(byte[] b, int off, int len) 将 len 字节从位于偏移量 off 的指定字节数组写入此文件输出流            */</span>            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FileReader-和-FileWriter-介绍"><a href="#FileReader-和-FileWriter-介绍" class="headerlink" title="FileReader 和 FileWriter 介绍"></a>FileReader 和 FileWriter 介绍</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812114442811.png" alt="image-20220812114442811"></p><h3 id="FileReader-相关方法："><a href="#FileReader-相关方法：" class="headerlink" title="FileReader 相关方法："></a>FileReader 相关方法：</h3><ol><li>new FileReader(File/String)</li><li>read:每次读取单个字符，返回该字符，如果到文件末尾返回-1</li><li>read(char[): 批量读取多个字符到数组，返回读取到的字符数，如果到文件末尾返回-1相关API:</li><li>new String(char[):将char]转换成String</li><li>new String(char],offlen):将char[]的指定部分转换成String</li></ol><h3 id="FileWriter-常用方法"><a href="#FileWriter-常用方法" class="headerlink" title="FileWriter 常用方法"></a>FileWriter 常用方法</h3><ol><li>new FileWriter(File/String): 覆盖模式，相当于流的指针在首端</li><li>new FileWriter(File/String,true): 追加模式，相当于流的指针在尾端</li><li>write(int):写入单个字符</li><li>write(char[]):写入指定数组</li><li>write(char[J,off,len):写入指定数组的指定部分</li><li>write (string) :写入整个字符串</li><li>write(string,off,len):写入字符串的指定部分<br>相关API: String类: toCharArray:将String转换成char[]<br>➢注意:<br>FileWriter使用后，必须要关闭(close)或刷新(flush)， 否则写入不到指定的文件!</li></ol><h2 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h2><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812114651650.png" alt="image-20220812114651650"></p><h3 id="节点流和处理流的区别和联系"><a href="#节点流和处理流的区别和联系" class="headerlink" title="节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h3><ol><li>节点流是底层流/低级流,直接跟数据源相接。</li><li>处理流(包装流)包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入输出。[源码理解]</li><li>处理流(也叫包装流)对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连[模拟修饰器设计模式=》小伙伴就会非常清楚]</li></ol><h3 id="处理流的功能主要体现在以下两个方面"><a href="#处理流的功能主要体现在以下两个方面" class="headerlink" title="处理流的功能主要体现在以下两个方面:"></a>处理流的功能主要体现在以下两个方面:</h3><ol><li>性能的提高:主要以增加缓冲的方式来提高输入输出的效率。</li><li>操作的便捷:处理流可能提供了一系列便捷的方法来一次输入输出大批量的数据， 使用更加灵活方便</li></ol><h3 id="处理流-BufferedReader-和-BufferedWriter"><a href="#处理流-BufferedReader-和-BufferedWriter" class="headerlink" title="处理流-BufferedReader 和 BufferedWriter"></a>处理流-BufferedReader 和 BufferedWriter</h3><blockquote><p>BufferedReader和BufferedWriter属于字符流，是按照字符来读取数据的<br>关闭时处理流，只需要关闭外层流即可[后面看源码]</p></blockquote><p>使用BufferedReader读取文本文件，并显示在控制台BufferedReader java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReader_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 bufferedReader</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取</span>        String line<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//按行读取, 效率高</span>        <span class="token comment" spellcheck="true">//说明</span>        <span class="token comment" spellcheck="true">//1. bufferedReader.readLine() 是按行读取文件</span>        <span class="token comment" spellcheck="true">//2. 当返回 null 时，表示文件读取完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭流, 这里注意，只需要关闭 BufferedReader ，因为底层会自动的去关闭 节点流</span>        <span class="token comment" spellcheck="true">//FileReader。</span>        <span class="token comment" spellcheck="true">/*        public void close() throws IOException {        synchronized (lock) {        if (in == null)        return;        try {        in.close();//in 就是我们传入的 new FileReader(filePath), 关闭了. } finally {        in = null;        cb = null;        }        }        }        */</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.使用BufferedWriter将”hello, 韩顺平教育”,写入到文件中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedWriter_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\ok.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 BufferedWriter</span>        <span class="token comment" spellcheck="true">//说明:</span>        <span class="token comment" spellcheck="true">//1. new FileWriter(filePath, true) 表示以追加的方式写入</span>        <span class="token comment" spellcheck="true">//2. new FileWriter(filePath) , 表示以覆盖的方式写入</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello, 韩顺平教育!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入一个和系统相关的换行</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello2, 韩顺平教育!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello3, 韩顺平教育!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//说明：关闭外层流即可 ， 传入的 new FileWriter(filePath) ,会在底层关闭</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.综合使用BufferedReader和BufferedWriter 完成文本文件拷贝，注意文件编码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedCopy_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//老韩说明</span>    <span class="token comment" spellcheck="true">//1. BufferedReader 和 BufferedWriter 是安装字符操作</span>    <span class="token comment" spellcheck="true">//2. 不要去操作 二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</span>    <span class="token comment" spellcheck="true">//BufferedInputStream</span>    <span class="token comment" spellcheck="true">//BufferedOutputStream</span>    String srcFilePath <span class="token operator">=</span> <span class="token string">"e:\\a.java"</span><span class="token punctuation">;</span>    String destFilePath <span class="token operator">=</span> <span class="token string">"e:\\a2.java"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// String srcFilePath = "e:\\0245_韩顺平零基础学 Java_引出 this.avi";</span>    <span class="token comment" spellcheck="true">// String destFilePath = "e:\\a2 韩顺平.avi";</span>    BufferedReader br <span class="token operator">=</span> null<span class="token punctuation">;</span>    BufferedWriter bw <span class="token operator">=</span> null<span class="token punctuation">;</span>    String line<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//说明: readLine 读取一行内容，但是没有换行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每读取一行，就写入</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//插入一个换行</span>            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拷贝完毕..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>br <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bw <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="处理流-BufferedInputStream-和-BufferedOutputStream"><a href="#处理流-BufferedInputStream-和-BufferedOutputStream" class="headerlink" title="处理流-BufferedInputStream 和 BufferedOutputStream"></a>处理流-BufferedInputStream 和 BufferedOutputStream</h3><p>BufferedInputStream是字节流在创建BufferedInputStream时，会创建-一个内部缓冲区数组.</p><p>BufferedOutputStream是字书流，实现缓冲的输出流，可以将多个字节写入底层输出流中，而不必对每次字节写入调用底层系统</p><p><u>要求编程完成图片/音乐的拷贝(要求使用Buffered..流)</u></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedCopy02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// String srcFilePath = "e:\\Koala.jpg";</span>        <span class="token comment" spellcheck="true">// String destFilePath = "e:\\hsp.jpg";</span>        <span class="token comment" spellcheck="true">// String srcFilePath = "e:\\0245_韩顺平零基础学 Java_引出 this.avi";</span>        <span class="token comment" spellcheck="true">// String destFilePath = "e:\\hsp.avi";</span>        String srcFilePath <span class="token operator">=</span> <span class="token string">"e:\\a.java"</span><span class="token punctuation">;</span>        String destFilePath <span class="token operator">=</span> <span class="token string">"e:\\a3.java"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建 BufferedOutputStream 对象 BufferedInputStream 对象</span>        BufferedInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//因为 FileInputStream 是 InputStream 子类</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环的读取文件，并写入到 destFilePath</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当返回 -1 时，就表示文件读取完毕</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件拷贝完毕~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流 , 关闭外层的处理流即可，底层会去关闭节点流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对象流-ObjectInputStream-和-ObjectOutputStream"><a href="#对象流-ObjectInputStream-和-ObjectOutputStream" class="headerlink" title="对象流-ObjectInputStream 和 ObjectOutputStream"></a>对象流-ObjectInputStream 和 ObjectOutputStream</h3><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><ol><li>序列化就是在保存数据时，保存数据的值和数据类型</li><li>反序列化就是在恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制， 则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一:<br>Serializable // 这是一个标记接口，没有方法<br>Externalizable /该接口有方法需要实现，因此我们一般实现 上面的Serializable接口</li></ol><blockquote><p>功能：提供了对基本类型或对象类型的序列化和反序列化的方法 </p><p>ObjectOutputStream 提供 序列化功能 </p><p>ObjectInputStream 提供 反序列化功</p></blockquote><p>使用ObjectOutputStream序列化基本数据类型和-个Dog对象(name, age), 并保存到data.dat文件中ObjectOutStream java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectOutStream_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\data.dat"</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化数据到 e:\data.dat</span>        oos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int -> Integer (实现了 Serializable)</span>        oos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// boolean -> Boolean (实现了 Serializable)</span>        oos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// char -> Character (实现了 Serializable)</span>        oos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">9.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// double -> Double (实现了 Serializable)</span>        oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"韩顺平教育"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String</span>        <span class="token comment" spellcheck="true">//保存一个 dog 对象</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"日本"</span><span class="token punctuation">,</span> <span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据保存完毕(序列化形式)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><u>使用ObjectInputStream读取data.dat并反序列化恢复数据</u></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.创建流对象</span>ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\data.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.读取， 注意顺序</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.关闭</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"以反序列化的方式读取(恢复)ok~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="注意事项和细节说明"><a href="#注意事项和细节说明" class="headerlink" title="注意事项和细节说明"></a>注意事项和细节说明</h3><ol><li>读写顺序要致</li><li>要求序列化或反序列化对象，需要实现Serializable</li><li>序列化的类中建议添加SerialVersionUID,为了提高版本的兼容性</li><li>序列化对象时，默认将里面所有属性都进行序列化，但除了static或transient修饰的成员</li><li>序列化对象时，要求里面属性的类型也需要实现序列化接口</li><li>序列化具备可继承性，也就是如果某类已经实现了序列化，则它的所有子类也已经默认实现了序列化</li></ol><h3 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h3><table><thead><tr><th></th><th>类型</th><th>默认设备</th></tr></thead><tbody><tr><td>System.in 标准输入</td><td>InputStream</td><td>键盘</td></tr><tr><td>System.out 标准输出</td><td>PrintStream</td><td>显示器</td></tr></tbody></table><blockquote><p>传统方法System.out.println( “”); 是使用out对象将数据输出到显示器<br>传统的方法，Scanner是从标准输入键盘接收数据</p></blockquote><h3 id="转换流-InputStreamReader-和-OutputStreamWriter"><a href="#转换流-InputStreamReader-和-OutputStreamWriter" class="headerlink" title="转换流-InputStreamReader 和 OutputStreamWriter"></a>转换流-InputStreamReader 和 OutputStreamWriter</h3><ol><li>InputStreamReader:Reader的子类，可以将InputStream(字节流)包装成(转换)Reader(字符流)</li><li>OutputStreamWriter:Writer的子类， 实现将OutputStream(字节流)包装成Writer(字符流)</li><li>当处理纯文本数据时，如果使用字符流效率更高，并且可以有效解决中文问题，所以建议将字节流转换成字符流</li><li>可以在使用时指定编码格式(比如 utf-8, gbk，gb2312, 1S08859-1等)</li></ol><p><u>编程将字节流FileInputStream 包装成(转换成)字符流InputStreamReader,对文件进行读取(按照utf- 8/gbk格式)，进而在包装成BufferedReader</u></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReader_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\a.txt"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解读</span>        <span class="token comment" spellcheck="true">//1. 把 FileInputStream 转成 InputStreamReader</span>        <span class="token comment" spellcheck="true">//2. 指定编码 gbk</span>        <span class="token comment" spellcheck="true">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), "gbk");</span>        <span class="token comment" spellcheck="true">//3. 把 InputStreamReader 传入 BufferedReader</span>        <span class="token comment" spellcheck="true">//BufferedReader br = new BufferedReader(isr);</span>        <span class="token comment" spellcheck="true">//将 2 和 3 合在一起</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 读取</span>        String s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取内容="</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 关闭外层流</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><u>编程将字节流FileOutputStream包装成(转换成)字符流OutputStreamWriter,对文件进行写入(按照gbk格式，可以指定其他，比如utf-8)</u></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1.创建流对象</span>OutputStreamWriter osw <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"d:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.写入</span>osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello,韩顺平教育~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.关闭</span>osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="打印流-PrintStream-和-PrintWriter"><a href="#打印流-PrintStream-和-PrintWriter" class="headerlink" title="打印流-PrintStream 和 PrintWriter"></a>打印流-PrintStream 和 PrintWriter</h2><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812224420216.png" alt="image-20220812224420216"></p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220812224431889.png" alt="image-20220812224431889"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintWriter_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//PrintWriter printWriter = new PrintWriter(System.out);</span>    PrintWriter printWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"e:\\f2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintStream_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        PrintStream out <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span>        <span class="token comment" spellcheck="true">/*        public void print(String s) {        if (s == null) {        s = "null";        }        write(s);        }        */</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"john, hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为 print 底层使用的是 write , 所以我们可以直接调用 write 进行打印/输出</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"韩顺平,你好"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//我们可以去修改打印流输出的位置/设备</span>        <span class="token comment" spellcheck="true">//1. 输出修改成到 "e:\\f1.txt"</span>        <span class="token comment" spellcheck="true">//2. "hello, 韩顺平教育~" 就会输出到 e:\f1.txt</span>        <span class="token comment" spellcheck="true">//3. public static void setOut(PrintStream out) {</span>        <span class="token comment" spellcheck="true">// checkIO();</span>        <span class="token comment" spellcheck="true">// setOut0(out); // native 方法，修改了 out</span>        <span class="token comment" spellcheck="true">// }</span>        System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"e:\\f1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, 韩顺平教育~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hi, 北京你好~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//flush + 关闭流, 才会将数据写入到文件..</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取 mysql.properties 文件，并得到 ip, user 和 pwd</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//循环读取</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果我们要求指定的 ip 值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"值是: "</span> <span class="token operator">+</span> split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>专门用于读写配置文件的集合类<br>配置文件的格式:<br>键=值<br>键=值</li><li>注意:键值对不需要有空格，值不需要用引号一起来。 默认类型是String</li></ol><ol start="3"><li>Properties的常见方法<br>load:加载配置文件的键值对到Properties对象<br>list:将数据显示到指定设备<br>getProperty(key):根据键获取值<br>setProperty(key,value):设置键值对到Properties对象<br>store:将Properties中的键值对存储到配置文件，在idea中，保存信息到配置文件，如果含有中文，会存储为unicode码</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1.使用Properties类完成对mysql.properties的读取，看老师代码演示<br>2.使用Properties类添加key-val到新文件mysql2.properties中<br>3.使用Properties类完成对mysql2.properties的读取，并修改某 个key-va</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用 Properties 类来读取 mysql.properties 文件</span>        <span class="token comment" spellcheck="true">//1. 创建 Properties 对象</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 加载指定配置文件</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 把 k-v 显示控制台</span>        properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 根据 key 获取对应的值</span>        String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pwd <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名="</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码是="</span> <span class="token operator">+</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用 Properties 类来创建 配置文件, 修改配置文件内容</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建</span>        <span class="token comment" spellcheck="true">//1.如果该文件没有 key 就是创建</span>        <span class="token comment" spellcheck="true">//2.如果该文件有 key ,就是修改</span>        <span class="token comment" spellcheck="true">/*        Properties 父类是 Hashtable ， 底层就是 Hashtable 核心方法        public synchronized V put(K key, V value) {        // Make sure the value is not null        if (value == null) {        throw new NullPointerException();        }        // Makes sure the key is not already in the hashtable. Entry&lt;?,?> tab[] = table;        int hash = key.hashCode();        int index = (hash &amp; 0x7FFFFFFF) % tab.length;        @SuppressWarnings("unchecked")        Entry&lt;K,V> entry = (Entry&lt;K,V>)tab[index];        for(; entry != null ; entry = entry.next) {        if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) {        V old = entry.value;        entry.value = value;//如果 key 存在，就替换        return old;        }        }        addEntry(hash, key, value, index);//如果是新 k, 就 addEntry        return null;        }        */</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"charset"</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意保存时，是中文的 unicode 码值</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> <span class="token string">"888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将 k-v 存储文件中即可</span>        properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql2.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存配置文件成功~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络的相关概念"><a href="#网络的相关概念" class="headerlink" title="网络的相关概念"></a>网络的相关概念</h2><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><ol><li>概念:两台设备之间通过网络实现数据传输</li><li>网络通信:将数据通过网络从一台设备传输到另一 台设备</li><li>java.net包下提供了一系列的类或接口，供程序使用，完成网络通信</li></ol><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ol><li><p>概念:两台或多台设备通过定物理设备连接起来构成了网络</p></li><li><p>根据网络的覆盖范围不同，对网络</p><p>进行分类:<br>局域网:覆盖范围最小，仅仅覆盖一个教室或一个机房<br>城域网:覆盖范围较大，可以覆盖一个城市<br>广域网:覆盖范围最大，可以覆盖全国，甚至全球，万维网是广域网的代表</p></li></ol><h3 id="ip-地"><a href="#ip-地" class="headerlink" title="ip 地"></a>ip 地</h3><ol><li>概念:用于唯一标识网络中的每台计算机/主机</li><li>查看ip地址: ipconfig</li><li>ip地址的表示形式:点分十进制x.xx.xx.xx</li><li>每一个十进制数的范围: 0~255</li><li>ip地址的组成=网络地址+主机地址，比如: 192.168.16.69</li><li>ilPv6是互联网工程任务组设计的用于替代IPv4的下一代IP协议，其地址数量号称可以为全世界的每一粒沙子编上一 个地址[1]。</li><li>由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6的使用，不仅能解决网络地址资源数量的问题，而且也解决了多种接入设备连入互联网的障碍</li></ol><h3 id="ipv4-地址"><a href="#ipv4-地址" class="headerlink" title="ipv4 地址"></a>ipv4 地址</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220814151340564.png" alt="image-20220814151340564"></p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ol><li><a href="http://www.baidu.com/">www.baidu.com</a></li><li>好处:为了方便记忆，解决记ip的困难</li><li>概念:将ip地址映射成域名，这里怎么映射上，HTTP协议</li></ol><p>端口号</p><ol><li>概念:用于标识计算机上某个特定的网络程序</li><li>表示形式:以整数形式，端口范围O~ 65535 [2个字节表示端口0~2^16-1]</li><li>0~1024已经被占用，比如ssh 22, ftp 21, smtp 25 http 80</li><li>常见的网络程序端口号:<br>tomcat :8080<br>mysql:3306<br>oracle:1 521<br>sqlserver:1433</li></ol><h3 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220814151605603.png" alt="image-20220814151605603"></p><blockquote><p>➢协议(tcp/ip)<br>TCP/IP (Transmission Control<br>Protocol/Internet Protocol)的简写，<br>中文译名为传输控制协议/因特网互联<br>协议，又叫网络通讯协议，这个协议是<br>Internet最基本的协议、Internet国际<br>互联网络的基础，简单地说，就是由网<br>络层的IP协议和传输层的TCP协议组成<br>的。[示意图]</p></blockquote><h3 id="TCP-和-UDP"><a href="#TCP-和-UDP" class="headerlink" title="TCP 和 UDP"></a>TCP 和 UDP</h3><p>TCP协议: 传输控制协议</p><ol><li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li><li>传输前，采用”三次握手”方式，是可靠的</li><li>TCP协议进行通信的两个应用进程:客户端、服务端</li><li>在连接中可进行大数据量的传输</li><li>传输完毕，需释放已建立的连接，效率低</li></ol><p>UDP协议: 用户数据协议</p><ol><li>将数据、源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在64K内，不适合传输大量数据</li><li>因无需连接，故是不可靠的</li><li>发送数据结束时无需释放资源(因为不是面向连接的)，速度快</li><li>举例:厕所通知:发短信</li></ol><h2 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h2><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><p>1.获取本机InetAddress对象getLocalHost<br>2.根据指定主机名/域名获取ip地址对象getByName<br>3.获取InetAddress对象的主机名getHostName<br>4.获取InetAddress对象的地址getHostAddress</p><p>编写代码，获取计算机的主机名和 IP 地址相关 API</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取本机 InetAddress 对象 getLocalHost</span>InetAddress localHost <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localHost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据指定主机名/域名获取 ip 地址对象 getByName</span>InetAddress host2 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"ThinkPad-PC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host2<span class="token punctuation">)</span><span class="token punctuation">;</span>InetAddress host3 <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"www.hsp.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取 InetAddress 对象的主机名 getHostName</span>String host3Name <span class="token operator">=</span> host3<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host3Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取 InetAddress 对象的地址 getHostAddress</span>String host3Address <span class="token operator">=</span> host3<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>host3Address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ol><li>套接字(Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准。</li><li>通信的两端都要有Socket,是两台机器间通信的端点</li><li>网络通信其实就是Socket间的通信。</li><li>Socket允许程序把网络连接当成一 个流，数据在两个Socket间通过I0传输。</li><li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端</li></ol><p> <img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220814155832027.png" alt="image-20220814155832027"></p><h2 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h2><p>1.基于客户端服务端的网络通信<br>2.底层使用的是TCP/IP协议<br>3.应用场景举例:客户端发送数据，服务端接受并显示控制台<br>4.基于Socket的TCP编程</p><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220814155927079.png" alt="image-20220814155927079"></p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><blockquote><ol><li>编写个服务器端，和一个客户端</li><li>服务器端在 9999端口监听</li><li>客户端连接到服务器端，发送”hello, server”，然后退出</li><li>服务器端接收到客户端发送的信息，输出，并退出</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP01Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//思路</span>    <span class="token comment" spellcheck="true">//1. 在本机 的 9999 端口监听, 等待连接</span>    <span class="token comment" spellcheck="true">// 细节: 要求在本机没有其它服务在监听 9999</span>    <span class="token comment" spellcheck="true">// 细节：这个 ServerSocket 可以通过 accept() 返回多个 Socket[多个客户端连接服务器的并发]</span>    ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端，在 9999 端口监听，等待连接.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 当没有客户端连接 9999 端口时，程序会 阻塞, 等待连接</span>    <span class="token comment" spellcheck="true">// 如果有客户端连接，则会返回 Socket 对象，程序继续</span>    Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端 socket ="</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span>    InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4. IO 读取</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据读取到的实际长度，显示内容. </span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5.关闭流和 socket</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP01Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//思路</span>    <span class="token comment" spellcheck="true">//1. 连接服务端 (ip , 端口）</span>    <span class="token comment" spellcheck="true">//解读: 连接本机的 9999 端口, 如果连接成功，返回 Socket 对象</span>    Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 socket 返回="</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span>    <span class="token comment" spellcheck="true">// 得到 和 socket 对象关联的输出流对象</span>    OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3. 通过输出流，写入数据到 数据通道</span>    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello, server"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4. 关闭流对象和 socket, 必须关闭</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端退出....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>1.编写一个服务端，和一一个客户端<br>2.服务器端在9999端口监听<br>3.客户端连接到服务端，发送”hello, server” ,并接收服务器端回发的<br>“hello,client”,再退出<br>4.服务器端接收到客户端发送的信息，输出，并发送”hello, client”, 再退出</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP02Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//思路</span>    <span class="token comment" spellcheck="true">//1. 在本机 的 9999 端口监听, 等待连接</span>    <span class="token comment" spellcheck="true">// 细节: 要求在本机没有其它服务在监听 9999</span>    <span class="token comment" spellcheck="true">// 细节：这个 ServerSocket 可以通过 accept() 返回多个 Socket[多个客户端连接服务器的并发]</span>    ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端，在 9999 端口监听，等待连接.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 当没有客户端连接 9999 端口时，程序会 阻塞, 等待连接</span>    <span class="token comment" spellcheck="true">// 如果有客户端连接，则会返回 Socket 对象，程序继续</span>    Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端 socket ="</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span>    InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4. IO 读取</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据读取到的实际长度，显示内容. </span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5. 获取 socket 相关联的输出流</span>    OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello, client"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置结束标记</span>    socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//6.关闭流和 socket</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP02Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//思路</span>    <span class="token comment" spellcheck="true">//1. 连接服务端 (ip , 端口）</span>    <span class="token comment" spellcheck="true">//解读: 连接本机的 9999 端口, 如果连接成功，返回 Socket 对象</span>    Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 socket 返回="</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span>    <span class="token comment" spellcheck="true">// 得到 和 socket 对象关联的输出流对象</span>    OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3. 通过输出流，写入数据到 数据通道</span>    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello, server"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置结束标记</span>    socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4. 获取和 socket 关联的输入流. 读取数据(字节)，并显示</span>    InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//5. 关闭流对象和 socket, 必须关闭</span>    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端退出....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>1.编写一 个服务端，和一个客户端<br>2.服务端在9999端口监听<br>3.客户端连接到服务端， 发送”hello, server” ，并接收服务端回发的”hello,client”, 再退出<br>4.服务端接收到客户端发送的信息，输出，并发送”hello, client”,再退出</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP03Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//思路</span>        <span class="token comment" spellcheck="true">//1. 在本机 的 9999 端口监听, 等待连接</span>        <span class="token comment" spellcheck="true">// 细节: 要求在本机没有其它服务在监听 9999</span>        <span class="token comment" spellcheck="true">// 细节：这个 ServerSocket 可以通过 accept() 返回多个 Socket[多个客户端连接服务器的并发]</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端，在 9999 端口监听，等待连接.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 当没有客户端连接 9999 端口时，程序会 阻塞, 等待连接</span>        <span class="token comment" spellcheck="true">// 如果有客户端连接，则会返回 Socket 对象，程序继续</span>        Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端 socket ="</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">//3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span>        InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. IO 读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span>        <span class="token comment" spellcheck="true">//5. 获取 socket 相关联的输出流</span>        OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用字符输出流的方式回复信息</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello client 字符流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 插入一个换行符，表示回复内容的结束</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意需要手动的 flush</span>        <span class="token comment" spellcheck="true">//6.关闭流和 socket</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketTCP03Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//思路</span>        <span class="token comment" spellcheck="true">//1. 连接服务端 (ip , 端口）</span>        <span class="token comment" spellcheck="true">//解读: 连接本机的 9999 端口, 如果连接成功，返回 Socket 对象</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 socket 返回="</span> <span class="token operator">+</span> socket<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span>        <span class="token comment" spellcheck="true">// 得到 和 socket 对象关联的输出流对象</span>        OutputStream outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello, server 字符流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用 readLine()!!!!</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道</span>        <span class="token comment" spellcheck="true">//4. 获取和 socket 关联的输入流. 读取数据(字符)，并显示</span>        InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 关闭流对象和 socket, 必须关闭</span>        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭外层流</span>        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端退出....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>1.编写一个服务端，和一个客户端<br>2.服务器端在8888端口监听<br>3.客户端连接到服务端，发送- -张图片e:l\qie.png<br>4.服务器端接收到客户端发送的图片，保存到src下，发送”收到图片”再退出<br>5.客户端接收到服务端发送的”收到图片”，再退出<br>6.该程序要求使用StreamUtils.java, 我们直接使用</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 功能：将输入流转换成 byte[]    * @param is    * @return    * @throws Exception    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">streamToByteArray</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        ByteArrayOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建输出流对象</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * 功能：将 InputStream 转换成 String    * @param is    * @return    * @throws Exception    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">streamToString</span><span class="token punctuation">(</span>InputStream is<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder builder<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String line<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当读取到 null 时，就表示结束</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPFileUploadServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 服务端在本机监听 8888 端口</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端在 8888 端口监听...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 等待连接</span>        Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 读取客户端发送的数据</span>        <span class="token comment" spellcheck="true">// 通过 Socket 得到输入流</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> StreamUtils<span class="token punctuation">.</span><span class="token function">streamToByteArray</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 将得到 bytes 数组，写入到指定的路径，就得到一个文件了</span>        String destFilePath <span class="token operator">=</span> <span class="token string">"src\\abc.mp4"</span><span class="token punctuation">;</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向客户端回复 "收到图片"</span>        <span class="token comment" spellcheck="true">// 通过 socket 获取到输出流(字符)</span>        BufferedWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"收到图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把内容刷新到数据通道</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置写入结束标记</span>        <span class="token comment" spellcheck="true">//关闭其他资源</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPFileUploadClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端连接服务端 8888，得到 Socket 对象</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建读取磁盘文件的输入流</span>        <span class="token comment" spellcheck="true">//String filePath = "e:\\qie.png";</span>        String filePath <span class="token operator">=</span> <span class="token string">"e:\\abc.mp4"</span><span class="token punctuation">;</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//bytes 就是 filePath 对应的字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> StreamUtils<span class="token punctuation">.</span><span class="token function">streamToByteArray</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 socket 获取到输出流, 将 bytes 数据发送给服务端</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将文件对应的字节数组的内容，写入到数据通道</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置写入数据的结束标记</span>        <span class="token comment" spellcheck="true">//=====接收从服务端回复的消息=====</span>        InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用 StreamUtils 的方法，直接将 inputStream 读取到的内容 转成字符串</span>        String s <span class="token operator">=</span> StreamUtils<span class="token punctuation">.</span><span class="token function">streamToString</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭相关的流</span>        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h3><ol><li>netstat -an可以查看当前主机网络情况，包括端口监听情况和网络连接情况</li><li>netstat -an | more可以分页显示</li><li>要求在dos控制台下执行win+r<br>说明:<br>(1) Listening表示某个端口在监听<br>(2)如果有一个外部程序(客户端)连接到该端口，就会显示条连接信息<br>(3)可以输入ctrl + C退出指令</li></ol><h3 id="TCP-网络通讯不为人知的秘密"><a href="#TCP-网络通讯不为人知的秘密" class="headerlink" title="TCP 网络通讯不为人知的秘密"></a>TCP 网络通讯不为人知的秘密</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220814222018007.png" alt="image-20220814222018007"></p><ol><li>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通讯的，这个端口是TCP/IP来分配的，是不确定的， 是随机的.</li><li>示意图</li><li>程序验证+ netstat</li></ol><h2 id="UDP-网络通信编程-了解"><a href="#UDP-网络通信编程-了解" class="headerlink" title="UDP 网络通信编程[了解]"></a>UDP 网络通信编程[了解]</h2><ol><li>类DatagramSocket和DatagramPacket[数据包/数据报]实现了基于UDP协议网络程序。</li><li>UDP数据报通过数据报套接字DatagramSocket发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接</li></ol><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>1.核心的两个类/对象DatagramSocket与DatagramPacket<br>2.建立发送端，接收端(没有服务端和客户端概念)<br>3.发送数据前，建立数据包/报DatagramPacket对象<br>4.调用DatagramSocket的发送、 接收方法<br>5.关闭DatagramSocket</p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>1.编写一个接收端A,和一个发送端B<br>2.接收端A在9999端口等待接收数据(receive)<br>3.发送端B向接收端A发送数据”hello ,明天吃火锅~”<br>4.接收端A接收到发送端B发送的数据，回复”好的，明天见”，再退出<br>5.发送端接收回复的数据,再退出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPReceiverA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建一个 DatagramSocket 对象，准备在 9999 接收数据</span>        DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 构建一个 DatagramPacket 对象，准备接收数据</span>        <span class="token comment" spellcheck="true">// 在前面讲解 UDP 协议时，老师说过一个数据包最大 64k</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span>        <span class="token comment" spellcheck="true">// 填充到 packet 对象</span>        <span class="token comment" spellcheck="true">//老师提示: 当有数据包发送到 本机的 9999 端口时，就会接收到数据</span>        <span class="token comment" spellcheck="true">// 如果没有数据包发送到 本机的 9999 端口, 就会阻塞等待. System.out.println("接收端 A 等待接收数据..");</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 可以把 packet 进行拆包，取出数据，并显示. int length = packet.getLength();//实际接收到的数据字节长度</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收到数据</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//===回复信息给 B 端</span>        <span class="token comment" spellcheck="true">//将需要发送的数据，封装到 DatagramPacket 对象</span>        data <span class="token operator">=</span> <span class="token string">"好的, 明天见"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//说明: 封装的 DatagramPacket 对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span>        packet <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.12.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送</span>        <span class="token comment" spellcheck="true">//5. 关闭资源</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A 端退出..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPSenderB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建 DatagramSocket 对象，准备在 9998 端口 接收数据</span>        DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 将需要发送的数据，封装到 DatagramPacket 对象</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">"hello 明天吃火锅~"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">//说明: 封装的 DatagramPacket 对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span>        DatagramPacket packet <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.12.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.=== 接收从 A 端回复的信息</span>        <span class="token comment" spellcheck="true">//(1) 构建一个 DatagramPacket 对象，准备接收数据</span>        <span class="token comment" spellcheck="true">// 在前面讲解 UDP 协议时，老师说过一个数据包最大 64k</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2) 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span>        <span class="token comment" spellcheck="true">// 填充到 packet 对象</span>        <span class="token comment" spellcheck="true">//老师提示: 当有数据包发送到 本机的 9998 端口时，就会接收到数据</span>        <span class="token comment" spellcheck="true">// 如果没有数据包发送到 本机的 9998 端口, 就会阻塞等待. socket.receive(packet);</span>        <span class="token comment" spellcheck="true">//(3) 可以把 packet 进行拆包，取出数据，并显示. int length = packet.getLength();//实际接收到的数据字节长度</span>        data <span class="token operator">=</span> packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收到数据</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭资源</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 端退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="章反射-reflection"><a href="#章反射-reflection" class="headerlink" title="章反射(reflection)"></a>章反射(reflection)</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionQuestion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//根据配置文件 re.properties 指定信息, 创建 Cat 对象并调用方法 hi</span>        <span class="token comment" spellcheck="true">//老韩回忆</span>        <span class="token comment" spellcheck="true">//传统的方式 new 对象 -》 调用方法</span>        <span class="token comment" spellcheck="true">// Cat cat = new Cat();</span>        <span class="token comment" spellcheck="true">// cat.hi(); ===> cat.cry() 修改源码. //我们尝试做一做 -> 明白反射</span>        <span class="token comment" spellcheck="true">//1. 使用 Properties 类, 可以读写配置文件</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\re.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String classfullpath <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"classfullpath"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"com.hspedu.Cat" String methodName = properties.get("method").toString();//"hi" System.out.println("classfullpath=" + classfullpath);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method="</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 创建对象 , 传统的方法，行不通 =》 反射机制</span>        <span class="token comment" spellcheck="true">//new classfullpath();</span>        <span class="token comment" spellcheck="true">//3. 使用反射机制解决</span>        <span class="token comment" spellcheck="true">//(1) 加载类, 返回 Class 类型的对象 cls</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classfullpath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2) 通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span>        Object o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o 的运行类型="</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//运行类型</span>        <span class="token comment" spellcheck="true">//(3) 通过 cls 得到你加载的类 com.hspedu.Cat 的 methodName"hi" 的方法对象</span>        <span class="token comment" spellcheck="true">// 即：在反射中，可以把方法视为对象（万物皆对象）</span>        Method method1 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(4) 通过 method1 调用方法: 即通过方法对象来实现调用方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><ol><li>反射机制允许程序在执行期借助于ReflectionAPI取得任何类的内部信息(比如成员变量，构造器，成员方法等等)，并能操作对象的属性及方法。反射在设计模式和框架底层都会用到</li><li>加载完类之后，在堆中就产生了一个Class类型的对象(一个类只有一个Class对象)，这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个Class对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为:反射</li></ol><h3 id="Java-反射机制原理示意图"><a href="#Java-反射机制原理示意图" class="headerlink" title="Java 反射机制原理示意图!!!"></a>Java 反射机制原理示意图!!!</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220817094915923.png" alt="image-20220817094915923"></p><h3 id="Java-反射机制可以完成"><a href="#Java-反射机制可以完成" class="headerlink" title="Java 反射机制可以完成"></a>Java 反射机制可以完成</h3><p>1.在运行时判断任意一个对象所属的类<br>2.在运行时构造任意一个类的对象<br>3.在运行时得到任意一个类所具有的成员变量和方法<br>4.在运行时调用任意一个对象的成员变量和方法<br>5.生成动态代理</p><h3 id="反射相关的主要类"><a href="#反射相关的主要类" class="headerlink" title="反射相关的主要类"></a>反射相关的主要类</h3><ol><li>java.lang.Class:代表一个类， Class对象表示某 个类加载后在堆中的对象</li><li>java.lang.reflect.Method:代表类的方法，Method对象表示某个类的方法</li><li>java.lang.reflect.Field:代表类的成员变量，Field对象表示某个类的成员变量</li><li>java.lang.reflect.Constructor:代表类的构造方法，Constructor对象表示构造器</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reflection01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 使用 Properties 类, 可以读写配置文件</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\re.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String classfullpath <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"classfullpath"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//"com.hspedu.Cat" String methodName = properties.get("method").toString();//"hi"</span>        <span class="token comment" spellcheck="true">//2. 使用反射机制解决</span>        <span class="token comment" spellcheck="true">//(1) 加载类, 返回 Class 类型的对象 cls</span>        Class <span class="token class-name">cls</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classfullpath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2) 通过 cls 得到你加载的类 com.hspedu.Cat 的对象实例</span>        Object o <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o 的运行类型="</span> <span class="token operator">+</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//运行类型</span>        <span class="token comment" spellcheck="true">//(3) 通过 cls 得到你加载的类 com.hspedu.Cat 的 methodName"hi" 的方法对象</span>        <span class="token comment" spellcheck="true">// 即：在反射中，可以把方法视为对象（万物皆对象）</span>        Method method1 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(4) 通过 method1 调用方法: 即通过方法对象来实现调用方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//传统方法 对象.方法() , 反射机制 方法.invoke(对象)</span>        <span class="token comment" spellcheck="true">//java.lang.reflect.Field: 代表类的成员变量, Field 对象表示某个类的成员变量</span>        <span class="token comment" spellcheck="true">//得到 name 字段</span>        <span class="token comment" spellcheck="true">//getField 不能得到私有的属性</span>        Field nameField <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传统写法 对象.成员变量 , 反射 : 成员变量对象.get(对象)</span>        <span class="token comment" spellcheck="true">//java.lang.reflect.Constructor: 代表类的构造方法, Constructor 对象表示构造器</span>        Constructor constructor <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//()中可以指定构造器参数类型, 返回无参构造器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Cat()</span>        Constructor constructor2 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里老师传入的 String.class 就是 String 类的</span>        Class 对象        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Cat(String name)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="反射优点和缺点"><a href="#反射优点和缺点" class="headerlink" title="反射优点和缺点"></a>反射优点和缺点</h3><ol><li>优点:可以动态的创建和使用对象(也是框架底层核心)，使用灵活没有反射机制，框架技术就失去底层支撑。</li><li>缺点:使用反射基本是解释执行，对执行速度有影响.</li></ol><h3 id="反射调用优化-关闭访问检查"><a href="#反射调用优化-关闭访问检查" class="headerlink" title="反射调用优化-关闭访问检查"></a>反射调用优化-关闭访问检查</h3><ol><li>Method和Field、 Constructor对象都有setAccessible(方法</li><li>setAccessible作用是启动和禁用访问安全检查的开关</li><li>参数值为true表示反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查</li></ol><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><ol><li>Class也是类，因此也继承Object类 [类图]</li><li>Class类对象不是new出来的，而是系统创建的[演示]</li><li>对于某个类的Class类对象，在内存中只有一份， 因为类只加载次[演示]</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class对象可以完整地得到一个类的完整结构，通过一系列API</li><li>Class对象是存放在堆的</li><li>.类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据(包括方法代码，变量名，方法名，访问权限等等) <a href="https://www.zhihu.com/question/38496907">https://www.zhihu.com/question/38496907</a></li></ol><h3 id="Class-类的常用方法"><a href="#Class-类的常用方法" class="headerlink" title="Class 类的常用方法"></a>Class 类的常用方法</h3><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newlnstance0</td><td>调用缺省构造函数，返回该Class对象的一个实例</td></tr><tr><td>getName0</td><td>返回此Class对象所表示的实体(类、接口、数组类、基本类型等)名称</td></tr><tr><td>Class [] getInterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader)</td><td>返回该类的类加载器</td></tr><tr><td>Class getSuperclass()</td><td>返回表示此Class所表示的实体的超类的Class</td></tr><tr><td>Constructor[ ] getConstructorsO</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Field[ getDeclaredFieldsQ</td><td>返回Field对象的个数组</td></tr><tr><td>Method getMethod(Strinq name.Class m DaramTvnes)</td><td>返回个Method对象，此对象的形参类型为paramType</td></tr></tbody></table><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Class02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        String classAllPath <span class="token operator">=</span> <span class="token string">"com.hspedu.Car"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1 . 获取到 Car 类 对应的 Class 对象</span>        <span class="token comment" spellcheck="true">//&lt;?> 表示不确定的 Java 类型</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classAllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 输出 cls</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示 cls 对象, 是哪个类的 Class 对象 com.hspedu.Car</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出 cls 运行类型 java.lang.Class</span>        <span class="token comment" spellcheck="true">//3. 得到包名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包名</span>        <span class="token comment" spellcheck="true">//4. 得到全类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 通过 cls 创建对象实例</span>        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//car.toString()</span>        <span class="token comment" spellcheck="true">//6. 通过反射获取属性 brand</span>        Field brand <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"brand"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//宝马</span>        <span class="token comment" spellcheck="true">//7. 通过反射给属性赋值</span>        brand<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>car<span class="token punctuation">,</span> <span class="token string">"奔驰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brand<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//奔驰</span>        <span class="token comment" spellcheck="true">//8 我希望大家可以得到所有的属性(字段)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======所有的字段属性===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field f <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//名称</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="获取-Class-类对象"><a href="#获取-Class-类对象" class="headerlink" title="获取 Class 类对象"></a>获取 Class 类对象</h2><ol><li>前提:已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName(获取，可能抛出ClassNotFoundException,实例: Class cls1 =Class.forName( “java.lang.Cat” );应用场景:多用于配置文件，读取类全路径，加载类.</li><li>前提:若已知具体的类，通过类的class获取，该方式最为安全可靠，程序性能<br>最高实例: Class cls2 = Cat.class;<br>应用场景:多用于参数传递，比如通过反射得到对应构造器对象.</li><li>前提:已知某个类的实例，调用该实例的getClass(方法获取Class对象，实例<br>Class clazz =对象.getClass();//运行类型<br>应用场景:通过创建好的对象，获取Class对象.</li><li>其他方式<br>ClassLoader cI =对象.getClass).getClassLoader(;<br>Class clazz4 = cl.loadClass( “类的全类名”);</li><li>基本数据(int, char, boolean,float,double,byte,long,short) 按如下方式得到Class类<br>对象<br>Class cls =基本数据类型.class</li><li>基本数据类型对应的包装类，可以通过.TYPE得到Class类对象<br>Class cls =包装类.TYPE</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClass_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. Class.forName</span>        String classAllPath <span class="token operator">=</span> <span class="token string">"com.hspedu.Car"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过读取配置文件获取</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classAllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 类名.class , 应用场景: 用于参数传递</span>        Class <span class="token class-name">cls2</span> <span class="token operator">=</span> Car<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 对象.getClass(), 应用场景，有对象实例</span>        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">cls3</span> <span class="token operator">=</span> car<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 通过类加载器【4 种】来获取到类的 Class 对象</span>        <span class="token comment" spellcheck="true">//(1)先得到类加载器 car</span>        ClassLoader classLoader <span class="token operator">=</span> car<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//(2)通过类加载器得到 Class 对象</span>        Class <span class="token class-name">cls4</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>classAllPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cls1 , cls2 , cls3 , cls4 其实是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls4<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 基本数据(int, char,boolean,float,double,byte,long,short) 按如下方式得到 Class 类对象</span>        Class<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerClass <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>Character<span class="token operator">></span> characterClass <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> booleanClass <span class="token operator">=</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int</span>        <span class="token comment" spellcheck="true">//6. 基本数据类型对应的包装类，可以通过 .TYPE 得到 Class 类对象</span>        Class<span class="token operator">&lt;</span>Integer<span class="token operator">></span> type1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>Character<span class="token operator">></span> type2 <span class="token operator">=</span> Character<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//其它包装类 BOOLEAN, DOUBLE, LONG,BYTE 等待</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerClass<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//?</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//?</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="哪些类型有-Class-对象"><a href="#哪些类型有-Class-对象" class="headerlink" title="哪些类型有 Class 对象"></a>哪些类型有 Class 对象</h2><ol><li>外部类，成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface :接口</li><li>数组</li><li>enum:枚举</li><li>annotation :注解</li><li>基本数据类型</li><li>void</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllTypeClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>String<span class="token operator">></span> cls1 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外部类</span>        Class<span class="token operator">&lt;</span>Serializable<span class="token operator">></span> cls2 <span class="token operator">=</span> Serializable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口</span>        Class<span class="token operator">&lt;</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> cls3 <span class="token operator">=</span> Integer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组</span>        Class<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> cls4 <span class="token operator">=</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二维数组</span>        Class<span class="token operator">&lt;</span>Deprecated<span class="token operator">></span> cls5 <span class="token operator">=</span> Deprecated<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注解</span>        <span class="token comment" spellcheck="true">//枚举</span>        Class<span class="token operator">&lt;</span>Thread<span class="token punctuation">.</span>State<span class="token operator">></span> cls6 <span class="token operator">=</span> Thread<span class="token punctuation">.</span>State<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>Long<span class="token operator">></span> cls7 <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本数据类型</span>        Class<span class="token operator">&lt;</span>Void<span class="token operator">></span> cls8 <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//void 数据类型</span>        Class<span class="token operator">&lt;</span>Class<span class="token operator">></span> cls9 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls7<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cls9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载。</p><ol><li>静态加载:编译时加载相关的类，如果没有则报错，依赖性太强</li><li>动态加载:运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低了依赖性</li></ol><h2 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h2><ol><li>当创建对象时(new) //静态加载</li><li>当子类被加载时，父类也加载//静态加载</li><li>调用类中的静态成员时//静态加载</li><li>通过反射//动态加载</li></ol><h3 id="类加载过程图"><a href="#类加载过程图" class="headerlink" title="类加载过程图"></a>类加载过程图</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220817172618141.png" alt="image-20220817172618141"></p><h3 id="类加载各阶段完成任务"><a href="#类加载各阶段完成任务" class="headerlink" title="类加载各阶段完成任务"></a>类加载各阶段完成任务</h3><p><img src="C:\Users\玄兔啊\AppData\Roaming\Typora\typora-user-images\image-20220817172638272.png" alt="image-20220817172638272"></p><h3 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h3><p>JVM在该阶段的主要目的是将字节码从不同的数据源(可能是class文件、也可能是jar包，甚至网络)转化为二进制字节流加载到内存中，并生成一个代表该类的</p><h3 id="连接阶段-验证"><a href="#连接阶段-验证" class="headerlink" title="连接阶段-验证"></a>连接阶段-验证</h3><ol><li>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</li><li>包括:文件格式验证(是否以魔数oxcafebabe开头)、 元数据验证、字节码验证和符号引用验证[举例说明]</li><li>可以考虑使用-Xverify:none参数来关闭大部分的类验证措施，缩短虚拟机类加载的时间。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoad02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性-成员变量-字段</span>    <span class="token comment" spellcheck="true">//老韩分析类加载的链接阶段-准备 属性是如何处理</span>    <span class="token comment" spellcheck="true">//1. n1 是实例属性, 不是静态变量，因此在准备阶段，是不会分配内存</span>    <span class="token comment" spellcheck="true">//2. n2 是静态变量，分配内存 n2 是默认初始化 0 ,而不是 20</span>    <span class="token comment" spellcheck="true">//3. n3 是 static final 是常量, 他和静态变量不一样, 因为一旦赋值就不变 n3 = 30</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="连接阶段-解析"><a href="#连接阶段-解析" class="headerlink" title="连接阶段-解析"></a>连接阶段-解析</h3><p>虚拟机将常量池内的符号引用替换为直接引用的过程。</p><h3 id="Initialization（初始化"><a href="#Initialization（初始化" class="headerlink" title="Initialization（初始化)"></a>Initialization（初始化)</h3><ol><li>到初始化阶段，才真正开始执行类中定义的Java程序代码，此阶段是执行&lt; clinit&gt; ()方法的过程。</li><li><clinit>()方法是由编译器按语句在源文件中出现的顺序，依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句，并进行合井。[举例说明<br>ClassLoad03.java]</clinit></li><li>虚拟机会保证一一个 类的&lt; clinit&gt; 0方法在多线程环境中被正确地加锁、同步如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit> ()方法，其他线程都需要阻塞等待，直到活动线程执行&lt; clinit&gt; 0)方法完毕[debug源码]</clinit></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoad03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//老韩分析</span>        <span class="token comment" spellcheck="true">//1. 加载 B 类，并生成 B 的 class 对象</span>        <span class="token comment" spellcheck="true">//2. 链接 num = 0</span>        <span class="token comment" spellcheck="true">//3. 初始化阶段</span>        <span class="token comment" spellcheck="true">// 依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句,并合并</span>        <span class="token comment" spellcheck="true">/*        clinit() {        System.out.println("B 静态代码块被执行");        //num = 300;        num = 100;        }        合并: num = 100        */</span>        <span class="token comment" spellcheck="true">//new B();//类加载</span>        <span class="token comment" spellcheck="true">//System.out.println(B.num);//100, 如果直接使用类的静态属性，也会导致类的加载</span>        <span class="token comment" spellcheck="true">//看看加载类的时候，是有同步机制控制</span>        <span class="token comment" spellcheck="true">/*        protected Class&lt;?> loadClass(String name, boolean resolve)        throws ClassNotFoundException        {        //正因为有这个机制，才能保证某个类在内存中, 只有一份 Class 对象        synchronized (getClassLoadingLock(name)) {        //.... }        }        */</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 静态代码块被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B() 构造器被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="通过反射获取类的结构信息"><a href="#通过反射获取类的结构信息" class="headerlink" title="通过反射获取类的结构信息"></a>通过反射获取类的结构信息</h2><h3 id="第一组-java-lang-Class-类"><a href="#第一组-java-lang-Class-类" class="headerlink" title="第一组: java.lang.Class 类"></a>第一组: java.lang.Class 类</h3><ol><li>getName:获取全类名</li><li>getSimpleName:获取简单类名</li><li>getFields:获取所有public修饰的属性，包含本类以及父类的</li><li>getDeclaredFields:获取本类中所有属性</li><li>getMethods:获取所有public修饰的方法，包含本类以及父类的</li><li>getDeclaredMethods:获取本类中所有方法</li><li>getConstructors:获取本类所有public修饰的构造器</li><li>getDeclaredConstructors:获取本类中所有构造器</li><li>getPackage:以Package形式返回包信息</li><li>getSuperClass:以Class形式返回父类信息</li><li>getInterfaces:以Class[]形式返回接口信息</li><li>getAnnotations:以Annotation[ 形式返回注解信息</li></ol><h3 id="第二组-java-lang-reflect-Field-类"><a href="#第二组-java-lang-reflect-Field-类" class="headerlink" title="第二组: java.lang.reflect.Field 类"></a>第二组: java.lang.reflect.Field 类</h3><ol><li>getModifiers:以int形式返回修饰符<br>[说明:默认修饰符是0，public 是1 , private是2，protected是4,<br>static是8，final是16]，public(1) + static (8) = 9</li><li>getType:以Class形式返回类型</li><li>getName:返回属性名</li></ol><h3 id="第三组-java-lang-reflect-Method-类"><a href="#第三组-java-lang-reflect-Method-类" class="headerlink" title="第三组: java.lang.reflect.Method 类"></a>第三组: java.lang.reflect.Method 类</h3><ol><li>getModifiers:以int形式返回修饰符<br>说明:默认修饰符是0，public 是1，private是2 , protected是4,<br>static是8，final 是16]</li><li>getReturnType:以Class形式获取返回类型</li><li>getName:返回方法名</li><li>getParameterTypes:以Class[返回参数类型数组</li></ol><h3 id="第四组-java-lang-reflect-Constructor-类"><a href="#第四组-java-lang-reflect-Constructor-类" class="headerlink" title="第四组: java.lang.reflect.Constructor 类"></a>第四组: java.lang.reflect.Constructor 类</h3><ol><li>getModifiers:以int形式返回修饰符</li><li>getName:返回构造器名(全类名)</li><li>getParameterTypes:以Class[返回参数类型数组</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">api_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> personCls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.hspedu.reflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getDeclaredFields:获取本类中所有属性</span>        <span class="token comment" spellcheck="true">//规定 说明: 默认修饰符 是 0 ， public 是 1 ，private 是 2 ，protected 是 4 , static 是 8 ，final 是 16</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类中所有属性="</span> <span class="token operator">+</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span> <span class="token string">" 该属性的修饰符值="</span> <span class="token operator">+</span> declaredField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span> <span class="token string">" 该属性的类型="</span> <span class="token operator">+</span> declaredField<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclaredMethods:获取本类中所有方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类中所有方法="</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" 该方法的访问修饰符值="</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" 该方法返回类型"</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出当前这个方法的形参数组情况</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterType <span class="token operator">:</span> parameterTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该方法的形参类型="</span> <span class="token operator">+</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclaredConstructors:获取本类中所有构造器</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> declaredConstructor <span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类中所有构造器="</span> <span class="token operator">+</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里老师只是输出名</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterType <span class="token operator">:</span> parameterTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该构造器的形参类型="</span> <span class="token operator">+</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//第一组方法 API</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">api_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> personCls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.hspedu.reflection.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//getName:获取全类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personCls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//com.hspedu.reflection.Person</span>        <span class="token comment" spellcheck="true">//getSimpleName:获取简单类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personCls<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person</span>        <span class="token comment" spellcheck="true">//getFields:获取所有 public 修饰的属性，包含本类以及父类的</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//增强 for</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类以及父类的属性="</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclaredFields:获取本类中所有属性</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类中所有属性="</span> <span class="token operator">+</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getMethods:获取所有 public 修饰的方法，包含本类以及父类的</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类以及父类的方法="</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclaredMethods:获取本类中所有方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类中所有方法="</span> <span class="token operator">+</span> declaredMethod<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getConstructors: 获取所有 public 修饰的构造器，包含本类</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类的构造器="</span> <span class="token operator">+</span> constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getDeclaredConstructors:获取本类中所有构造器</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> declaredConstructor <span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本类中所有构造器="</span> <span class="token operator">+</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里老师只是输出名</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getPackage:以 Package 形式返回 包信息</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personCls<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//com.hspedu.reflection</span>        <span class="token comment" spellcheck="true">//getSuperClass:以 Class 形式返回父类信息</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> superclass <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的 class 对象="</span> <span class="token operator">+</span> superclass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">//getInterfaces:以 Class[]形式返回接口信息</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> anInterface <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口信息="</span> <span class="token operator">+</span> anInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//getAnnotations:以 Annotation[] 形式返回注解信息</span>        Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> personCls<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Annotation annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注解信息="</span> <span class="token operator">+</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注解</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String hobby<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">,</span> IB <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 + 8 = 12</span>    String job<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> sal<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造器</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//私有的</span>    <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> String <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><ol><li>方式一:调用类中的public修饰的无参构造器</li><li>方式二:调用类中的指定构造器</li><li>Class类相关方法<br>newInstance :调用类中的无参构造器，获取对应类的对象<br>getConstructor(Cass.clazz):根据参数列表，获取对应的public构造器对象<br>getDecalaredConstructor(Cas…clazz):根据参数列表，获取对应的所有构造器对象</li><li>Constructor类相关方法<br>setAccessible:暴破<br>newlnstance(bijec…obj):调用构造器</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflecCreateInstance</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 先获取到 User 类的 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> userClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.hspedu.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 通过 public 的无参构造器创建实例</span>        Object o <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 通过 public 的有参构造器创建实例</span>        <span class="token comment" spellcheck="true">/*        constructor 对象就是        public User(String name) {//public 的有参构造器        this.name = name;        }        */</span>        <span class="token comment" spellcheck="true">//3.1 先得到对应构造器</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.2 创建实例，并传入实参</span>        Object hsp <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"hsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hsp="</span> <span class="token operator">+</span> hsp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 通过非 public 的有参构造器创建实例</span>        <span class="token comment" spellcheck="true">//4.1 得到 private 的构造器对象</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor1 <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.2 创建实例</span>        <span class="token comment" spellcheck="true">//暴破【暴力破解】 , 使用反射可以访问 private 构造器/方法/属性, 反射面前，都是纸老虎</span>        constructor1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object user2 <span class="token operator">=</span> constructor1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"张三丰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user2="</span> <span class="token operator">+</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//User 类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"韩顺平教育"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//无参 public</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//public 的有参构造器</span>    this<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//private 有参构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User [age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><h3 id="访问属性-ReflecAccessProperty-jav"><a href="#访问属性-ReflecAccessProperty-jav" class="headerlink" title="访问属性 ReflecAccessProperty.jav"></a>访问属性 ReflecAccessProperty.jav</h3><ol><li>根据属性名获取Field对象<br>Fieldf = clazz对象.getDeclaredField(属性名);</li><li>暴破: f.setAccessible(true); //f是Field</li><li>访问<br>f.set(o,值); //。表示对象<br>sysof(.ge+))//o表示对象</li><li>注意:<br>如果是静态属性，则set和get中的参数o,可以写成null</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflecAccessProperty</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1. 得到 Student 类对应的 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> stuClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.hspedu.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 创建对象</span>        Object o <span class="token operator">=</span> stuClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//o 的运行类型就是 Student</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Student</span>        <span class="token comment" spellcheck="true">//3. 使用反射得到 age 属性对象</span>        Field age <span class="token operator">=</span> stuClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过反射来操作属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回 age 属性的值</span>        <span class="token comment" spellcheck="true">//4. 使用反射操作 name 属性</span>        Field name <span class="token operator">=</span> stuClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对 name 进行暴破, 可以操作 private 属性</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//name.set(o, "老韩");</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"老韩~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为 name 是 static 属性，因此 o 也可以写出 null</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取属性值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取属性值, 要求 name 是 static</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student [age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="访问方法-ReflecAccessMethod-java"><a href="#访问方法-ReflecAccessMethod-java" class="headerlink" title="访问方法 ReflecAccessMethod.java"></a>访问方法 ReflecAccessMethod.java</h3><ol><li>根据方法名和参数列表获取Method方法对象: Method m =clazz.getDeclaredMethod(方法名，xx.class); //得到本类的所有方法</li><li>获取对象: Object o= clazz.newInstance();</li><li>暴破: m.setAccessible(true);</li><li>访问: Object returnValue = m.invoke(o,实参列表);//o就是对象</li><li>注意:如果是静态方法，则invoke的参数o,可以写成nul!</li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflecAccessMethod</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 得到 Boss 类对应的 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> bossCls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.hspedu.reflection.Boss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 创建对象</span>        Object o <span class="token operator">=</span> bossCls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 调用 public 的 hi 方法</span>        <span class="token comment" spellcheck="true">//Method hi = bossCls.getMethod("hi", String.class);//OK</span>        <span class="token comment" spellcheck="true">//3.1 得到 hi 方法对象</span>        Method hi <span class="token operator">=</span> bossCls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//OK</span>        <span class="token comment" spellcheck="true">//3.2 调用</span>        hi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">"韩顺平教育~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 调用 private static 方法</span>        <span class="token comment" spellcheck="true">//4.1 得到 say 方法对象</span>        Method say <span class="token operator">=</span> bossCls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.2 因为 say 方法是 private, 所以需要暴破，原理和前面讲的构造器和属性一样</span>        say<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.3 因为 say 方法是 static 的，还可以这样调用 ，可以传入 null</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 在反射中，如果方法有返回值，统一返回 Object , 但是他运行类型和方法定义的返回类型一致</span>        Object reVal <span class="token operator">=</span> say<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reVal 的运行类型="</span> <span class="token operator">+</span> reVal<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String</span>        <span class="token comment" spellcheck="true">//在演示一个返回的案例</span>        Method m1 <span class="token operator">=</span> bossCls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object reVal2 <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"reVal2 的运行类型="</span> <span class="token operator">+</span> reVal2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Monster</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Monster</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Boss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//构造器</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Monster <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Monster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">say</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> String s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//静态方法</span>        <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通 public 方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></object></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;循环语句&quot;&gt;&lt;a href=&quot;#循环语句&quot; class=&quot;headerlink&quot; title=&quot;循环语句&quot;&gt;&lt;/a&gt;循环语句&lt;/h1&gt;&lt;h2 id=&quot;switch的一些细节&quot;&gt;&lt;a href=&quot;#switch的一些细节&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>候选码、主码、全码、外码、主属性、主键、主关键字、非主属性清晰总结</title>
    <link href="https://chrimeta-tu.top/archives/27626756.html"/>
    <id>https://chrimeta-tu.top/archives/27626756.html</id>
    <published>2022-06-28T11:15:00.000Z</published>
    <updated>2022-06-28T11:24:20.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>键字=码字，所以 主键=主码=主关键字，候选键=候选码=候选关键字.</p></blockquote><ol><li><strong>超码</strong>：也叫超键,码是可以确定一个元组的所有信息的属性名或属性组</li></ol><blockquote><p>例如在 { a, b, c, d } 中，</p><p>假设知道 a 的值就能确定 a, b, c, d 的值，</p><p>假设知道 c, d 的值就可以确定 a, b, c, d 的值，</p><p>那么 { a } 就是码，{ c, d } 就是码。</p><p>并且 { a, b }, { a, c }, { a, b, c }, { a, b, c, d } 等也都是码，因为它们也可以确定一个元组的所有值，即使很多余。  </p></blockquote><ol start="2"><li><strong>候选码:</strong> 也叫候选键,候选码的真子集中不存在码，候选码可以有多个。</li></ol><blockquote><p>就上面的例子而言，{ a } 是候选码，{ c, d } 是候选码，因为它们的真子集中不存在码。  </p><p>而诸如 { a, b } 并不是候选码，因为它的真子集中含有 { a }， 且 { a } 是码。</p></blockquote><ol start="3"><li><strong>主码:</strong> 也叫主键,主码就是主键的意思，主码是任意一个候选码。</li></ol><blockquote><p>还是上面的例子，主码是候选码 { a }， { c, d } 中的其中一个。</p><p>既可以是 { a }， 也可以是 { c, d }。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Chrimetu/picdemo/img/20220628192236.png"></p><ol start="4"><li><ul><li><p><strong>主属性:</strong> 候选码包含的属性（一个或多个属性）</p></li><li><p><strong>非主属性:</strong> 不包含在候选码中的属性称为非主属性。 非主属性是相对于主属性来定义的。</p></li></ul></li></ol><blockquote><p>上面那个例子，{c,d}是候选码，那么c是一个主属性，d也是一个主属性  </p></blockquote><ol start="5"><li><strong>外键:</strong> 子数据表中出现的父数据表的主键，称为子数据表的外键。</li></ol><blockquote><p>假如我们还有一个教师表，每个教师都有自己的编号，假设老师编号在教师表中是主键，在学生表中它就是外键。</p></blockquote><ol start="6"><li><strong>全码:</strong> 当所有的属性共同构成一个候选码时，这时该候选码为全码。（教师，课程，学生）假如一个教师可以讲授多门课程，某门课程可以有多个教师讲授，学生可以听不同教师讲授的不同课程，那么，要区分关系中的每一个元组，这个关系模式R的候选码应为全部属性构成 （教师、课程、学生），即主码。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;键字=码字，所以 主键=主码=主关键字，候选键=候选码=候选关键字.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;超码&lt;/strong&gt;：也叫超键,码是可以确定一个元组的所有信息的属性名或属性组&lt;/li&gt;
&lt;/ol&gt;
&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>韩小颖先生和张静静女士</title>
    <link href="https://chrimeta-tu.top/archives/29420ab5.html"/>
    <id>https://chrimeta-tu.top/archives/29420ab5.html</id>
    <published>2022-06-28T03:55:55.000Z</published>
    <updated>2022-06-28T04:23:19.963Z</updated>
    
    <content type="html"><![CDATA[<pre><code>System.out.println("Love")</code></pre>]]></content>
    
    
    <summary type="html">我和她的故事</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chrimeta-tu.top/archives/4a17b156.html"/>
    <id>https://chrimeta-tu.top/archives/4a17b156.html</id>
    <published>2022-06-26T15:21:06.295Z</published>
    <updated>2022-06-27T16:37:25.660Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
