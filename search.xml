<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/archives/0.html"/>
      <url>/archives/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="switch的一些细节"><a href="#switch的一些细节" class="headerlink" title="switch的一些细节"></a>switch的一些细节</h2><h3 id="细节一"><a href="#细节一" class="headerlink" title="细节一"></a>细节一</h3><ol><li>表达式数据类型应和case后的常量类型一致</li><li>或者是可以自动转换成可以相互比较的类型，比如输入的是字符，而常量是int</li></ol><pre><code>        char c = 'b';        char c2 = 'c';        switch(c) {            case 'a' :                System.out.println("ok1");                break;            case "hello"  :                System.out.println("ok2");                break;            default :                System.out.println("ok3");        }</code></pre><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><ol><li>switch(表达式)中表达式的返回值必须是：(byte,short,int,char,enum[枚举]，String)</li></ol><pre class=" language-java"><code class="language-java">        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1.1</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2.1</span>  <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="细节三"><a href="#细节三" class="headerlink" title="细节三"></a>细节三</h3><ol><li>case子句中的值必须是常量(1,’a’)或者是常量表达式，而不能是变量</li></ol><pre class=" language-java"><code class="language-java">        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> c  <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="细节4"><a href="#细节4" class="headerlink" title="细节4"></a>细节4</h3><ol><li>default子句是可选的，当没有case时，执行default，如果没有default子句，当没有匹配任何变量时，则没有输出</li></ol><h3 id="细节5"><a href="#细节5" class="headerlink" title="细节5"></a>细节5</h3><ol><li>break语句用来在执行完一个case分支后使程序跳出switch语句块，如果没有写break，程序会顺序执行到switch结尾,除非执行到break</li></ol><h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><blockquote><ol><li>化繁为简</li><li>先死后活</li></ol><p>实现：</p><p>0 + 5 = 5</p><p>1  +4 = 5</p><p>2 + 3 = 5</p><p>3 + 2 = 5</p><p>4 + 1 = 5</p><p>5 + 0 = 5</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForExercise02</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//编写一个main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//化繁为简</span>        <span class="token comment" spellcheck="true">//先死后活 </span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="break的一些细节"><a href="#break的一些细节" class="headerlink" title="break的一些细节"></a>break的一些细节</h2><ol><li>break语句出现在多层嵌套语句块中时，可以通过标签指明要终止的是那一层语句块</li><li>标签的基本使用</li></ol><pre class=" language-java"><code class="language-java">label1<span class="token operator">:</span><span class="token punctuation">{</span>    label2<span class="token operator">:</span><span class="token punctuation">{</span>        label3<span class="token punctuation">{</span>            <span class="token keyword">break</span> lable2        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span> 语句可以指明退出那一层<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>label1 是标签，由程序员指定<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">break</span> 后指定到哪个label就退出到哪里<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>在实际开发中尽量不要使用标签<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>如果没有指定<span class="token keyword">break</span>，默认退出最近的循环体</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>候选码、主码、全码、外码、主属性、主键、主关键字、非主属性清晰总结</title>
      <link href="/archives/27626756.html"/>
      <url>/archives/27626756.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>键字=码字，所以 主键=主码=主关键字，候选键=候选码=候选关键字.</p></blockquote><ol><li><strong>超码</strong>：也叫超键,码是可以确定一个元组的所有信息的属性名或属性组</li></ol><blockquote><p>例如在 { a, b, c, d } 中，</p><p>假设知道 a 的值就能确定 a, b, c, d 的值，</p><p>假设知道 c, d 的值就可以确定 a, b, c, d 的值，</p><p>那么 { a } 就是码，{ c, d } 就是码。</p><p>并且 { a, b }, { a, c }, { a, b, c }, { a, b, c, d } 等也都是码，因为它们也可以确定一个元组的所有值，即使很多余。  </p></blockquote><ol start="2"><li><strong>候选码:</strong> 也叫候选键,候选码的真子集中不存在码，候选码可以有多个。</li></ol><blockquote><p>就上面的例子而言，{ a } 是候选码，{ c, d } 是候选码，因为它们的真子集中不存在码。  </p><p>而诸如 { a, b } 并不是候选码，因为它的真子集中含有 { a }， 且 { a } 是码。</p></blockquote><ol start="3"><li><strong>主码:</strong> 也叫主键,主码就是主键的意思，主码是任意一个候选码。</li></ol><blockquote><p>还是上面的例子，主码是候选码 { a }， { c, d } 中的其中一个。</p><p>既可以是 { a }， 也可以是 { c, d }。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Chrimetu/picdemo/img/20220628192236.png"></p><ol start="4"><li><ul><li><p><strong>主属性:</strong> 候选码包含的属性（一个或多个属性）</p></li><li><p><strong>非主属性:</strong> 不包含在候选码中的属性称为非主属性。 非主属性是相对于主属性来定义的。</p></li></ul></li></ol><blockquote><p>上面那个例子，{c,d}是候选码，那么c是一个主属性，d也是一个主属性  </p></blockquote><ol start="5"><li><strong>外键:</strong> 子数据表中出现的父数据表的主键，称为子数据表的外键。</li></ol><blockquote><p>假如我们还有一个教师表，每个教师都有自己的编号，假设老师编号在教师表中是主键，在学生表中它就是外键。</p></blockquote><ol start="6"><li><strong>全码:</strong> 当所有的属性共同构成一个候选码时，这时该候选码为全码。（教师，课程，学生）假如一个教师可以讲授多门课程，某门课程可以有多个教师讲授，学生可以听不同教师讲授的不同课程，那么，要区分关系中的每一个元组，这个关系模式R的候选码应为全部属性构成 （教师、课程、学生），即主码。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>韩小颖先生和张静静女士</title>
      <link href="/archives/29420ab5.html"/>
      <url>/archives/29420ab5.html</url>
      
        <content type="html"><![CDATA[<pre><code>System.out.println("Love")</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
